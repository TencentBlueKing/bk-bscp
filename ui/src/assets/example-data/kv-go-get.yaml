package main

import (
    "encoding/json"
    "fmt"
    "os"
    "strconv"
    "strings"

    "github.com/TencentBlueKing/bscp-go/client"
    "github.com/TencentBlueKing/bscp-go/internal/constant"
    "github.com/TencentBlueKing/bscp-go/pkg/logger"
)

func main() {
	// 设置日志自定义 Handler
	// logger.SetHandler(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{}))

	// 在线服务, 可设置 metrics
	// metrics.RegisterMetrics()
	// http.Handle("/metrics", promhttp.Handler())

	// 初始化配置信息
	var feedAddr string = "{{ .Bk_Bscp_Variable_FEED_ADDR }}"
	var biz uint32 = {{ .Bk_Bscp_Variable_BkBizId }}
	var token string = {{ .Bk_Bscp_Variable_ClientKey }}
	var app string = "{{ .Bk_Bscp_Variable_ServiceName }}"
	keys := []string{{{ .Bk_Bscp_Variable_KeyName }}}

	labels := map[string]string{{ .Bk_Bscp_Variable_Leabels }}

	bscp, err := client.New(
		client.WithFeedAddr(feedAddr),
		client.WithBizID(biz),
		client.WithToken(token),
		client.WithLabels(labels),
	)
	if err != nil {
		logger.Error("init client", logger.ErrAttr(err))
		os.Exit(1)
	}

	opts := []client.AppOption{}

	values, err := fetchConfigurationValues(bscp, appName, keys, opts)
  if err != nil {
    logger.Error("fetch configuration values", logger.ErrAttr(err))
    os.Exit(1)
  }
  for key, value := range values {
    fmt.Printf("Key: %s, Value: %s\n", key, value)
  }
	
}

func fetchConfigurationValues(bscp client.Client, app string, keys []string,
	opts []client.AppOption) (map[string]string, error) {
	kvs := make(map[string]string)

	keySet := make(map[string]struct{})
	isAll := false

	// 检查是否包含 "*"，如果包含，则获取所有数据
	for _, v := range keys {
		if v == "*" {
			isAll = true
			break // 找到 "*" 后，直接退出
		}
		keySet[v] = struct{}{} // 否则，将 key 加入 map
	}

	release, err := bscp.PullKvs(app, []string{}, opts...)
	if err != nil {
		return nil, err
	}

	// 遍历 release.KvItems，根据 isAll 和 keySet 来获取数据
	for _, v := range release.KvItems {
		value, err := bscp.Get(app, v.Key, opts...)
		if err != nil {
			return nil, err
		}
		_, exists := keySet[v.Key]
		if isAll || exists {
			kvs[v.Key] = value
		}
	}

	return kvs, nil
}
