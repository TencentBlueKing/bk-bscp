syntax = "proto3";

import "pkg/protocol/core/base/base.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package pbcredential;

option go_package = "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/credential;pbcredential";

message CredentialList {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端密钥ID" }];
  CredentialSpec spec = 2;
  CredentialAttachment attachment = 3;
  pbbase.Revision revision = 4;
  repeated string credential_scopes = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "关联规则" }];
}

message CredentialSpec {
  string credential_type = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "凭证类型：(bearToken)" }];
  string enc_credential = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "enc凭证" }];
  string enc_algorithm = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "enc算法" }];
  string name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥名称" }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥说明" }];
  bool enable = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否启用：是=true，否=false" }];
}

message CredentialAttachment {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
}

message CredentialScope {
  string scope = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "关联规则" }];
}
