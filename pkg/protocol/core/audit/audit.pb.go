// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: audit.proto

package pbaudit

import (
	app "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/app"
	strategy "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/strategy"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Audit audit source resource reference: pkg/dal/table/audit.go
type Audit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec          *AuditSpec             `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Attachment    *AuditAttachment       `protobuf:"bytes,3,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision      *Revision              `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Audit) Reset() {
	*x = Audit{}
	mi := &file_audit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Audit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audit) ProtoMessage() {}

func (x *Audit) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audit.ProtoReflect.Descriptor instead.
func (*Audit) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{0}
}

func (x *Audit) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Audit) GetSpec() *AuditSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Audit) GetAttachment() *AuditAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Audit) GetRevision() *Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// AuditSpec source resource reference: pkg/dal/table/audit.go
type AuditSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResType       string                 `protobuf:"bytes,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty"`
	Action        string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Rid           string                 `protobuf:"bytes,3,opt,name=rid,proto3" json:"rid,omitempty"`
	AppCode       string                 `protobuf:"bytes,4,opt,name=app_code,json=appCode,proto3" json:"app_code,omitempty"`
	Detail        string                 `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Operator      string                 `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	ResInstance   string                 `protobuf:"bytes,7,opt,name=res_instance,json=resInstance,proto3" json:"res_instance,omitempty"`
	OperateWay    string                 `protobuf:"bytes,8,opt,name=operate_way,json=operateWay,proto3" json:"operate_way,omitempty"`
	Status        string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	IsCompare     bool                   `protobuf:"varint,10,opt,name=is_compare,json=isCompare,proto3" json:"is_compare,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditSpec) Reset() {
	*x = AuditSpec{}
	mi := &file_audit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditSpec) ProtoMessage() {}

func (x *AuditSpec) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditSpec.ProtoReflect.Descriptor instead.
func (*AuditSpec) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{1}
}

func (x *AuditSpec) GetResType() string {
	if x != nil {
		return x.ResType
	}
	return ""
}

func (x *AuditSpec) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuditSpec) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *AuditSpec) GetAppCode() string {
	if x != nil {
		return x.AppCode
	}
	return ""
}

func (x *AuditSpec) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *AuditSpec) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AuditSpec) GetResInstance() string {
	if x != nil {
		return x.ResInstance
	}
	return ""
}

func (x *AuditSpec) GetOperateWay() string {
	if x != nil {
		return x.OperateWay
	}
	return ""
}

func (x *AuditSpec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AuditSpec) GetIsCompare() bool {
	if x != nil {
		return x.IsCompare
	}
	return false
}

// AuditAttachment defines the audit's attachment
type AuditAttachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BizId         uint32                 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	AppId         uint32                 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ResId         uint32                 `protobuf:"varint,3,opt,name=res_id,json=resId,proto3" json:"res_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditAttachment) Reset() {
	*x = AuditAttachment{}
	mi := &file_audit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditAttachment) ProtoMessage() {}

func (x *AuditAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditAttachment.ProtoReflect.Descriptor instead.
func (*AuditAttachment) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{2}
}

func (x *AuditAttachment) GetBizId() uint32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *AuditAttachment) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AuditAttachment) GetResId() uint32 {
	if x != nil {
		return x.ResId
	}
	return 0
}

// Revision defines the strategy's revision
type Revision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     string                 `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Revision) Reset() {
	*x = Revision{}
	mi := &file_audit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revision) ProtoMessage() {}

func (x *Revision) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revision.ProtoReflect.Descriptor instead.
func (*Revision) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{3}
}

func (x *Revision) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type ListAuditsAppStrategy struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Audit         *Audit                  `protobuf:"bytes,1,opt,name=audit,proto3" json:"audit,omitempty"`
	Strategy      *strategy.AuditStrategy `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	App           *app.AuditApp           `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuditsAppStrategy) Reset() {
	*x = ListAuditsAppStrategy{}
	mi := &file_audit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditsAppStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditsAppStrategy) ProtoMessage() {}

func (x *ListAuditsAppStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_audit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditsAppStrategy.ProtoReflect.Descriptor instead.
func (*ListAuditsAppStrategy) Descriptor() ([]byte, []int) {
	return file_audit_proto_rawDescGZIP(), []int{4}
}

func (x *ListAuditsAppStrategy) GetAudit() *Audit {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *ListAuditsAppStrategy) GetStrategy() *strategy.AuditStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *ListAuditsAppStrategy) GetApp() *app.AuditApp {
	if x != nil {
		return x.App
	}
	return nil
}

var File_audit_proto protoreflect.FileDescriptor

const file_audit_proto_rawDesc = "" +
	"\n" +
	"\vaudit.proto\x12\apbaudit\x1a\x1fpkg/protocol/core/app/app.proto\x1a)pkg/protocol/core/strategy/strategy.proto\"\xa8\x01\n" +
	"\x05Audit\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12&\n" +
	"\x04spec\x18\x02 \x01(\v2\x12.pbaudit.AuditSpecR\x04spec\x128\n" +
	"\n" +
	"attachment\x18\x03 \x01(\v2\x18.pbaudit.AuditAttachmentR\n" +
	"attachment\x12-\n" +
	"\brevision\x18\x04 \x01(\v2\x11.pbaudit.RevisionR\brevision\"\x9a\x02\n" +
	"\tAuditSpec\x12\x19\n" +
	"\bres_type\x18\x01 \x01(\tR\aresType\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\x12\x10\n" +
	"\x03rid\x18\x03 \x01(\tR\x03rid\x12\x19\n" +
	"\bapp_code\x18\x04 \x01(\tR\aappCode\x12\x16\n" +
	"\x06detail\x18\x05 \x01(\tR\x06detail\x12\x1a\n" +
	"\boperator\x18\x06 \x01(\tR\boperator\x12!\n" +
	"\fres_instance\x18\a \x01(\tR\vresInstance\x12\x1f\n" +
	"\voperate_way\x18\b \x01(\tR\n" +
	"operateWay\x12\x16\n" +
	"\x06status\x18\t \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"is_compare\x18\n" +
	" \x01(\bR\tisCompare\"V\n" +
	"\x0fAuditAttachment\x12\x15\n" +
	"\x06biz_id\x18\x01 \x01(\rR\x05bizId\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\x12\x15\n" +
	"\x06res_id\x18\x03 \x01(\rR\x05resId\")\n" +
	"\bRevision\x12\x1d\n" +
	"\n" +
	"created_at\x18\x01 \x01(\tR\tcreatedAt\"\x97\x01\n" +
	"\x15ListAuditsAppStrategy\x12$\n" +
	"\x05audit\x18\x01 \x01(\v2\x0e.pbaudit.AuditR\x05audit\x125\n" +
	"\bstrategy\x18\x02 \x01(\v2\x19.pbstrategy.AuditStrategyR\bstrategy\x12!\n" +
	"\x03app\x18\x03 \x01(\v2\x0f.pbapp.AuditAppR\x03appBDZBgithub.com/TencentBlueKing/bk-bscp/pkg/protocol/core/audit;pbauditb\x06proto3"

var (
	file_audit_proto_rawDescOnce sync.Once
	file_audit_proto_rawDescData []byte
)

func file_audit_proto_rawDescGZIP() []byte {
	file_audit_proto_rawDescOnce.Do(func() {
		file_audit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_audit_proto_rawDesc), len(file_audit_proto_rawDesc)))
	})
	return file_audit_proto_rawDescData
}

var file_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_audit_proto_goTypes = []any{
	(*Audit)(nil),                  // 0: pbaudit.Audit
	(*AuditSpec)(nil),              // 1: pbaudit.AuditSpec
	(*AuditAttachment)(nil),        // 2: pbaudit.AuditAttachment
	(*Revision)(nil),               // 3: pbaudit.Revision
	(*ListAuditsAppStrategy)(nil),  // 4: pbaudit.ListAuditsAppStrategy
	(*strategy.AuditStrategy)(nil), // 5: pbstrategy.AuditStrategy
	(*app.AuditApp)(nil),           // 6: pbapp.AuditApp
}
var file_audit_proto_depIdxs = []int32{
	1, // 0: pbaudit.Audit.spec:type_name -> pbaudit.AuditSpec
	2, // 1: pbaudit.Audit.attachment:type_name -> pbaudit.AuditAttachment
	3, // 2: pbaudit.Audit.revision:type_name -> pbaudit.Revision
	0, // 3: pbaudit.ListAuditsAppStrategy.audit:type_name -> pbaudit.Audit
	5, // 4: pbaudit.ListAuditsAppStrategy.strategy:type_name -> pbstrategy.AuditStrategy
	6, // 5: pbaudit.ListAuditsAppStrategy.app:type_name -> pbapp.AuditApp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_audit_proto_init() }
func file_audit_proto_init() {
	if File_audit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_audit_proto_rawDesc), len(file_audit_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_audit_proto_goTypes,
		DependencyIndexes: file_audit_proto_depIdxs,
		MessageInfos:      file_audit_proto_msgTypes,
	}.Build()
	File_audit_proto = out.File
	file_audit_proto_goTypes = nil
	file_audit_proto_depIdxs = nil
}
