// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: strategy.proto

package pbstrategy

import (
	group "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/group"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// strategy source resource reference: pkg/dal/table/strategy.go
type Strategy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec          *StrategySpec          `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *StrategyState         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Attachment    *StrategyAttachment    `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision      *Revision              `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
	App           *AppSpec               `protobuf:"bytes,6,opt,name=app,proto3" json:"app,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Strategy) Reset() {
	*x = Strategy{}
	mi := &file_strategy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Strategy) ProtoMessage() {}

func (x *Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Strategy.ProtoReflect.Descriptor instead.
func (*Strategy) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *Strategy) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Strategy) GetSpec() *StrategySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Strategy) GetStatus() *StrategyState {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Strategy) GetAttachment() *StrategyAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Strategy) GetRevision() *Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Strategy) GetApp() *AppSpec {
	if x != nil {
		return x.App
	}
	return nil
}

// ReleaseSpec source resource reference: pkg/dal/table/release.go
type StrategySpec struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseId         uint32                 `protobuf:"varint,2,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	AsDefault         bool                   `protobuf:"varint,3,opt,name=as_default,json=asDefault,proto3" json:"as_default,omitempty"`
	Scope             *Scope                 `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	Namespace         string                 `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	PublishType       string                 `protobuf:"bytes,6,opt,name=publish_type,json=publishType,proto3" json:"publish_type,omitempty"`
	PublishTime       string                 `protobuf:"bytes,7,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	PublishStatus     string                 `protobuf:"bytes,8,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`
	RejectReason      string                 `protobuf:"bytes,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Approver          string                 `protobuf:"bytes,10,opt,name=approver,proto3" json:"approver,omitempty"`
	ApproverProgress  string                 `protobuf:"bytes,11,opt,name=approver_progress,json=approverProgress,proto3" json:"approver_progress,omitempty"`
	Memo              string                 `protobuf:"bytes,12,opt,name=memo,proto3" json:"memo,omitempty"`
	FinalApprovalTime string                 `protobuf:"bytes,13,opt,name=final_approval_time,json=finalApprovalTime,proto3" json:"final_approval_time,omitempty"`
	ItsmTicketType    string                 `protobuf:"bytes,14,opt,name=itsm_ticket_type,json=itsmTicketType,proto3" json:"itsm_ticket_type,omitempty"`
	ItsmTicketUrl     string                 `protobuf:"bytes,15,opt,name=itsm_ticket_url,json=itsmTicketUrl,proto3" json:"itsm_ticket_url,omitempty"`
	ItsmTicketSn      string                 `protobuf:"bytes,16,opt,name=itsm_ticket_sn,json=itsmTicketSn,proto3" json:"itsm_ticket_sn,omitempty"`
	ItsmTicketStatus  string                 `protobuf:"bytes,17,opt,name=itsm_ticket_status,json=itsmTicketStatus,proto3" json:"itsm_ticket_status,omitempty"`
	ItsmTicketStateId string                 `protobuf:"bytes,18,opt,name=itsm_ticket_state_id,json=itsmTicketStateId,proto3" json:"itsm_ticket_state_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StrategySpec) Reset() {
	*x = StrategySpec{}
	mi := &file_strategy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategySpec) ProtoMessage() {}

func (x *StrategySpec) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategySpec.ProtoReflect.Descriptor instead.
func (*StrategySpec) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{1}
}

func (x *StrategySpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StrategySpec) GetReleaseId() uint32 {
	if x != nil {
		return x.ReleaseId
	}
	return 0
}

func (x *StrategySpec) GetAsDefault() bool {
	if x != nil {
		return x.AsDefault
	}
	return false
}

func (x *StrategySpec) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *StrategySpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StrategySpec) GetPublishType() string {
	if x != nil {
		return x.PublishType
	}
	return ""
}

func (x *StrategySpec) GetPublishTime() string {
	if x != nil {
		return x.PublishTime
	}
	return ""
}

func (x *StrategySpec) GetPublishStatus() string {
	if x != nil {
		return x.PublishStatus
	}
	return ""
}

func (x *StrategySpec) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *StrategySpec) GetApprover() string {
	if x != nil {
		return x.Approver
	}
	return ""
}

func (x *StrategySpec) GetApproverProgress() string {
	if x != nil {
		return x.ApproverProgress
	}
	return ""
}

func (x *StrategySpec) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *StrategySpec) GetFinalApprovalTime() string {
	if x != nil {
		return x.FinalApprovalTime
	}
	return ""
}

func (x *StrategySpec) GetItsmTicketType() string {
	if x != nil {
		return x.ItsmTicketType
	}
	return ""
}

func (x *StrategySpec) GetItsmTicketUrl() string {
	if x != nil {
		return x.ItsmTicketUrl
	}
	return ""
}

func (x *StrategySpec) GetItsmTicketSn() string {
	if x != nil {
		return x.ItsmTicketSn
	}
	return ""
}

func (x *StrategySpec) GetItsmTicketStatus() string {
	if x != nil {
		return x.ItsmTicketStatus
	}
	return ""
}

func (x *StrategySpec) GetItsmTicketStateId() string {
	if x != nil {
		return x.ItsmTicketStateId
	}
	return ""
}

// Scope defines the scope
type Scope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*group.Group         `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope) Reset() {
	*x = Scope{}
	mi := &file_strategy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{2}
}

func (x *Scope) GetGroups() []*group.Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

// StrategyState defines the strategy's state
type StrategyState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PubState      string                 `protobuf:"bytes,1,opt,name=pub_state,json=pubState,proto3" json:"pub_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StrategyState) Reset() {
	*x = StrategyState{}
	mi := &file_strategy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyState) ProtoMessage() {}

func (x *StrategyState) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyState.ProtoReflect.Descriptor instead.
func (*StrategyState) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{3}
}

func (x *StrategyState) GetPubState() string {
	if x != nil {
		return x.PubState
	}
	return ""
}

// StrategyAttachment defines the strategy's attachment
type StrategyAttachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BizId         uint32                 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	AppId         uint32                 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	StrategySetId uint32                 `protobuf:"varint,3,opt,name=strategy_set_id,json=strategySetId,proto3" json:"strategy_set_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StrategyAttachment) Reset() {
	*x = StrategyAttachment{}
	mi := &file_strategy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyAttachment) ProtoMessage() {}

func (x *StrategyAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyAttachment.ProtoReflect.Descriptor instead.
func (*StrategyAttachment) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{4}
}

func (x *StrategyAttachment) GetBizId() uint32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *StrategyAttachment) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *StrategyAttachment) GetStrategySetId() uint32 {
	if x != nil {
		return x.StrategySetId
	}
	return 0
}

// // Revision defines the strategy's revision
type Revision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Creator       string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Reviser       string                 `protobuf:"bytes,2,opt,name=reviser,proto3" json:"reviser,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Revision) Reset() {
	*x = Revision{}
	mi := &file_strategy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Revision) ProtoMessage() {}

func (x *Revision) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Revision.ProtoReflect.Descriptor instead.
func (*Revision) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{5}
}

func (x *Revision) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Revision) GetReviser() string {
	if x != nil {
		return x.Reviser
	}
	return ""
}

func (x *Revision) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Revision) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// AuditStrategy strategy relate audit
type AuditStrategy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PublishType       string                 `protobuf:"bytes,1,opt,name=publish_type,json=publishType,proto3" json:"publish_type,omitempty"`
	PublishTime       string                 `protobuf:"bytes,2,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	PublishStatus     string                 `protobuf:"bytes,3,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`
	RejectReason      string                 `protobuf:"bytes,4,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Approver          string                 `protobuf:"bytes,5,opt,name=approver,proto3" json:"approver,omitempty"`
	ApproverProgress  string                 `protobuf:"bytes,6,opt,name=approver_progress,json=approverProgress,proto3" json:"approver_progress,omitempty"`
	UpdatedAt         string                 `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Reviser           string                 `protobuf:"bytes,8,opt,name=reviser,proto3" json:"reviser,omitempty"`
	ReleaseId         uint32                 `protobuf:"varint,9,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty"`
	Scope             *Scope                 `protobuf:"bytes,10,opt,name=scope,proto3" json:"scope,omitempty"`
	Creator           string                 `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	FinalApprovalTime string                 `protobuf:"bytes,12,opt,name=final_approval_time,json=finalApprovalTime,proto3" json:"final_approval_time,omitempty"`
	ItsmTicketType    string                 `protobuf:"bytes,13,opt,name=itsm_ticket_type,json=itsmTicketType,proto3" json:"itsm_ticket_type,omitempty"`
	ItsmTicketUrl     string                 `protobuf:"bytes,14,opt,name=itsm_ticket_url,json=itsmTicketUrl,proto3" json:"itsm_ticket_url,omitempty"`
	ItsmTicketSn      string                 `protobuf:"bytes,15,opt,name=itsm_ticket_sn,json=itsmTicketSn,proto3" json:"itsm_ticket_sn,omitempty"`
	ItsmTicketStatus  string                 `protobuf:"bytes,16,opt,name=itsm_ticket_status,json=itsmTicketStatus,proto3" json:"itsm_ticket_status,omitempty"`
	ItsmTicketStateId string                 `protobuf:"bytes,17,opt,name=itsm_ticket_state_id,json=itsmTicketStateId,proto3" json:"itsm_ticket_state_id,omitempty"`
	Memo              string                 `protobuf:"bytes,18,opt,name=memo,proto3" json:"memo,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AuditStrategy) Reset() {
	*x = AuditStrategy{}
	mi := &file_strategy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditStrategy) ProtoMessage() {}

func (x *AuditStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditStrategy.ProtoReflect.Descriptor instead.
func (*AuditStrategy) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{6}
}

func (x *AuditStrategy) GetPublishType() string {
	if x != nil {
		return x.PublishType
	}
	return ""
}

func (x *AuditStrategy) GetPublishTime() string {
	if x != nil {
		return x.PublishTime
	}
	return ""
}

func (x *AuditStrategy) GetPublishStatus() string {
	if x != nil {
		return x.PublishStatus
	}
	return ""
}

func (x *AuditStrategy) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *AuditStrategy) GetApprover() string {
	if x != nil {
		return x.Approver
	}
	return ""
}

func (x *AuditStrategy) GetApproverProgress() string {
	if x != nil {
		return x.ApproverProgress
	}
	return ""
}

func (x *AuditStrategy) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *AuditStrategy) GetReviser() string {
	if x != nil {
		return x.Reviser
	}
	return ""
}

func (x *AuditStrategy) GetReleaseId() uint32 {
	if x != nil {
		return x.ReleaseId
	}
	return 0
}

func (x *AuditStrategy) GetScope() *Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *AuditStrategy) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *AuditStrategy) GetFinalApprovalTime() string {
	if x != nil {
		return x.FinalApprovalTime
	}
	return ""
}

func (x *AuditStrategy) GetItsmTicketType() string {
	if x != nil {
		return x.ItsmTicketType
	}
	return ""
}

func (x *AuditStrategy) GetItsmTicketUrl() string {
	if x != nil {
		return x.ItsmTicketUrl
	}
	return ""
}

func (x *AuditStrategy) GetItsmTicketSn() string {
	if x != nil {
		return x.ItsmTicketSn
	}
	return ""
}

func (x *AuditStrategy) GetItsmTicketStatus() string {
	if x != nil {
		return x.ItsmTicketStatus
	}
	return ""
}

func (x *AuditStrategy) GetItsmTicketStateId() string {
	if x != nil {
		return x.ItsmTicketStateId
	}
	return ""
}

func (x *AuditStrategy) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// AppSpec app relate
type AppSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Creator       string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ApproveType   string                 `protobuf:"bytes,2,opt,name=approve_type,json=approveType,proto3" json:"approve_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppSpec) Reset() {
	*x = AppSpec{}
	mi := &file_strategy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSpec) ProtoMessage() {}

func (x *AppSpec) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSpec.ProtoReflect.Descriptor instead.
func (*AppSpec) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{7}
}

func (x *AppSpec) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *AppSpec) GetApproveType() string {
	if x != nil {
		return x.ApproveType
	}
	return ""
}

var File_strategy_proto protoreflect.FileDescriptor

const file_strategy_proto_rawDesc = "" +
	"\n" +
	"\x0estrategy.proto\x12\n" +
	"pbstrategy\x1a#pkg/protocol/core/group/group.proto\"\x94\x02\n" +
	"\bStrategy\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12,\n" +
	"\x04spec\x18\x02 \x01(\v2\x18.pbstrategy.StrategySpecR\x04spec\x121\n" +
	"\x06status\x18\x03 \x01(\v2\x19.pbstrategy.StrategyStateR\x06status\x12>\n" +
	"\n" +
	"attachment\x18\x04 \x01(\v2\x1e.pbstrategy.StrategyAttachmentR\n" +
	"attachment\x120\n" +
	"\brevision\x18\x05 \x01(\v2\x14.pbstrategy.RevisionR\brevision\x12%\n" +
	"\x03app\x18\x06 \x01(\v2\x13.pbstrategy.AppSpecR\x03app\"\x9d\x05\n" +
	"\fStrategySpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"release_id\x18\x02 \x01(\rR\treleaseId\x12\x1d\n" +
	"\n" +
	"as_default\x18\x03 \x01(\bR\tasDefault\x12'\n" +
	"\x05scope\x18\x04 \x01(\v2\x11.pbstrategy.ScopeR\x05scope\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\x12!\n" +
	"\fpublish_type\x18\x06 \x01(\tR\vpublishType\x12!\n" +
	"\fpublish_time\x18\a \x01(\tR\vpublishTime\x12%\n" +
	"\x0epublish_status\x18\b \x01(\tR\rpublishStatus\x12#\n" +
	"\rreject_reason\x18\t \x01(\tR\frejectReason\x12\x1a\n" +
	"\bapprover\x18\n" +
	" \x01(\tR\bapprover\x12+\n" +
	"\x11approver_progress\x18\v \x01(\tR\x10approverProgress\x12\x12\n" +
	"\x04memo\x18\f \x01(\tR\x04memo\x12.\n" +
	"\x13final_approval_time\x18\r \x01(\tR\x11finalApprovalTime\x12(\n" +
	"\x10itsm_ticket_type\x18\x0e \x01(\tR\x0eitsmTicketType\x12&\n" +
	"\x0fitsm_ticket_url\x18\x0f \x01(\tR\ritsmTicketUrl\x12$\n" +
	"\x0eitsm_ticket_sn\x18\x10 \x01(\tR\fitsmTicketSn\x12,\n" +
	"\x12itsm_ticket_status\x18\x11 \x01(\tR\x10itsmTicketStatus\x12/\n" +
	"\x14itsm_ticket_state_id\x18\x12 \x01(\tR\x11itsmTicketStateId\"/\n" +
	"\x05Scope\x12&\n" +
	"\x06groups\x18\x01 \x03(\v2\x0e.pbgroup.GroupR\x06groups\",\n" +
	"\rStrategyState\x12\x1b\n" +
	"\tpub_state\x18\x01 \x01(\tR\bpubState\"j\n" +
	"\x12StrategyAttachment\x12\x15\n" +
	"\x06biz_id\x18\x01 \x01(\rR\x05bizId\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\x12&\n" +
	"\x0fstrategy_set_id\x18\x03 \x01(\rR\rstrategySetId\"|\n" +
	"\bRevision\x12\x18\n" +
	"\acreator\x18\x01 \x01(\tR\acreator\x12\x18\n" +
	"\areviser\x18\x02 \x01(\tR\areviser\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x04 \x01(\tR\tupdatedAt\"\xa0\x05\n" +
	"\rAuditStrategy\x12!\n" +
	"\fpublish_type\x18\x01 \x01(\tR\vpublishType\x12!\n" +
	"\fpublish_time\x18\x02 \x01(\tR\vpublishTime\x12%\n" +
	"\x0epublish_status\x18\x03 \x01(\tR\rpublishStatus\x12#\n" +
	"\rreject_reason\x18\x04 \x01(\tR\frejectReason\x12\x1a\n" +
	"\bapprover\x18\x05 \x01(\tR\bapprover\x12+\n" +
	"\x11approver_progress\x18\x06 \x01(\tR\x10approverProgress\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\tR\tupdatedAt\x12\x18\n" +
	"\areviser\x18\b \x01(\tR\areviser\x12\x1d\n" +
	"\n" +
	"release_id\x18\t \x01(\rR\treleaseId\x12'\n" +
	"\x05scope\x18\n" +
	" \x01(\v2\x11.pbstrategy.ScopeR\x05scope\x12\x18\n" +
	"\acreator\x18\v \x01(\tR\acreator\x12.\n" +
	"\x13final_approval_time\x18\f \x01(\tR\x11finalApprovalTime\x12(\n" +
	"\x10itsm_ticket_type\x18\r \x01(\tR\x0eitsmTicketType\x12&\n" +
	"\x0fitsm_ticket_url\x18\x0e \x01(\tR\ritsmTicketUrl\x12$\n" +
	"\x0eitsm_ticket_sn\x18\x0f \x01(\tR\fitsmTicketSn\x12,\n" +
	"\x12itsm_ticket_status\x18\x10 \x01(\tR\x10itsmTicketStatus\x12/\n" +
	"\x14itsm_ticket_state_id\x18\x11 \x01(\tR\x11itsmTicketStateId\x12\x12\n" +
	"\x04memo\x18\x12 \x01(\tR\x04memo\"F\n" +
	"\aAppSpec\x12\x18\n" +
	"\acreator\x18\x01 \x01(\tR\acreator\x12!\n" +
	"\fapprove_type\x18\x02 \x01(\tR\vapproveTypeBJZHgithub.com/TencentBlueKing/bk-bscp/pkg/protocol/core/strategy;pbstrategyb\x06proto3"

var (
	file_strategy_proto_rawDescOnce sync.Once
	file_strategy_proto_rawDescData []byte
)

func file_strategy_proto_rawDescGZIP() []byte {
	file_strategy_proto_rawDescOnce.Do(func() {
		file_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_strategy_proto_rawDesc), len(file_strategy_proto_rawDesc)))
	})
	return file_strategy_proto_rawDescData
}

var file_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_strategy_proto_goTypes = []any{
	(*Strategy)(nil),           // 0: pbstrategy.Strategy
	(*StrategySpec)(nil),       // 1: pbstrategy.StrategySpec
	(*Scope)(nil),              // 2: pbstrategy.Scope
	(*StrategyState)(nil),      // 3: pbstrategy.StrategyState
	(*StrategyAttachment)(nil), // 4: pbstrategy.StrategyAttachment
	(*Revision)(nil),           // 5: pbstrategy.Revision
	(*AuditStrategy)(nil),      // 6: pbstrategy.AuditStrategy
	(*AppSpec)(nil),            // 7: pbstrategy.AppSpec
	(*group.Group)(nil),        // 8: pbgroup.Group
}
var file_strategy_proto_depIdxs = []int32{
	1, // 0: pbstrategy.Strategy.spec:type_name -> pbstrategy.StrategySpec
	3, // 1: pbstrategy.Strategy.status:type_name -> pbstrategy.StrategyState
	4, // 2: pbstrategy.Strategy.attachment:type_name -> pbstrategy.StrategyAttachment
	5, // 3: pbstrategy.Strategy.revision:type_name -> pbstrategy.Revision
	7, // 4: pbstrategy.Strategy.app:type_name -> pbstrategy.AppSpec
	2, // 5: pbstrategy.StrategySpec.scope:type_name -> pbstrategy.Scope
	8, // 6: pbstrategy.Scope.groups:type_name -> pbgroup.Group
	2, // 7: pbstrategy.AuditStrategy.scope:type_name -> pbstrategy.Scope
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_strategy_proto_init() }
func file_strategy_proto_init() {
	if File_strategy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_strategy_proto_rawDesc), len(file_strategy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_strategy_proto_goTypes,
		DependencyIndexes: file_strategy_proto_depIdxs,
		MessageInfos:      file_strategy_proto_msgTypes,
	}.Build()
	File_strategy_proto = out.File
	file_strategy_proto_goTypes = nil
	file_strategy_proto_depIdxs = nil
}
