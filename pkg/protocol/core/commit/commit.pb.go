// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v4.25.1
// source: commit.proto

package pbcommit

import (
	base "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/base"
	content "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/content"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Commit source resource reference: pkg/dal/table/commit.go
type Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec          *CommitSpec            `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Attachment    *CommitAttachment      `protobuf:"bytes,3,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision      *base.CreatedRevision  `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_commit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{0}
}

func (x *Commit) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Commit) GetSpec() *CommitSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Commit) GetAttachment() *CommitAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Commit) GetRevision() *base.CreatedRevision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// CommitSpec source resource reference: pkg/dal/table/commit.go
type CommitSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentId     uint32                 `protobuf:"varint,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Content       *content.ContentSpec   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Memo          string                 `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitSpec) Reset() {
	*x = CommitSpec{}
	mi := &file_commit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSpec) ProtoMessage() {}

func (x *CommitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSpec.ProtoReflect.Descriptor instead.
func (*CommitSpec) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{1}
}

func (x *CommitSpec) GetContentId() uint32 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *CommitSpec) GetContent() *content.ContentSpec {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CommitSpec) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// ReleasedCommitSpec source resource reference: pkg/dal/table/commit.go
type ReleasedCommitSpec struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	ContentId     uint32                       `protobuf:"varint,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Content       *content.ReleasedContentSpec `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Memo          string                       `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleasedCommitSpec) Reset() {
	*x = ReleasedCommitSpec{}
	mi := &file_commit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleasedCommitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasedCommitSpec) ProtoMessage() {}

func (x *ReleasedCommitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasedCommitSpec.ProtoReflect.Descriptor instead.
func (*ReleasedCommitSpec) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{2}
}

func (x *ReleasedCommitSpec) GetContentId() uint32 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *ReleasedCommitSpec) GetContent() *content.ReleasedContentSpec {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ReleasedCommitSpec) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

// CommitAttachment source resource reference: pkg/dal/table/commit.go
type CommitAttachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BizId         uint32                 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	AppId         uint32                 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ConfigItemId  uint32                 `protobuf:"varint,3,opt,name=config_item_id,json=configItemId,proto3" json:"config_item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitAttachment) Reset() {
	*x = CommitAttachment{}
	mi := &file_commit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAttachment) ProtoMessage() {}

func (x *CommitAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_commit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAttachment.ProtoReflect.Descriptor instead.
func (*CommitAttachment) Descriptor() ([]byte, []int) {
	return file_commit_proto_rawDescGZIP(), []int{3}
}

func (x *CommitAttachment) GetBizId() uint32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *CommitAttachment) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CommitAttachment) GetConfigItemId() uint32 {
	if x != nil {
		return x.ConfigItemId
	}
	return 0
}

var File_commit_proto protoreflect.FileDescriptor

const file_commit_proto_rawDesc = "" +
	"\n" +
	"\fcommit.proto\x12\bpbcommit\x1a!pkg/protocol/core/base/base.proto\x1a'pkg/protocol/core/content/content.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xd7\x01\n" +
	"\x06Commit\x122\n" +
	"\x02id\x18\x01 \x01(\rB\"\x92A\x1f2\x1d文件配置项版本记录IDR\x02id\x12(\n" +
	"\x04spec\x18\x02 \x01(\v2\x14.pbcommit.CommitSpecR\x04spec\x12:\n" +
	"\n" +
	"attachment\x18\x03 \x01(\v2\x1a.pbcommit.CommitAttachmentR\n" +
	"attachment\x123\n" +
	"\brevision\x18\x04 \x01(\v2\x17.pbbase.CreatedRevisionR\brevision\"\x9c\x01\n" +
	"\n" +
	"CommitSpec\x12;\n" +
	"\n" +
	"content_id\x18\x01 \x01(\rB\x1c\x92A\x192\x17文件配置项内容IDR\tcontentId\x120\n" +
	"\acontent\x18\x02 \x01(\v2\x16.pbcontent.ContentSpecR\acontent\x12\x1f\n" +
	"\x04memo\x18\x03 \x01(\tB\v\x92A\b2\x06描述R\x04memo\"\xac\x01\n" +
	"\x12ReleasedCommitSpec\x12;\n" +
	"\n" +
	"content_id\x18\x01 \x01(\rB\x1c\x92A\x192\x17文件配置项内容IDR\tcontentId\x128\n" +
	"\acontent\x18\x02 \x01(\v2\x1e.pbcontent.ReleasedContentSpecR\acontent\x12\x1f\n" +
	"\x04memo\x18\x03 \x01(\tB\v\x92A\b2\x06描述R\x04memo\"\x9c\x01\n" +
	"\x10CommitAttachment\x12$\n" +
	"\x06biz_id\x18\x01 \x01(\rB\r\x92A\n" +
	"2\b业务IDR\x05bizId\x12$\n" +
	"\x06app_id\x18\x02 \x01(\rB\r\x92A\n" +
	"2\b服务IDR\x05appId\x12<\n" +
	"\x0econfig_item_id\x18\x03 \x01(\rB\x16\x92A\x132\x11文件配置项IDR\fconfigItemIdBFZDgithub.com/TencentBlueKing/bk-bscp/pkg/protocol/core/commit;pbcommitb\x06proto3"

var (
	file_commit_proto_rawDescOnce sync.Once
	file_commit_proto_rawDescData []byte
)

func file_commit_proto_rawDescGZIP() []byte {
	file_commit_proto_rawDescOnce.Do(func() {
		file_commit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_commit_proto_rawDesc), len(file_commit_proto_rawDesc)))
	})
	return file_commit_proto_rawDescData
}

var file_commit_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_commit_proto_goTypes = []any{
	(*Commit)(nil),                      // 0: pbcommit.Commit
	(*CommitSpec)(nil),                  // 1: pbcommit.CommitSpec
	(*ReleasedCommitSpec)(nil),          // 2: pbcommit.ReleasedCommitSpec
	(*CommitAttachment)(nil),            // 3: pbcommit.CommitAttachment
	(*base.CreatedRevision)(nil),        // 4: pbbase.CreatedRevision
	(*content.ContentSpec)(nil),         // 5: pbcontent.ContentSpec
	(*content.ReleasedContentSpec)(nil), // 6: pbcontent.ReleasedContentSpec
}
var file_commit_proto_depIdxs = []int32{
	1, // 0: pbcommit.Commit.spec:type_name -> pbcommit.CommitSpec
	3, // 1: pbcommit.Commit.attachment:type_name -> pbcommit.CommitAttachment
	4, // 2: pbcommit.Commit.revision:type_name -> pbbase.CreatedRevision
	5, // 3: pbcommit.CommitSpec.content:type_name -> pbcontent.ContentSpec
	6, // 4: pbcommit.ReleasedCommitSpec.content:type_name -> pbcontent.ReleasedContentSpec
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_commit_proto_init() }
func file_commit_proto_init() {
	if File_commit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_commit_proto_rawDesc), len(file_commit_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commit_proto_goTypes,
		DependencyIndexes: file_commit_proto_depIdxs,
		MessageInfos:      file_commit_proto_msgTypes,
	}.Build()
	File_commit_proto = out.File
	file_commit_proto_goTypes = nil
	file_commit_proto_depIdxs = nil
}
