// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: process.proto

package pbproc

import (
	base "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/base"
	process_instance "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/process-instance"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Process source resource reference: pkg/dal/table/process.go
type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec       *ProcessSpec                 `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Attachment *ProcessAttachment           `protobuf:"bytes,3,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision   *base.Revision               `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	ProcInst   []*process_instance.ProcInst `protobuf:"bytes,5,rep,name=proc_inst,json=procInst,proto3" json:"proc_inst,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	mi := &file_process_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{0}
}

func (x *Process) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Process) GetSpec() *ProcessSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Process) GetAttachment() *ProcessAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Process) GetRevision() *base.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Process) GetProcInst() []*process_instance.ProcInst {
	if x != nil {
		return x.ProcInst
	}
	return nil
}

// ProcessSpec source resource reference: pkg/dal/table/process.go
type ProcessSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetName         string                 `protobuf:"bytes,1,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	ModuleName      string                 `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ServiceName     string                 `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Environment     string                 `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	Alias           string                 `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	InnerIp         string                 `protobuf:"bytes,6,opt,name=inner_ip,json=innerIp,proto3" json:"inner_ip,omitempty"`
	CcSyncStatus    string                 `protobuf:"bytes,7,opt,name=cc_sync_status,json=ccSyncStatus,proto3" json:"cc_sync_status,omitempty"`
	CcSyncUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=cc_sync_updated_at,json=ccSyncUpdatedAt,proto3" json:"cc_sync_updated_at,omitempty"`
	SourceData      string                 `protobuf:"bytes,9,opt,name=source_data,json=sourceData,proto3" json:"source_data,omitempty"`
	// 展示操作按钮是否可以操作,是一个map，key代表动作，value代表是否可以操作
	Actions map[string]bool `protobuf:"bytes,10,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ProcessSpec) Reset() {
	*x = ProcessSpec{}
	mi := &file_process_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSpec) ProtoMessage() {}

func (x *ProcessSpec) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessSpec.ProtoReflect.Descriptor instead.
func (*ProcessSpec) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessSpec) GetSetName() string {
	if x != nil {
		return x.SetName
	}
	return ""
}

func (x *ProcessSpec) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *ProcessSpec) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ProcessSpec) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ProcessSpec) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ProcessSpec) GetInnerIp() string {
	if x != nil {
		return x.InnerIp
	}
	return ""
}

func (x *ProcessSpec) GetCcSyncStatus() string {
	if x != nil {
		return x.CcSyncStatus
	}
	return ""
}

func (x *ProcessSpec) GetCcSyncUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CcSyncUpdatedAt
	}
	return nil
}

func (x *ProcessSpec) GetSourceData() string {
	if x != nil {
		return x.SourceData
	}
	return ""
}

func (x *ProcessSpec) GetActions() map[string]bool {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ProcessAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizId       uint32 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	TenantId    string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	CcProcessId uint32 `protobuf:"varint,3,opt,name=cc_process_id,json=ccProcessId,proto3" json:"cc_process_id,omitempty"`
}

func (x *ProcessAttachment) Reset() {
	*x = ProcessAttachment{}
	mi := &file_process_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAttachment) ProtoMessage() {}

func (x *ProcessAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAttachment.ProtoReflect.Descriptor instead.
func (*ProcessAttachment) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessAttachment) GetBizId() uint32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *ProcessAttachment) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProcessAttachment) GetCcProcessId() uint32 {
	if x != nil {
		return x.CcProcessId
	}
	return 0
}

var File_process_proto protoreflect.FileDescriptor

var file_process_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x1a, 0x21, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x39, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x62, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x22, 0x9b, 0x06, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x07, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0xa8, 0xa1,
	0xe5, 0x9d, 0x97, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe5, 0xae, 0x9e, 0xe4, 0xbe, 0x8b, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x28, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0xe7, 0xad, 0x89, 0x29, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x9b,
	0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0xab, 0xe5, 0x90, 0x8d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0x91, 0x49,
	0x50, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x63,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x63, 0x63, 0xe5, 0x90, 0x8c, 0xe6, 0xad,
	0xa5, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x3a, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x2c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0c,
	0x63, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x12,
	0x63, 0x63, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x63, 0x63, 0xe5, 0x90, 0x8c,
	0xe6, 0xad, 0xa5, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52,
	0x0f, 0x63, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x41, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe6, 0xba, 0x90, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x2c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x92, 0x8c, 0x43,
	0x43, 0xe5, 0xaf, 0xb9, 0xe6, 0xaf, 0x94, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0xa5, 0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x69, 0x92, 0x41, 0x66, 0x32, 0x64, 0xe5, 0xb1,
	0x95, 0xe7, 0xa4, 0xba, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe6, 0x8c, 0x89, 0xe9, 0x92, 0xae,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x93, 0x8d, 0xe4,
	0xbd, 0x9c, 0x28, 0x6b, 0x65, 0x79, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x98, 0xaf, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x2c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x73, 0x74, 0x6f, 0x70, 0x2c, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x2c, 0x6b, 0x69, 0x6c,
	0x6c, 0x29, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x05, 0x62, 0x69,
	0x7a, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0xa7, 0x9f,
	0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0d, 0x63, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x63, 0x63, 0xe8,
	0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x75, 0x65, 0x4b, 0x69,
	0x6e, 0x67, 0x2f, 0x62, 0x6b, 0x2d, 0x62, 0x73, 0x63, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x3b, 0x70, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_process_proto_rawDescOnce sync.Once
	file_process_proto_rawDescData = file_process_proto_rawDesc
)

func file_process_proto_rawDescGZIP() []byte {
	file_process_proto_rawDescOnce.Do(func() {
		file_process_proto_rawDescData = protoimpl.X.CompressGZIP(file_process_proto_rawDescData)
	})
	return file_process_proto_rawDescData
}

var file_process_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_process_proto_goTypes = []any{
	(*Process)(nil),                   // 0: pbproc.Process
	(*ProcessSpec)(nil),               // 1: pbproc.ProcessSpec
	(*ProcessAttachment)(nil),         // 2: pbproc.ProcessAttachment
	nil,                               // 3: pbproc.ProcessSpec.ActionsEntry
	(*base.Revision)(nil),             // 4: pbbase.Revision
	(*process_instance.ProcInst)(nil), // 5: pbpi.ProcInst
	(*timestamppb.Timestamp)(nil),     // 6: google.protobuf.Timestamp
}
var file_process_proto_depIdxs = []int32{
	1, // 0: pbproc.Process.spec:type_name -> pbproc.ProcessSpec
	2, // 1: pbproc.Process.attachment:type_name -> pbproc.ProcessAttachment
	4, // 2: pbproc.Process.revision:type_name -> pbbase.Revision
	5, // 3: pbproc.Process.proc_inst:type_name -> pbpi.ProcInst
	6, // 4: pbproc.ProcessSpec.cc_sync_updated_at:type_name -> google.protobuf.Timestamp
	3, // 5: pbproc.ProcessSpec.actions:type_name -> pbproc.ProcessSpec.ActionsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_process_proto_init() }
func file_process_proto_init() {
	if File_process_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_process_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_process_proto_goTypes,
		DependencyIndexes: file_process_proto_depIdxs,
		MessageInfos:      file_process_proto_msgTypes,
	}.Build()
	File_process_proto = out.File
	file_process_proto_rawDesc = nil
	file_process_proto_goTypes = nil
	file_process_proto_depIdxs = nil
}
