// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: data_source_mapping.proto

package pbdsm

import (
	base "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/base"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DataSourceMapping mapped from table <data_source_mappings>
type DataSourceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec       *DataSourceMappingSpec       `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Attachment *DataSourceMappingAttachment `protobuf:"bytes,3,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Revision   *base.Revision               `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
	Citations  uint32                       `protobuf:"varint,5,opt,name=citations,proto3" json:"citations,omitempty"`
}

func (x *DataSourceMapping) Reset() {
	*x = DataSourceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceMapping) ProtoMessage() {}

func (x *DataSourceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceMapping.ProtoReflect.Descriptor instead.
func (*DataSourceMapping) Descriptor() ([]byte, []int) {
	return file_data_source_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *DataSourceMapping) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataSourceMapping) GetSpec() *DataSourceMappingSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *DataSourceMapping) GetAttachment() *DataSourceMappingAttachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *DataSourceMapping) GetRevision() *base.Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *DataSourceMapping) GetCitations() uint32 {
	if x != nil {
		return x.Citations
	}
	return 0
}

// DataSourceMappingSpec mapped from table <data_source_mappings>
type DataSourceMappingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabasesName string     `protobuf:"bytes,1,opt,name=databases_name,json=databasesName,proto3" json:"databases_name,omitempty"`
	TableName     string     `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableMemo     string     `protobuf:"bytes,3,opt,name=table_memo,json=tableMemo,proto3" json:"table_memo,omitempty"`
	VisibleRange  []uint32   `protobuf:"varint,4,rep,packed,name=visible_range,json=visibleRange,proto3" json:"visible_range,omitempty"`
	Columns       []*Columns `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DataSourceMappingSpec) Reset() {
	*x = DataSourceMappingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceMappingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceMappingSpec) ProtoMessage() {}

func (x *DataSourceMappingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceMappingSpec.ProtoReflect.Descriptor instead.
func (*DataSourceMappingSpec) Descriptor() ([]byte, []int) {
	return file_data_source_mapping_proto_rawDescGZIP(), []int{1}
}

func (x *DataSourceMappingSpec) GetDatabasesName() string {
	if x != nil {
		return x.DatabasesName
	}
	return ""
}

func (x *DataSourceMappingSpec) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DataSourceMappingSpec) GetTableMemo() string {
	if x != nil {
		return x.TableMemo
	}
	return ""
}

func (x *DataSourceMappingSpec) GetVisibleRange() []uint32 {
	if x != nil {
		return x.VisibleRange
	}
	return nil
}

func (x *DataSourceMappingSpec) GetColumns() []*Columns {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Columns mapped from table <data_source_mappings>
type Columns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Alias         string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Length        int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Primary       bool   `protobuf:"varint,4,opt,name=primary,proto3" json:"primary,omitempty"`
	ColumnType    string `protobuf:"bytes,5,opt,name=column_type,json=columnType,proto3" json:"column_type,omitempty"`
	NotNull       bool   `protobuf:"varint,6,opt,name=not_null,json=notNull,proto3" json:"not_null,omitempty"`
	DefaultValue  string `protobuf:"bytes,7,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Unique        bool   `protobuf:"varint,8,opt,name=unique,proto3" json:"unique,omitempty"`
	ReadOnly      bool   `protobuf:"varint,9,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	AutoIncrement bool   `protobuf:"varint,10,opt,name=auto_increment,json=autoIncrement,proto3" json:"auto_increment,omitempty"`
	EnumValue     string `protobuf:"bytes,11,opt,name=enum_value,json=enumValue,proto3" json:"enum_value,omitempty"`
	Selected      bool   `protobuf:"varint,12,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (x *Columns) Reset() {
	*x = Columns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Columns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Columns) ProtoMessage() {}

func (x *Columns) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Columns.ProtoReflect.Descriptor instead.
func (*Columns) Descriptor() ([]byte, []int) {
	return file_data_source_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *Columns) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Columns) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Columns) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Columns) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *Columns) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *Columns) GetNotNull() bool {
	if x != nil {
		return x.NotNull
	}
	return false
}

func (x *Columns) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Columns) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *Columns) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Columns) GetAutoIncrement() bool {
	if x != nil {
		return x.AutoIncrement
	}
	return false
}

func (x *Columns) GetEnumValue() string {
	if x != nil {
		return x.EnumValue
	}
	return ""
}

func (x *Columns) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

// DataSourceMappingAttachment mapped from table <data_source_mappings>
type DataSourceMappingAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizId            uint32 `protobuf:"varint,1,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	DataSourceInfoId uint32 `protobuf:"varint,2,opt,name=data_source_info_id,json=dataSourceInfoId,proto3" json:"data_source_info_id,omitempty"`
}

func (x *DataSourceMappingAttachment) Reset() {
	*x = DataSourceMappingAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_source_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceMappingAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceMappingAttachment) ProtoMessage() {}

func (x *DataSourceMappingAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_data_source_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceMappingAttachment.ProtoReflect.Descriptor instead.
func (*DataSourceMappingAttachment) Descriptor() ([]byte, []int) {
	return file_data_source_mapping_proto_rawDescGZIP(), []int{3}
}

func (x *DataSourceMappingAttachment) GetBizId() uint32 {
	if x != nil {
		return x.BizId
	}
	return 0
}

func (x *DataSourceMappingAttachment) GetDataSourceInfoId() uint32 {
	if x != nil {
		return x.DataSourceInfoId
	}
	return 0
}

var File_data_source_mapping_proto protoreflect.FileDescriptor

var file_data_source_mapping_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x62, 0x64,
	0x73, 0x6d, 0x1a, 0x21, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xba, 0x90, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x64, 0x73, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x64, 0x73,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32,
	0x15, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe9, 0xa1, 0xb9,
	0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x09, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xb8, 0x04, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x62, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe6, 0xba, 0x90, 0xe5, 0xba, 0x93, 0xe5, 0x90, 0x8d, 0xef, 0xbc, 0x9a, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe8, 0xa1, 0xa8, 0xe6, 0xa0,
	0xbc, 0xe8, 0xaf, 0xa5, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe6, 0xba, 0x90, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xba, 0x90, 0xe8, 0xa1, 0xa8, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x6d, 0x0a, 0x0d,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0xef, 0xbc, 0x9a, 0xe7,
	0xa9, 0xba, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe5, 0x85,
	0xa8, 0xe9, 0x83, 0xa8, 0xef, 0xbc, 0x8c, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe6, 0x9c, 0x8d,
	0xe5, 0x8a, 0xa1, 0x5b, 0x31, 0x2c, 0x32, 0x2c, 0x33, 0x2e, 0x2e, 0x2e, 0x5d, 0x52, 0x0c, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x64, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0xb3, 0x01,
	0x92, 0x41, 0xaf, 0x01, 0x32, 0x0c, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0x4a, 0x9e, 0x01, 0x5b, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x69,
	0x64, 0x22, 0x2c, 0x22, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x3a, 0x22, 0xe5, 0x88, 0xab, 0xe5,
	0x90, 0x8d, 0x22, 0x2c, 0x22, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x32, 0x30, 0x2c,
	0x22, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x22, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80,
	0xbc, 0x22, 0x2c, 0x22, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c,
	0x22, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x7d, 0x5d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xcf, 0x06, 0x0a,
	0x07, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x9a, 0xe9, 0x95, 0xbf, 0xe5,
	0xba, 0xa6, 0xe4, 0xb8, 0x8d, 0xe8, 0x83, 0xbd, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x36, 0x34,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0xe5, 0x88, 0xab, 0xe5, 0x90, 0x8d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0x80, 0xbc, 0xe7,
	0x9a, 0x84, 0xe9, 0x95, 0xbf, 0xe5, 0xba, 0xa6, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x53, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8,
	0xba, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0xef, 0xbc, 0x9a, 0xe6, 0x98, 0xaf, 0x3d, 0x74, 0x72,
	0x75, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6, 0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xef, 0xbc,
	0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32,
	0x2e, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9a,
	0x28, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xe3, 0x80, 0x81, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0xe3, 0x80, 0x81, 0x65, 0x6e, 0x75, 0x6d, 0xe3, 0x80, 0x81, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x32, 0x2b, 0xe9, 0x9d, 0x9e, 0xe7, 0xa9, 0xba, 0xef, 0xbc, 0x9a, 0xe6, 0x98, 0xaf,
	0x3d, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6, 0x3d, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x07, 0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe5, 0x80, 0xbc, 0xef,
	0xbc, 0x9a, 0xe5, 0x8f, 0xaf, 0xe4, 0xb8, 0xba, 0xe7, 0xa9, 0xba, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x94, 0xaf, 0xe4, 0xb8, 0x80, 0xef, 0xbc, 0x9a, 0xe6,
	0x98, 0xaf, 0x3d, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6, 0x3d, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x32, 0x2b, 0xe5, 0x8f, 0xaa, 0xe8, 0xaf, 0xbb, 0xef, 0xbc, 0x9a, 0xe6, 0x98, 0xaf, 0x3d,
	0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6, 0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe8, 0x87, 0xaa, 0xe5, 0xa2, 0x9e, 0xef, 0xbc, 0x9a,
	0xe6, 0x98, 0xaf, 0x3d, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6, 0x3d, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x9e, 0x9a, 0xe4,
	0xb8, 0xbe, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0xe5, 0xa4, 0x9a, 0xe9, 0x80, 0x89, 0xef,
	0xbc, 0x9a, 0xe6, 0x98, 0xaf, 0x3d, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6,
	0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xef, 0xbc, 0x8c, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xa9,
	0x01, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x05, 0x62,
	0x69, 0x7a, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0xe5, 0xa4, 0x96, 0xe9, 0x83, 0xa8, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe6, 0xba, 0x90, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6,
	0x9e, 0x9c, 0xe6, 0x98, 0xaf, 0xe6, 0x89, 0x98, 0xe7, 0xae, 0xa1, 0xe8, 0xa1, 0xa8, 0xe6, 0xa0,
	0xbc, 0xe5, 0xb0, 0xb1, 0xe6, 0x98, 0xaf, 0x30, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x6b, 0x2d, 0x62, 0x73, 0x63, 0x70,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3b, 0x70, 0x62, 0x64, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_source_mapping_proto_rawDescOnce sync.Once
	file_data_source_mapping_proto_rawDescData = file_data_source_mapping_proto_rawDesc
)

func file_data_source_mapping_proto_rawDescGZIP() []byte {
	file_data_source_mapping_proto_rawDescOnce.Do(func() {
		file_data_source_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_source_mapping_proto_rawDescData)
	})
	return file_data_source_mapping_proto_rawDescData
}

var file_data_source_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_data_source_mapping_proto_goTypes = []interface{}{
	(*DataSourceMapping)(nil),           // 0: pbdsm.DataSourceMapping
	(*DataSourceMappingSpec)(nil),       // 1: pbdsm.DataSourceMappingSpec
	(*Columns)(nil),                     // 2: pbdsm.Columns
	(*DataSourceMappingAttachment)(nil), // 3: pbdsm.DataSourceMappingAttachment
	(*base.Revision)(nil),               // 4: pbbase.Revision
}
var file_data_source_mapping_proto_depIdxs = []int32{
	1, // 0: pbdsm.DataSourceMapping.spec:type_name -> pbdsm.DataSourceMappingSpec
	3, // 1: pbdsm.DataSourceMapping.attachment:type_name -> pbdsm.DataSourceMappingAttachment
	4, // 2: pbdsm.DataSourceMapping.revision:type_name -> pbbase.Revision
	2, // 3: pbdsm.DataSourceMappingSpec.columns:type_name -> pbdsm.Columns
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_data_source_mapping_proto_init() }
func file_data_source_mapping_proto_init() {
	if File_data_source_mapping_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_source_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceMappingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Columns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_source_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceMappingAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_source_mapping_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_data_source_mapping_proto_goTypes,
		DependencyIndexes: file_data_source_mapping_proto_depIdxs,
		MessageInfos:      file_data_source_mapping_proto_msgTypes,
	}.Build()
	File_data_source_mapping_proto = out.File
	file_data_source_mapping_proto_rawDesc = nil
	file_data_source_mapping_proto_goTypes = nil
	file_data_source_mapping_proto_depIdxs = nil
}
