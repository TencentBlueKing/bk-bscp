syntax = "proto3";

import "pkg/protocol/core/app/app.proto";
import "pkg/protocol/core/audit/audit.proto";
import "pkg/protocol/core/app-template-binding/app_template_binding.proto";
import "pkg/protocol/core/base/base.proto";
import "pkg/protocol/core/config-item/config_item.proto";
import "pkg/protocol/core/content/content.proto";
import "pkg/protocol/core/group/group.proto";
import "pkg/protocol/core/credential/credential.proto";
import "pkg/protocol/core/client/client.proto";
import "pkg/protocol/core/client-event/client_event.proto";
import "pkg/protocol/core/client-query/client_query.proto";
import "pkg/protocol/core/credential-scope/credential-scope.proto";
import "pkg/protocol/core/data-source-mapping/data_source_mapping.proto";
import "pkg/protocol/core/data-source-content/data_source_content.proto";
import "pkg/protocol/core/hook/hook.proto";
import "pkg/protocol/core/hook-revision/hook_revision.proto";
import "pkg/protocol/core/release/release.proto";
import "pkg/protocol/core/released-ci/released_ci.proto";
import "pkg/protocol/core/template/template.proto";
import "pkg/protocol/core/template-binding-relation/template_binding_relation.proto";
import "pkg/protocol/core/template-revision/template_revision.proto";
import "pkg/protocol/core/template-set/template_set.proto";
import "pkg/protocol/core/template-space/template_space.proto";
import "pkg/protocol/core/app-template-variable/app_template_variable.proto";
import "pkg/protocol/core/template-variable/template_variable.proto";
import "pkg/protocol/core/kv/kvs.proto";
import "pkg/protocol/core/released-kv/released_kv.proto";
import "pkg/protocol/core/strategy/strategy.proto";
import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package pbcs;

option go_package = "github.com/TencentBlueKing/bk-bscp/pkg/protocol/config-server;pbcs";

service Config {
  option (google.api.api_visibility).restriction = "BKAPIGW";
  //  创建服务
  rpc CreateApp(CreateAppReq) returns (CreateAppResp) {
    option (google.api.http) = {
      post: "/api/v1/config/create/app/app/biz_id/{biz_id}"
      body: "*"
    };
  }
  // 更新服务
  rpc UpdateApp(UpdateAppReq) returns (pbapp.App) {
    option (google.api.http) = {
      put: "/api/v1/config/update/app/app/app_id/{id}/biz_id/{biz_id}"
      body: "*"
    };
  }
  // 删除服务
  rpc DeleteApp(DeleteAppReq) returns (DeleteAppResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/delete/app/app/app_id/{id}/biz_id/{biz_id}"
    };
  }
  // 获取服务
  rpc GetApp(GetAppReq) returns (pbapp.App) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}"
    };
  }
  // 按服务名称获取
  rpc GetAppByName(GetAppByNameReq) returns (pbapp.App) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/query/name/{app_name}"
    };
  }
  // 获取用户有权限的 spaces 所有的 apps
  rpc ListAppsRest(ListAppsRestReq) returns (ListAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps"
    };
  }
  // 按 space 查询 app 信息
  rpc ListAppsBySpaceRest(ListAppsBySpaceRestReq) returns (ListAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/list/app/app/biz_id/{biz_id}"
    };
  }

  // 创建文件配置项
  rpc CreateConfigItem(CreateConfigItemReq) returns (CreateConfigItemResp) {
    option (google.api.http) = {
      post: "/api/v1/config/create/config_item/config_item/app_id/{app_id}/"
            "biz_id/{biz_id}"
      body: "*"
    };
  }
  // 批量创建或更新文件配置项
  rpc BatchUpsertConfigItems(BatchUpsertConfigItemsReq) returns (BatchUpsertConfigItemsResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_items"
      body: "*"
    };
  }
  // 更新文件配置项
  rpc UpdateConfigItem(UpdateConfigItemReq) returns (UpdateConfigItemResp) {
    option (google.api.http) = {
      put: "/api/v1/config/update/config_item/config_item/config_item_id/{id}/"
           "app_id/{app_id}/biz_id/{biz_id}"
      body: "*"
    };
  }
  // 删除文件配置项
  rpc DeleteConfigItem(DeleteConfigItemReq) returns (DeleteConfigItemResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/delete/config_item/config_item/config_item_id/"
              "{id}/app_id/{app_id}/biz_id/{biz_id}"
    };
  }
  // 批量删除文件配置项
  rpc BatchDeleteConfigItems(BatchDeleteAppResourcesReq) returns (BatchDeleteResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_items/"
            "batch_delete"
      body: "*"
    };
  }
  // 恢复文件配置项
  rpc UnDeleteConfigItem(UnDeleteConfigItemReq) returns (UnDeleteConfigItemResp) {
    option (google.api.http) = {
      post: "/api/v1/config/undelete/config_item/config_item/config_item_id/"
            "{id}/app_id/{app_id}/biz_id/{biz_id}"
    };
  }
  // 批量恢复文件配置项
  rpc BatchUnDeleteConfigItem(BatchUnDeleteConfigItemReq) returns (BatchUnDeleteConfigItemResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/config_items/batch_undelete"
      body: "*"
    };
  }
  // 撤销文件配置项
  rpc UndoConfigItem(UndoConfigItemReq) returns (UndoConfigItemResp) {
    option (google.api.http) = {
      post: "/api/v1/config/undo/config_item/config_item/config_item_id/{id}/"
            "app_id/{app_id}/biz_id/{biz_id}"
    };
  }
  // 获取文件配置项
  rpc GetConfigItem(GetConfigItemReq) returns (GetConfigItemResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_items/"
           "{config_item_id}"
    };
  }
  // 获取已发布文件配置项
  rpc GetReleasedConfigItem(GetReleasedConfigItemReq) returns (GetReleasedConfigItemResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "config_items/{config_item_id}"
    };
  }
  // 获取文件配置项列表
  rpc ListConfigItems(ListConfigItemsReq) returns (ListConfigItemsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_items"
      body: "*"
    };
  }
  // 获取已发布文件配置项列表
  rpc ListReleasedConfigItems(ListReleasedConfigItemsReq) returns (ListReleasedConfigItemsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "config_items"
    };
  }
  // 获取文件型服务配置数量列表
  rpc ListConfigItemCount(ListConfigItemCountReq) returns (ListConfigItemCountResp) {
    option (google.api.http) = {
      post: "/api/v1/config/config_item_count/biz_id/{biz_id}"
      body: "*"
    };
  }
  // 按绝对路径获取文件配置项列表
  rpc ListConfigItemByTuple(ListConfigItemByTupleReq) returns (ListConfigItemByTupleResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_items/tuple"
      body: "*"
    };
  }
  // 获取已生成版本键值配置项
  rpc GetReleasedKv(GetReleasedKvReq) returns (GetReleasedKvResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "kvs/{key}"
    };
  }
  // 获取已生成版本键值配置项列表
  rpc ListReleasedKvs(ListReleasedKvsReq) returns (ListReleasedKvsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "kvs"
    };
  }
  // 引用前后置脚本
  rpc UpdateConfigHook(UpdateConfigHookReq) returns (UpdateConfigHookResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_hooks"
      body: "*"
    };
  }
  // 生成配置服务版本
  rpc CreateRelease(CreateReleaseReq) returns (CreateReleaseResp) {
    option (google.api.http) = {
      post: "/api/v1/config/create/release/release/app_id/{app_id}/biz_id/"
            "{biz_id}"
      body: "*"
    };
  }
  // 获取服务版本列表
  rpc ListReleases(ListReleasesReq) returns (ListReleasesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases"
    };
  }
  // 按服务版本名
  rpc GetReleaseByName(GetReleaseByNameReq) returns (pbrelease.Release) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/query/name/"
           "{release_name}"
    };
  }
  // 获取服务版本
  rpc GetRelease(GetReleaseReq) returns (pbrelease.Release) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}"
    };
  }
  // 废弃服务版本
  rpc DeprecateRelease(DeprecateReleaseReq) returns (DeprecateReleaseResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "deprecate"
    };
  }
  // 撤回废弃服务版本
  rpc UnDeprecateRelease(UnDeprecateReleaseReq) returns (UnDeprecateReleaseResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "undeprecate"
      body: "*"
    };
  }
  // 删除服务版本
  rpc DeleteRelease(DeleteReleaseReq) returns (DeleteReleaseResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}"
    };
  }
  // 检测服务版本名
  rpc CheckReleaseName(CheckReleaseNameReq) returns (CheckReleaseNameResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/release/{name}/check"
    };
  }
  // 创建脚本
  rpc CreateHook(CreateHookReq) returns (CreateHookResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/hooks"
      body: "*"
    };
  }
  // 删除脚本
  rpc DeleteHook(DeleteHookReq) returns (DeleteHookResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}"
    };
  }
  // 批量删除脚本
  rpc BatchDeleteHook(BatchDeleteHookReq) returns (BatchDeleteResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/hooks/batch_delete"
      body: "*"
    };
  }
  // 更新脚本
  rpc UpdateHook(UpdateHookReq) returns (UpdateHookResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}"
      body: "*"
    };
  }
  // 获取脚本列表
  rpc ListHooks(ListHooksReq) returns (ListHooksResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hooks"
    };
  }
  // 获取脚本标签列表
  rpc ListHookTags(ListHookTagsReq) returns (ListHookTagsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hook_tags"
    };
  }
  // 获取脚本
  rpc GetHook(GetHookReq) returns (GetHookResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}"
    };
  }
  // 创建脚本版本
  rpc CreateHookRevision(CreateHookRevisionReq) returns (CreateHookRevisionResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions"
      body: "*"
    };
  }
  // 获取脚本版本列表
  rpc ListHookRevisions(ListHookRevisionsReq) returns (ListHookRevisionsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions"
    };
  }
  // 删除骄傲本版本
  rpc DeleteHookRevision(DeleteHookRevisionReq) returns (DeleteHookRevisionResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions/"
              "{revision_id}"
    };
  }
  // 上线脚本版本
  rpc PublishHookRevision(PublishHookRevisionReq) returns (PublishHookRevisionResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions/"
           "{revision_id}/publish"
    };
  }
  // 获取脚本版本
  rpc GetHookRevision(GetHookRevisionReq) returns (pbhr.HookRevision) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions/"
           "{revision_id}"
    };
  }
  // 更新脚本版本
  rpc UpdateHookRevision(UpdateHookRevisionReq) returns (UpdateHookRevisionResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions/"
           "{revision_id}"
      body: "*"
    };
  }
  // 获取被引用的脚本配置服务列表
  rpc ListHookReferences(ListHookReferencesReq) returns (ListHookReferencesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/references"
    };
  }
  // 获取被引用的脚本版本配置服务列表
  rpc ListHookRevisionReferences(ListHookRevisionReferencesReq) returns (ListHookRevisionReferencesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/hooks/{hook_id}/hook_revisions/"
           "{revision_id}/references"
    };
  }
  // TODO
  rpc GetReleaseHook(GetReleaseHookReq) returns (GetReleaseHookResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "hooks"
    };
  }
  // 创建模板空间
  rpc CreateTemplateSpace(CreateTemplateSpaceReq) returns (CreateTemplateSpaceResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces"
      body: "*"
    };
  }
  // 删除模板空间
  rpc DeleteTemplateSpace(DeleteTemplateSpaceReq) returns (DeleteTemplateSpaceResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}"
    };
  }
  // 更新模板空间
  rpc UpdateTemplateSpace(UpdateTemplateSpaceReq) returns (UpdateTemplateSpaceResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}"
      body: "*"
    };
  }
  // 获取模板空间列表
  rpc ListTemplateSpaces(ListTemplateSpacesReq) returns (ListTemplateSpacesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces"
    };
  }
  // GetAllBizsOfTmplSpaces called only by system itself
  rpc GetAllBizsOfTmplSpaces(pbbase.EmptyReq) returns (GetAllBizsOfTmplSpacesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/template_spaces/bizs"
    };
  }
  // 创建模板默认空间(仅由系统本身调用)
  rpc CreateDefaultTmplSpace(CreateDefaultTmplSpaceReq) returns (CreateDefaultTmplSpaceResp) {
    option (google.api.http) = {
      post: "/api/v1/config/template_spaces/default"
      body: "*"
    };
  }
  rpc ListTmplSpacesByIDs(ListTmplSpacesByIDsReq) returns (ListTmplSpacesByIDsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/list_by_ids"
      body: "*"
    };
  }
  // 创建模板
  rpc CreateTemplate(CreateTemplateReq) returns (CreateTemplateResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates"
      body: "*"
    };
  }
  // 删除模板
  rpc DeleteTemplate(DeleteTemplateReq) returns (DeleteTemplateResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/template_spaces/"
              "{template_space_id}/templates/{template_id}"
    };
  }
  // 批量删除模板
  rpc BatchDeleteTemplate(BatchDeleteTemplateReq) returns (BatchDeleteTemplateResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/template_spaces/"
              "{template_space_id}/templates"
    };
  }
  // 更新模板
  rpc UpdateTemplate(UpdateTemplateReq) returns (UpdateTemplateResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}"
      body: "*"
    };
  }
  // 获取模板列表(全部配置文件)
  rpc ListTemplates(ListTemplatesReq) returns (ListTemplatesResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/templates/list"
      body: "*"
    };
  }
  // 批量创建或更新模板
  rpc BatchUpsertTemplates(BatchUpsertTemplatesReq) returns (BatchUpsertTemplatesResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates/batch_upsert_templates"
      body: "*"
    };
  }
  // 批量更新模板权限
  rpc BatchUpdateTemplatePermissions(BatchUpdateTemplatePermissionsReq) returns (BatchUpdateTemplatePermissionsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/template_set/{template_set_id}/templates/batch_update_templates_permissions"
      body: "*"
    };
  }
  // 添加至模板套餐中
  rpc AddTmplsToTmplSets(AddTmplsToTmplSetsReq) returns (AddTmplsToTmplSetsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/template_set/{template_set_id}/"
            "templates/add_to_template_sets"
      body: "*"
    };
  }
  // 从模板套餐中移出
  rpc DeleteTmplsFromTmplSets(DeleteTmplsFromTmplSetsReq) returns (BatchDeleteResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates/delete_from_template_sets"
      body: "*"
    };
  }
  // 按模板ID获取模板列表
  rpc ListTemplatesByIDs(ListTemplatesByIDsReq) returns (ListTemplatesByIDsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/templates/list_by_ids"
      body: "*"
    };
  }
  // 获取未绑定的模板列表
  rpc ListTemplatesNotBound(ListTemplatesNotBoundReq) returns (ListTemplatesNotBoundResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/list_not_bound"
    };
  }
  // 按模板绝对路径获取模板列表
  rpc ListTemplateByTuple(ListTemplateByTupleReq) returns (ListTemplateByTupleResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates/tuple"
      body: "*"
    };
  }
  // 按模板套餐获取模板列表
  rpc ListTmplsOfTmplSet(ListTmplsOfTmplSetReq) returns (ListTmplsOfTmplSetResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "template_sets/{template_set_id}/templates"
      body: "*"
    };
  }
  // 获取模板套餐下的所有版本列表
  rpc ListTemplateSetsAndRevisions(ListTemplateSetsAndRevisionsReq) returns (ListTemplateSetsAndRevisionsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_sets/{template_set_id}/template_revisions"
    };
  }
  // 创建模板版本
  rpc CreateTemplateRevision(CreateTemplateRevisionReq) returns (CreateTemplateRevisionResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates/{template_id}/template_revisions"
      body: "*"
    };
  }
  // 更新模板版本
  rpc UpdateTemplateRevision(UpdateTemplateRevisionReq) returns (UpdateTemplateRevisionResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/template_revisions"
      body: "*"
    };
  }
  // 获取模板版本列表
  rpc ListTemplateRevisions(ListTemplateRevisionsReq) returns (ListTemplateRevisionsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/template_revisions"
    };
  }
  // 获取模板版本
  rpc GetTemplateRevision(GetTemplateRevisionReq) returns (GetTemplateRevisionResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/templates/{template_id}/template_revisions"
    };
  }
  /* 暂时不对外开发（删除模版后，服务引用的latest版本会回退到上一个老版本）
  rpc DeleteTemplateRevision(DeleteTemplateRevisionReq) returns
(DeleteTemplateRevisionResp) {

option (google.api.http) = {
          delete :
  "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/templates/{template_id}/template_revisions/{template_revision_id}"
      };
  }
  */
  // 按模板版本ID获取模板版本列表
  rpc ListTemplateRevisionsByIDs(ListTemplateRevisionsByIDsReq) returns (ListTemplateRevisionsByIDsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_revisions/list_by_ids"
      body: "*"
    };
  }
  // 按模板ID获取模板版本列表
  rpc ListTmplRevisionNamesByTmplIDs(ListTmplRevisionNamesByTmplIDsReq) returns (ListTmplRevisionNamesByTmplIDsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_revisions/"
            "list_names_by_template_ids"
      body: "*"
    };
  }
  // 创建模板套餐
  rpc CreateTemplateSet(CreateTemplateSetReq) returns (CreateTemplateSetResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "template_sets"
      body: "*"
    };
  }
  // 删除模板套餐
  rpc DeleteTemplateSet(DeleteTemplateSetReq) returns (DeleteTemplateSetResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/template_spaces/"
              "{template_space_id}/template_sets/{template_set_id}"
    };
  }
  // 更新模板套餐
  rpc UpdateTemplateSet(UpdateTemplateSetReq) returns (UpdateTemplateSetResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "template_sets/{template_set_id}"
      body: "*"
    };
  }
  // 获取模板套餐列表
  rpc ListTemplateSets(ListTemplateSetsReq) returns (ListTemplateSetsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "template_sets"
    };
  }
  // 获取模板空间下最新的模板版本列表
  rpc GetLatestTemplateVersionsInSpace(GetLatestTemplateVersionsInSpaceReq)
      returns (GetLatestTemplateVersionsInSpaceResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/templates/{template_id}/latest_template_versions"
    };
  }
  // 获取模板套餐列表
  rpc ListAppTemplateSets(ListAppTemplateSetsReq) returns (ListAppTemplateSetsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_sets"
    };
  }
  // 按模板套餐ID获取模板套餐列表
  rpc ListTemplateSetsByIDs(ListTemplateSetsByIDsReq) returns (ListTemplateSetsByIDsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_sets/list_by_ids"
      body: "*"
    };
  }
  // 按服务ID获取模板套餐列表
  rpc ListTmplSetsOfBiz(ListTmplSetsOfBizReq) returns (ListTmplSetsOfBizResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_sets/list_all_of_biz"
    };
  }
  // 创建绑定服务的模板(暂无用到)
  rpc CreateAppTemplateBinding(CreateAppTemplateBindingReq) returns (CreateAppTemplateBindingResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings"
      body: "*"
    };
  }
  // 删除绑定服务的模板
  rpc DeleteAppTemplateBinding(DeleteAppTemplateBindingReq) returns (DeleteAppTemplateBindingResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings/"
              "{binding_id}"
    };
  }
  // 更新绑定服务的模板
  rpc UpdateAppTemplateBinding(UpdateAppTemplateBindingReq) returns (UpdateAppTemplateBindingResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings/"
           "{binding_id}"
      body: "*"
    };
  }
  // 按服务获取绑定的模板列表
  rpc ListAppTemplateBindings(ListAppTemplateBindingsReq) returns (ListAppTemplateBindingsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings"
    };
  }
  // 按未命名版本服务获取绑定的模板版本列表
  rpc ListAppBoundTmplRevisions(ListAppBoundTmplRevisionsReq) returns (ListAppBoundTmplRevisionsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_revisions"
    };
  }
  // 按已发布版本服务获取绑定的模板版本列表
  rpc ListReleasedAppBoundTmplRevisions(ListReleasedAppBoundTmplRevisionsReq)
      returns (ListReleasedAppBoundTmplRevisionsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "template_revisions"
    };
  }
  // 查看已发布版本服务的模板版本详情
  rpc GetReleasedAppBoundTmplRevision(GetReleasedAppBoundTmplRevisionReq)
      returns (GetReleasedAppBoundTmplRevisionResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "template_revisions/{template_revision_id}"
    };
  }
  // 替换服务引用后的模板版本
  rpc UpdateAppBoundTmplRevisions(UpdateAppBoundTmplRevisionsReq) returns (UpdateAppBoundTmplRevisionsResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings/"
           "{binding_id}/template_revisions"
      body: "*"
    };
  }
  // 移除服务引用的模板套餐(暂未用到)
  rpc DeleteAppBoundTmplSets(DeleteAppBoundTmplSetsReq) returns (DeleteAppBoundTmplSetsResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings/"
              "{binding_id}/template_sets"
    };
  }
  // 移除服务引用的模板套餐
  rpc RemoveAppBoundTmplSet(RemoveAppBoundTmplSetReq) returns (RemoveAppBoundTmplSetResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_set/{template_set_id}"
    };
  }
  // 检测服务绑定的模板套餐
  rpc CheckAppTemplateBinding(CheckAppTemplateBindingReq) returns (CheckAppTemplateBindingResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings/"
            "conflict_check"
      body: "*"
    };
  }
  // 配置服务引用模版套餐
  rpc ImportFromTemplateSetToApp(ImportFromTemplateSetToAppReq) returns (ImportFromTemplateSetToAppResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_bindings/import_template_set"
      body: "*"
    };
  }
  // 获取模板绑定服务数列表
  rpc ListTmplBoundCounts(ListTmplBoundCountsReq) returns (ListTmplBoundCountsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates/bound_counts"
      body: "*"
    };
  }
  // 获取模板版本绑定服务数列表
  rpc ListTmplRevisionBoundCounts(ListTmplRevisionBoundCountsReq) returns (ListTmplRevisionBoundCountsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "templates/{template_id}/template_revisions/bound_counts"
      body: "*"
    };
  }
  // 获取模板套餐绑定服务数列表
  rpc ListTmplSetBoundCounts(ListTmplSetBoundCountsReq) returns (ListTmplSetBoundCountsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "template_sets/bound_counts"
      body: "*"
    };
  }
  // 获取模板绑定的服务列表
  rpc ListTmplBoundUnnamedApps(ListTmplBoundUnnamedAppsReq) returns (ListTmplBoundUnnamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/bound_unnamed_app_details"
    };
  }
  // 获取模板绑定的服务以及模板版本列表
  rpc ListTmplBoundNamedApps(ListTmplBoundNamedAppsReq) returns (ListTmplBoundNamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/bound_named_app_details"
    };
  }
  // 获取服务绑定的模板套餐列表
  rpc ListTmplBoundTmplSets(ListTmplBoundTmplSetsReq) returns (ListTmplBoundTmplSetsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/bound_template_set_details"
    };
  }
  // 获取服务绑定的模板套餐以及模板列表
  rpc ListMultiTmplBoundTmplSets(ListMultiTmplBoundTmplSetsReq) returns (ListMultiTmplBoundTmplSetsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/bound_template_set_details"
    };
  }
  // 按模板版本获取绑定的未命名版本服务列表
  rpc ListTmplRevisionBoundUnnamedApps(ListTmplRevisionBoundUnnamedAppsReq)
      returns (ListTmplRevisionBoundUnnamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/template_revisions/{template_revision_id}/"
           "bound_unnamed_app_details"
    };
  }
  // 按模板版本获取绑定的已命名版本服务列表
  rpc ListTmplRevisionBoundNamedApps(ListTmplRevisionBoundNamedAppsReq) returns (ListTmplRevisionBoundNamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/template_revisions/{template_revision_id}/"
           "bound_named_app_details"
    };
  }
  // 按模板套餐获取绑定的未命名版本服务列表
  rpc ListTmplSetBoundUnnamedApps(ListTmplSetBoundUnnamedAppsReq) returns (ListTmplSetBoundUnnamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "template_sets/{template_set_id}/bound_unnamed_app_details"
    };
  }
  // 按多模板套餐获取绑定的未命名版本服务列表
  rpc ListMultiTmplSetBoundUnnamedApps(ListMultiTmplSetBoundUnnamedAppsReq)
      returns (ListMultiTmplSetBoundUnnamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "template_sets/bound_unnamed_app_details"
    };
  }
  // 检测模板套餐引用的服务
  rpc CheckTemplateSetReferencesApps(CheckTemplateSetReferencesAppsReq) returns (CheckTemplateSetReferencesAppsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
            "template_sets/check_template_set_references_apps"
      body: "*"
    };
  }
  // 按模板套餐获取绑定的已命名版本服务列表
  rpc ListTmplSetBoundNamedApps(ListTmplSetBoundNamedAppsReq) returns (ListTmplSetBoundNamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "template_sets/{template_set_id}/bound_named_app_details"
    };
  }
  // 按最新的模板版本获取未命名版本服务列表
  rpc ListLatestTmplBoundUnnamedApps(ListLatestTmplBoundUnnamedAppsReq) returns (ListLatestTmplBoundUnnamedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/template_spaces/{template_space_id}/"
           "templates/{template_id}/latest/bound_unnamed_app_details"
    };
  }
  // 创建模板变量
  rpc CreateTemplateVariable(CreateTemplateVariableReq) returns (CreateTemplateVariableResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_variables"
      body: "*"
    };
  }
  // 删除模板变量
  rpc DeleteTemplateVariable(DeleteTemplateVariableReq) returns (DeleteTemplateVariableResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/template_variables/"
              "{template_variable_id}"
    };
  }
  // 批量删除模板变量
  rpc BatchDeleteTemplateVariable(BatchDeleteBizResourcesReq) returns (BatchDeleteResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_variables/batch_delete"
      body: "*"
    };
  }
  // 更新模板变量
  rpc UpdateTemplateVariable(UpdateTemplateVariableReq) returns (UpdateTemplateVariableResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/template_variables/"
           "{template_variable_id}"
      body: "*"
    };
  }
  // 获取模板变量列表
  rpc ListTemplateVariables(ListTemplateVariablesReq) returns (ListTemplateVariablesResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_variables/list"
      body: "*"
    };
  }
  // 批量导入简单文件模板变量
  rpc ImportTemplateVariables(ImportTemplateVariablesReq) returns (ImportTemplateVariablesResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_variables/import"
      body: "*"
    };
  }
  rpc ImportOtherFormatTemplateVariables(ImportOtherFormatTemplateVariablesReq)
      returns (ImportOtherFormatTemplateVariablesResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/template_variables/{format}/import"
      body: "*"
    };
  }
  // 提取模板变量
  rpc ExtractAppTmplVariables(ExtractAppTmplVariablesReq) returns (ExtractAppTmplVariablesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/"
           "extract_template_variables"
    };
  }
  // 获取未命名服务版本被引用的变量
  rpc GetAppTmplVariableRefs(GetAppTmplVariableRefsReq) returns (GetAppTmplVariableRefsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/"
           "template_variables_references"
    };
  }
  // 获取服务版本下被引用的变量
  rpc GetReleasedAppTmplVariableRefs(GetReleasedAppTmplVariableRefsReq) returns (GetReleasedAppTmplVariableRefsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "template_variables_references"
    };
  }
  // 更新未命名服务版本变量
  rpc UpdateAppTmplVariables(UpdateAppTmplVariablesReq) returns (UpdateAppTmplVariablesResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_variables"
      body: "*"
    };
  }
  // 获取未命名服务版本模板变量
  rpc ListAppTmplVariables(ListAppTmplVariablesReq) returns (ListAppTmplVariablesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/template_variables"
    };
  }
  // 获取服务版本的模板变量列表
  rpc ListReleasedAppTmplVariables(ListReleasedAppTmplVariablesReq) returns (ListReleasedAppTmplVariablesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/releases/{release_id}/"
           "template_variables"
    };
  }
  // 创建分组
  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/groups"
      body: "*"
    };
  }
  // 删除分组
  rpc DeleteGroup(DeleteGroupReq) returns (DeleteGroupResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/groups/{group_id}"
    };
  }
  // 批量删除分组
  rpc BatchDeleteGroups(BatchDeleteBizResourcesReq) returns (BatchDeleteResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/groups/batch_delete"
      body: "*"
    };
  }
  // 更新分组
  rpc UpdateGroup(UpdateGroupReq) returns (UpdateGroupResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/groups/{group_id}"
      body: "*"
    };
  }
  // 获取所有分组列表
  rpc ListAllGroups(ListAllGroupsReq) returns (ListAllGroupsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/groups"
    };
  }
  // 按服务获取分组
  rpc ListAppGroups(ListAppGroupsReq) returns (ListAppGroupsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/groups"
    };
  }
  // 按分组获取服务
  rpc ListGroupReleasedApps(ListGroupReleasedAppsReq) returns (ListGroupReleasedAppsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/groups/{group_id}/released_apps"
    };
  }
  // 按名称获取分组
  rpc GetGroupByName(GetGroupByNameReq) returns (pbgroup.Group) {
    option (google.api.method_visibility).restriction = "BKAPIGW";
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/groups/query/name/{group_name}"
    };
  }
  // 发布服务版本
  rpc Publish(PublishReq) returns (PublishResp) {
    option (google.api.method_visibility).restriction = "BKAPIGW";
    option (google.api.http) = {
      post: "/api/v1/config/update/strategy/publish/publish/release_id/"
            "{release_id}/app_id/{app_id}/biz_id/{biz_id}"
      body: "*"
    };
  }
  // 生成新的服务版本并发布
  rpc GenerateReleaseAndPublish(GenerateReleaseAndPublishReq) returns (PublishResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/publish"
      body: "*"
    };
  }
  // 上线服务版本
  rpc SubmitPublishApprove(SubmitPublishApproveReq) returns (PublishResp) {
    option (google.api.method_visibility).restriction = "BKAPIGW";
    option (google.api.http) = {
      post: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/release_id/{release_id}/submit"
      body: "*"
    };
  }

  rpc Approve(ApproveReq) returns (ApproveResp) {
    option (google.api.method_visibility).restriction = "BKAPIGW";
    option (google.api.http) = {
      post: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/release_id/{release_id}/approve"
      body: "*"
    };
  }

  rpc GetLastSelect(GetLastSelectReq) returns (GetLastSelectResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/last/select"
    };
  }

  rpc GetLastPublish(GetLastPublishReq) returns (GetLastPublishResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/last/publish"
    };
  }

  rpc GetReleasesStatus(GetReleasesStatusReq) returns (pbstrategy.Strategy) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/app_id/{app_id}/release_id/{release_id}/status"
    };
  }

  rpc ListAudits(ListAuditsReq) returns (ListAuditsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/audits"
    };
  }

  // 创建客户端密钥
  rpc CreateCredentials(CreateCredentialReq) returns (CreateCredentialResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz_id/{biz_id}/credentials"
      body: "*"
    };
  }
  // 获取客户端密钥
  rpc ListCredentials(ListCredentialsReq) returns (ListCredentialsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/credentials"
    };
  }
  // 删除客户端密钥
  rpc DeleteCredential(DeleteCredentialsReq) returns (DeleteCredentialsResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz_id/{biz_id}/credential"
    };
  }
  // 更新客户端密钥
  rpc UpdateCredential(UpdateCredentialsReq) returns (UpdateCredentialsResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz_id/{biz_id}/credential"
      body: "*"
    };
  }
  // 检测客户端密钥名称
  rpc CheckCredentialName(CheckCredentialNameReq) returns (CheckCredentialNameResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/credential/{credential_name}/check"
    };
  }
  // 获取客户端密钥关联服务的列表
  rpc ListCredentialScopes(ListCredentialScopesReq) returns (ListCredentialScopesResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/credential/{credential_id}/scopes"
    };
  }
  // 更新客户端密钥关联服务规则
  rpc UpdateCredentialScope(UpdateCredentialScopeReq) returns (UpdateCredentialScopeResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz_id/{biz_id}/credential/{credential_id}/scope"
      body: "*"
    };
  }
  // 预览客户端密钥关联配置项
  rpc CredentialScopePreview(CredentialScopePreviewReq) returns (CredentialScopePreviewResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/credential/scope/preview"
    };
  }

  // 创建键值配置项
  rpc CreateKv(CreateKvReq) returns (CreateKvResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs"
      body: "*"
    };
  };
  // 更新键值配置项
  rpc UpdateKv(UpdateKvReq) returns (UpdateKvResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/{key}"
      body: "*"
    };
  };
  // 获取键值配置项列表
  rpc ListKvs(ListKvsReq) returns (ListKvsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/list"
      body: "*"
    };
  };
  // 删除键值配置项
  rpc DeleteKv(DeleteKvReq) returns (DeleteKvResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/{id}"
    };
  };
  // 批量删除键值配置项
  rpc BatchDeleteKv(BatchDeleteAppResourcesReq) returns (BatchDeleteResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/batch_delete"
      body: "*"
    };
  };
  // 批量创建或更新键值配置项
  rpc BatchUpsertKvs(BatchUpsertKvsReq) returns (BatchUpsertKvsResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs"
      body: "*"
    };
  };
  // 恢复键值配置项
  rpc UnDeleteKv(UnDeleteKvReq) returns (UnDeleteKvResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/{key}/undelete"
    };
  };
  // 批量恢复键值配置项
  rpc BatchUnDeleteKv(BatchUnDeleteKvReq) returns (BatchUnDeleteKvResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/batch_undelete"
      body: "*"
    };
  };
  // 撤销修改的键值配置项
  rpc UndoKv(UndoKvReq) returns (UndoKvResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/{key}/undo"
    };
  };
  // 批量导出文本格式键值配置项
  rpc ImportKvs(ImportKvsReq) returns (ImportKvsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/{format}/import"
      body: "*"
    };
  };
  // 查找临近到期证书
  rpc FindNearExpiryCertKvs(FindNearExpiryCertKvsReq) returns (FindNearExpiryCertKvsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/near_certificate"
    };
  };
  // 获取客户端列表
  rpc ListClients(ListClientsReq) returns (ListClientsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients"
      body: "*"
    };
  };
  // 获取客户端拉取记录列表
  rpc ListClientEvents(ListClientEventsReq) returns (ListClientEventsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/client_events/"
            "{client_id}"
      body: "*"
    };
  };
  // 重试客户端拉取
  rpc RetryClients(RetryClientsReq) returns (RetryClientsResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/retry"
      body: "*"
    };
  };
  // 获取客户端查询条件列表
  rpc ListClientQuerys(ListClientQuerysReq) returns (ListClientQuerysResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/client_querys"
    };
  };
  // 创建客户端查询条件
  rpc CreateClientQuery(CreateClientQueryReq) returns (CreateClientQueryResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/client_querys"
      body: "*"
    };
  };
  // 更新客户端查询条件
  rpc UpdateClientQuery(UpdateClientQueryReq) returns (UpdateClientQueryResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/apps/{app_id}/client_querys/{id}"
      body: "*"
    };
  };
  // 删除客户端查询条件
  rpc DeleteClientQuery(DeleteClientQueryReq) returns (DeleteClientQueryResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/apps/{app_id}/client_querys/{id}"
    };
  };
  // 检测客户端查询条件名
  rpc CheckClientQueryName(CheckClientQueryNameReq) returns (CheckClientQueryNameResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/client_querys/"
           "check_exists"
    };
  };
  // 客户端配置版本统计
  rpc ClientConfigVersionStatistics(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "config_version_statistics"
      body: "*"
    };
  };
  // 客户端拉取趋势统计
  rpc ClientPullTrendStatistics(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "pull_trend_statistics"
      body: "*"
    };
  };
  // 客户端拉取状态统计
  rpc ClientPullStatistics(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/pull_statistics"
      body: "*"
    };
  };
  // 客户端标签统计
  rpc ClientLabelStatistics(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "label_statistics"
      body: "*"
    };
  };
  // 客户端附加信息统计
  rpc ClientAnnotationStatistics(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "annotation_statistics"
      body: "*"
    };
  };
  // 客户端组件版本统计
  rpc ClientVersionStatistics(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "version_statistics"
      body: "*"
    };
  };
  // 获取客户端标签和附加信息列表
  rpc ListClientLabelAndAnnotation(ListClientLabelAndAnnotationReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "labels_and_annotations"
      body: "*"
    };
  };
  // 获取客户端失败原因
  rpc ClientSpecificFailedReason(pbclient.ClientCommonReq) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/apps/{app_id}/clients/"
            "specific_failed_reason"
      body: "*"
    };
  }
  // 文件服务以及和其他服务版本之间对比
  rpc CompareConfigItemConflicts(CompareConfigItemConflictsReq) returns (CompareConfigItemConflictsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/config_items/"
           "compare_conflicts"
    };
  }
  // 键值服务以及和其他服务版本之间对比
  rpc CompareKvConflicts(CompareKvConflictsReq) returns (CompareKvConflictsResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/apps/{app_id}/kvs/compare_conflicts"
    };
  }
  // 获取模板和非模板配置项数量
  rpc GetTemplateAndNonTemplateCICount(GetTemplateAndNonTemplateCICountReq)
      returns (GetTemplateAndNonTemplateCICountResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz_id/{biz_id}/apps/{app_id}/config_items/count"
    };
  }

  // 键值服务表格型数据
  // 获取键值型服务表格数据
  rpc ListDataSourceTable(ListDataSourceTableReq) returns (ListDataSourceTableResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/table"
    };
  }
  // 新建托管表格数据源
  rpc CreateDataSourceTable(CreateDataSourceTableReq) returns (CreateDataSourceTableResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/table"
      body: "*"
    };
  }
  // 获取数据源表结构
  rpc GetDataSourceTable(GetDataSourceTableReq) returns (GetDataSourceTableResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}"
    };
  }
  // 编辑托管表格数据源
  rpc UpdateDataSourceTable(UpdateDataSourceTableReq) returns (UpdateDataSourceTableResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}"
      body: "*"
    };
  }
  // 删除托管表格数据源
  rpc DeleteDataSourceTable(DeleteDataSourceTableReq) returns (DeleteDataSourceTableResp) {
    option (google.api.http) = {
      delete: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}"
    };
  }
  // 创建表数据
  rpc CreateTableContent(CreateTableContentReq) returns (CreateTableContentResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}/content"
      body: "*"
    };
  }
  // 新增或编辑表数据
  rpc UpsertTableContent(UpsertTableContentReq) returns (UpsertTableContentResp) {
    option (google.api.http) = {
      put: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}/content"
      body: "*"
    };
  }
  // 获取表数据列表
  rpc ListTableContent(ListTableContentReq) returns (ListTableContentResp) {
    option (google.api.http) = {
      post: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}/content/list"
      body: "*"
    };
  }
  // 检测某个字段是否有值
  rpc CheckTableField(CheckTableFieldReq) returns (CheckTableFieldResp) {
    option (google.api.http) = {
      get: "/api/v1/config/biz/{biz_id}/table/{data_source_mapping_id}/field/{field_name}"
    };
  }
}

message UpdateCredentialScopeReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 credential_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥ID" }];
  repeated pbcrs.CredentialScopeSpec add_scope = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "新增规则" }];
  repeated pbcrs.UpdateScopeSpec alter_scope = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "更新规则" }];
  repeated uint32 del_id = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "删除规则" }];
}

message UpdateCredentialScopeResp {}

message CredentialScopePreviewReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string app_name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
  string scope = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "关联规则" }];
  string search_value = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
}

message CredentialScopePreviewResp {
  message Detail {
    string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件名" }];
    string path = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件路径" }];
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated Detail details = 2;
}

message ListCredentialScopesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 credential_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端密钥ID" }];
}

message ListCredentialScopesResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbcrs.CredentialScopeList details = 2;
}

message EnableCredentialsReq {
  uint32 id = 1;
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  bool enable = 3;
}

message EnableCredentialsResp {}

message DeleteCredentialsReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端密钥ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
}

message DeleteCredentialsResp {}
message UpdateCredentialsReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端密钥ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  bool enable = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否启用：是=true,否=false" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥描述" }];
  string name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥名称" }];
}

message UpdateCredentialsResp {}

message CheckCredentialNameReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string credential_name = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥名称" }];
}

message CheckCredentialNameResp {
  bool exist = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否存在：是=true,否=false" }];
}

message ListCredentialsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string searchKey = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  string top_ids = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需要置顶ID" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  optional bool enable = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否启用：是=true,否=false" }];
}

message ListCredentialsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbcredential.CredentialList details = 2;
}

message CreateCredentialReq {
  string memo = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "密钥描述",
    required: [ "name" ]
  }];
  string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "密钥名称" }];
  uint32 biz_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated string scope = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "暂未用到" }];
}

message CreateCredentialResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端密钥ID" }];
}

message CreateAppReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "alias", "config_type", "data_type", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
  string config_type = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务类型：文件型=file, 键值型=kv" }
  ];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务描述" }];
  string alias = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务别名" }];
  string data_type = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "键值型服务数据类型：(any、string、number、text、json、yaml、xml、secret)"
  }];
  bool is_approve = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否需要审批：是=true，否=false" }
  ];
  string approve_type = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "审批类型：会签=count_sign、或签=or_sign"
  }];
  string approver = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "审批人列表" }];
}

message CreateAppResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message UpdateAppReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "alias", "config_type", "data_type", "name" ]
    }
  };
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务别名" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务描述" }];
  string alias = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务别名" }];
  string data_type = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "键值型服务数据类型：(any、string、number、text、json、yaml、xml、secret)"
  }];
  ;
  bool is_approve = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否需要审批：是=true，否=false" }
  ];
  string approve_type = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "审批类型：会签=count_sign、或签=or_sign"
  }];
  string approver = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "审批人列表" }];
}

message DeleteAppReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
}

message DeleteAppResp {}

message GetAppReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message GetAppByNameReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string app_name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
}

message ListAppsRestReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 start = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  string operator = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "操作人" }];
  string name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
}

message ListAppsBySpaceRestReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 start = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  string operator = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "操作人" }];
  string name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  string top_ids = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需要置顶ID" }];
}

message ListAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbapp.App details = 2;
}

message CreateConfigItemReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "请求参数"
      description: "参数 sign和byte_size 需通过上传文件的接口返回，curl -X PUT /api/v1/biz/{biz_id}/content/upload -H 'Content-Type: text/plain' -d '文件内容'"
      required: [ "file_mode", "file_type", "path", "name", "user", "user_group", "privilege", "sign", "byte_size" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件名" }];
  string path = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件路径" }];
  string file_type = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "配置文件格式：文本文件=file, 二进制文件=binary"
  }];
  string file_mode = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
  string memo = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件描述" }];
  string user = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户权限名" }];
  string user_group = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组权限名" }];
  string privilege = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限" }];
  string sign = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
  uint64 byte_size = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
  string charset = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
}

message BatchUpsertConfigItemsReq {
  message ConfigItem {
    string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件名" }];
    string path = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件路径" }];
    string file_type = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "配置文件格式：文本文件=file, 二进制文件=binary"
    }];
    string file_mode = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
    string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件描述" }];
    string user = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户权限名" }];
    string user_group = 7
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组权限名" }];
    string privilege = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限" }];
    string sign = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
    uint64 byte_size = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
    string md5 = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件md5" }];
    string charset = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated ConfigItem items = 3;
  bool replace_all = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否替换全部：如果为true会覆盖已有的文件，不存在的则删除",
    default: "false"
  }];
  repeated pbtv.TemplateVariableSpec variables = 5;
  message TemplateBinding {
    uint32 template_space_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板空间ID",
    }];
    pbatb.TemplateBinding template_binding = 2;
  }
  repeated TemplateBinding bindings = 6;
}

message BatchUpsertConfigItemsResp {
  repeated uint32 ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件配置项ID",
  }];
}

message CreateConfigItemResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件配置项ID",
  }];
}

message UpdateConfigItemReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "请求参数"
      description: "参数 sign和byte_size 需通过上传文件的接口返回，curl -X PUT /api/v1/biz/{biz_id}/content/upload -H 'Content-Type: text/plain' -d '文件内容'"
      required: [ "file_mode", "file_type", "path", "name", "user", "user_group", "privilege", "sign", "byte_size" ]
    }
  };
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件名" }];
  string path = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件路径" }];
  string file_type = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "配置文件格式：文本文件=file, 二进制文件=binary"
  }];
  string file_mode = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
  string memo = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件描述" }];
  string user = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户权限名" }];
  string user_group = 10
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组权限名" }];
  string privilege = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限" }];
  string sign = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
  uint64 byte_size = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
  string charset = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
}

message UpdateConfigItemResp {}

message DeleteConfigItemReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message DeleteConfigItemResp {}

message UnDeleteConfigItemReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message UnDeleteConfigItemResp {}

message BatchUnDeleteConfigItemReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated uint32 ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
}

message BatchUnDeleteConfigItemResp {
  repeated uint32 successful_ids = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "操作成功的ID" }];
  repeated uint32 failed_ids = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "操作失败的ID" }];
}

message UndoConfigItemReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message UndoConfigItemResp {}

message GetConfigItemReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 config_item_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
}

message GetConfigItemResp {
  pbci.ConfigItem config_item = 1;
  pbcontent.ContentSpec content = 2;
}

message GetReleasedConfigItemReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  uint32 config_item_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
}

message GetReleasedConfigItemResp {
  pbrci.ReleasedConfigItem config_item = 1;
}

message ListConfigItemsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string search_fields = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "支持搜索的字段",
    default: "name,path,memo,creator,revise"
  }];
  string search_value = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  repeated uint32 ids = 7;
  bool all = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  bool with_status = 9;
  // ADD、REVISE、DELETE、UNCHANGE
  repeated string status = 10;
}

message ListConfigItemsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbci.ConfigItem details = 2;
  uint32 conflict_number = 3;
}

message ListReleasedConfigItemsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  string search_fields = 4;
  string search_value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListReleasedConfigItemsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbrci.ReleasedConfigItem details = 2;
}

message ListConfigItemCountReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ListConfigItemCountResp {
  repeated pbci.ListConfigItemCounts details = 1;
}

message ListConfigItemByTupleReq {
  message Item {
    string name = 1;
    string path = 2;
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated Item items = 3;
}

message ListConfigItemByTupleResp {
  repeated pbci.ConfigItem details = 1;
}

message GetReleasedKvReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  string key = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "键值配置项的键" }];
}

message GetReleasedKvResp {
  pbrkv.ReleasedKv kv = 1;
}

message ListReleasedKvsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  ;
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  string search_key = 7;
  repeated string key = 8;
  repeated string kv_type = 9;
  string sort = 10;
  string order = 11;
}

message ListReleasedKvsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbrkv.ReleasedKv details = 2;
}

message UpdateConfigHookReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 pre_hook_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "前置脚本：脚本ID" }];
  uint32 post_hook_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "后置脚本：脚本ID" }];
}

message UpdateConfigHookResp {}

message CreateReleaseReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本名称" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本描述" }];
  repeated pbtv.TemplateVariableSpec variables = 5;
}

message CreateReleaseResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "生成配置服务版本ID" }];
}

message CheckReleaseNameReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
}

message CheckReleaseNameResp {
  bool exist = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否存在：是=true，否=false" }];
}

message ListReleasesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string searchKey = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  bool deprecated = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否弃用：是=true，否=false" }];
}

message ListReleasesResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbrelease.Release details = 2;
}

message GetReleaseByNameReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string release_name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
}

message GetReleaseReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message DeprecateReleaseReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message DeprecateReleaseResp {}

message UnDeprecateReleaseReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message UnDeprecateReleaseResp {}

message DeleteReleaseReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message DeleteReleaseResp {}

message CreateHookReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "revision_name", "content", "type", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本名称" }];
  string type = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本类型" }];
  repeated string tags = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分类标签" }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本描述" }];
  string content = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本内容" }];
  string revision_name = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本号" }];
}

message CreateHookResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
}

message DeleteHookReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  bool force = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否强制删除",
    default: "false",
  }];
}

message DeleteHookResp {}

message BatchDeleteHookReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 ids = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  bool force = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否强制删除",
    default: "false",
  }];
  bool exclusion_operation = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
}

message UpdateHookReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  repeated string tags = 3;
  string memo = 4;
}

message UpdateHookResp {}

message ListHooksReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 2;
  string tag = 3;
  bool all = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  bool not_tag = 5;
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  string searchKey = 8;
  string top_ids = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需要置顶ID" }];
}

message ListHooksResp {
  message Detail {
    pbhook.Hook hook = 1;
    uint32 bound_num = 2;
    bool confirm_delete = 3;
    uint32 published_revision_id = 4;
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated Detail details = 2;
  uint32 exclusion_count = 3;  // 排除禁用的数量
}

message ListHookTagsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
}

message ListHookTagsResp {
  repeated pbhook.CountHookTags details = 1;
}

message CreateHookRevisionReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "content", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  string memo = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本描述" }];
  string content = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本内容" }];
  string name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本号" }];
}

message CreateHookRevisionResp {
  uint32 id = 1;
}

message ListHookRevisionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  string search_key = 3;
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  string state = 7;
}

message ListHookRevisionsResp {
  message ListHookRevisionsData {
    pbhr.HookRevision hook_revision = 1;
    uint32 bound_num = 2;
    bool confirm_delete = 3;
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated ListHookRevisionsData details = 2;
}

message DeleteHookRevisionReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  uint32 revision_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
  bool force = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否强制：是=true，否=false" }];
}

message DeleteHookRevisionResp {}

message PublishHookRevisionReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  uint32 revision_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
}

message PublishHookRevisionResp {}

message GetHookReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
}

message GetHookResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  GetHookInfoSpec spec = 2;
  pbhook.HookAttachment attachment = 3;
  pbbase.Revision revision = 4;
}

message GetHookInfoSpec {
  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本名" }];
  string type = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "脚本类型：(shell、python、bat、powershell)"
  }];
  repeated string tags = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本标签" }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本描述" }];
  message Releases {
    uint32 not_release_id = 1;
  }
  Releases releases = 8;
}

message GetHookRevisionReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  uint32 revision_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
}

message UpdateHookRevisionReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "content", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  uint32 revision_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
  string name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本号" }];
  string content = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "内容" }];
  string memo = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "描述" }];
}

message UpdateHookRevisionResp {}

message ListHookRevisionReferencesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  uint32 revision_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  string searchKey = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
}

message ListHookRevisionReferencesResp {
  message Detail {
    uint32 revision_id = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
    string revision_name = 2;
    uint32 app_id = 3;
    string app_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
    uint32 release_id = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
    string release_name = 6
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
    string type = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "前/后置脚本：(pre_hook、post_hook)"
    }];
    bool deprecated = 8;
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated Detail details = 2;
}

message ListHookReferencesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 hook_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
  uint32 start = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  string searchKey = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
}

message ListHookReferencesResp {
  message Detail {
    uint32 hook_revision_id = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本ID" }];
    string hook_revision_name = 2
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本版本名" }];
    uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
    string app_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
    uint32 release_id = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
    string release_name = 6
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
    string type = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "前/后置脚本：(pre_hook、post_hook)"
    }];
    bool deprecated = 8;
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated Detail details = 2;
}

message GetReleaseHookReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message GetReleaseHookResp {
  message Hook {
    uint32 hook_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "脚本ID" }];
    string hook_name = 2;
    uint32 hook_revision_id = 3;
    string hook_revision_name = 4;
    string type = 5;
    string content = 7;
  }
  Hook pre_hook = 1;
  Hook post_hook = 2;
}

message CreateTemplateSpaceReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "模板空间名称",
    required: [ "name" ]
  }];
  string memo = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间描述" }];
}

message CreateTemplateSpaceResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
}

message UpdateTemplateSpaceReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string memo = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间描述" }];
}

message UpdateTemplateSpaceResp {}

message DeleteTemplateSpaceReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
}

message DeleteTemplateSpaceResp {}

message ListTemplateSpacesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string search_fields = 2;
  string search_value = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTemplateSpacesResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbts.TemplateSpace details = 2;
}

message GetAllBizsOfTmplSpacesResp {
  repeated uint32 biz_ids = 1;
}

message CreateDefaultTmplSpaceReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
}

message CreateDefaultTmplSpaceResp {
  uint32 id = 1;
}

message ListTmplSpacesByIDsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 ids = 2;
}

message ListTmplSpacesByIDsResp {
  repeated pbts.TemplateSpace details = 1;
}

message CreateTemplateReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [
        "file_mode",
        "byte_size",
        "path",
        "name",
        "user",
        "user_group",
        "privilege",
        "sign",
        "revision_name",
        "file_type"
      ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件名",
  }];
  string path = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件路径",
  }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板描述" }];
  string revision_name = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本号" }];
  string revision_memo = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本描述" }];
  string file_type = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "配置文件格式：文本文件=file, 二进制文件=binary"
  }];
  string file_mode = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
  string user = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户名" }];
  string user_group = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组名" }];
  string privilege = 12
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限", example: "644" }];
  string sign = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
  uint64 byte_size = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
  repeated uint32 template_set_ids = 15 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID，需要添加至某个套餐中" }
  ];
  string charset = 16 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
}

message CreateTemplateResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
}

message UpdateTemplateReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件描述" }];
}

message UpdateTemplateResp {}

message DeleteTemplateReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  bool force = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否强制：是=true，否=false" }];
}

message DeleteTemplateResp {}

message BatchDeleteTemplateReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string template_ids = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  bool force = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否强制删除：是=true，否=false",
    default: "false"
  }];
  bool exclusion_operation = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
}

message BatchDeleteTemplateResp {}

message ListTemplatesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string search_fields = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "支持搜索的字段",
    default: "name,path,memo,creator,reviser"
  }];
  string search_value = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  repeated uint32 ids = 7;
  bool all = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTemplatesResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtemplate.Template details = 2;
}

message BatchUpsertTemplatesReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [
        "file_mode",
        "byte_size",
        "path",
        "name",
        "user",
        "user_group",
        "privilege",
        "sign",
        "revision_name",
        "file_type",
        "md5"
      ]
    }
  };
  message Item {
    uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
    string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "文件名",
    }];
    string path = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "文件路径",
    }];
    string file_type = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "配置文件格式：文本文件=file, 二进制文件=binary"
    }];
    string file_mode = 5
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
    string memo = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板描述" }];
    string user = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户名" }];
    string user_group = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组名" }];
    string privilege = 9
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限", example: "644" }];
    string sign = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
    uint64 byte_size = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
    string md5 = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件MD5" }];
    string charset = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated Item items = 3;
  repeated uint32 template_set_ids = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID，需要添加至某个套餐中" }
  ];
}

message BatchUpsertTemplatesResp {
  repeated uint32 ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
}

message BatchUpdateTemplatePermissionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 template_ids = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string user = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户名" }];
  string user_group = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组名" }];
  string privilege = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限", example: "644" }];
  repeated uint32 app_ids = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  bool exclusion_operation = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
  uint32 template_set_id = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  bool no_set_specified = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否未指定套餐：是=true，否=false, 区分全部套餐和未指定套餐"
  }];
  uint32 template_space_id = 10
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
}

message BatchUpdateTemplatePermissionsResp {
  repeated uint32 ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
}

message AddTmplsToTmplSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated uint32 template_ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  repeated uint32 template_set_ids = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  bool exclusion_operation = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
  uint32 template_set_id = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  bool no_set_specified = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否未指定套餐：是=true，否=false, 区分全部套餐和未指定套餐"
  }];
}

message AddTmplsToTmplSetsResp {}

message DeleteTmplsFromTmplSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated uint32 template_set_ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  repeated uint32 template_ids = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  bool exclusion_operation = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
  bool no_set_specified = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否未指定套餐：是=true，否=false, 区分全部套餐和未指定套餐"
  }];
}

message ListTemplatesByIDsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 ids = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
}

message ListTemplatesByIDsResp {
  repeated pbtemplate.Template details = 1;
}

message ListTemplatesNotBoundReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string search_fields = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "支持搜索的字段",
    default: "name,path,memo,creator,reviser"
  }];
  string search_value = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTemplateByTupleReq {
  message Item {
    string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件名" }];
    string path = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件路径" }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated Item items = 3;
}

message ListTemplateByTupleResp {
  message Item {
    pbtemplate.Template template = 1;
    pbtr.TemplateRevision template_revision = 2;
  }
  repeated Item items = 1;
}

message ListTemplatesNotBoundResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtemplate.Template details = 2;
}

message ListTmplsOfTmplSetReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_set_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  string search_fields = 4;
  string search_value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  repeated uint32 ids = 8;
  bool all = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplsOfTmplSetResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtemplate.Template details = 2;
}

message ListTemplateSetsAndRevisionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_set_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
}

message ListTemplateSetsAndRevisionsResp {
  message Detail {
    pbtemplate.Template template = 1;
    repeated pbtr.TemplateRevision template_revision = 2;
  }
  repeated Detail details = 1;
}

message CreateTemplateRevisionReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [
        "file_mode",
        "byte_size",
        "path",
        "name",
        "user",
        "user_group",
        "privilege",
        "sign",
        "revision_name",
        "file_type"
      ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string revision_name = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本号" }];
  string revision_memo = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本描述" }];
  string name = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件名",
  }];
  string path = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件路径",
  }];
  string file_type = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "配置文件格式：文本文件=file, 二进制文件=binary"
  }];
  string file_mode = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
  string user = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户名" }];
  string user_group = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组名" }];
  string privilege = 12
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限", example: "644" }];
  string sign = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
  uint64 byte_size = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
  string charset = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
}

message CreateTemplateRevisionResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
}

message UpdateTemplateRevisionReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [
        "file_mode",
        "byte_size",
        "path",
        "name",
        "user",
        "user_group",
        "privilege",
        "sign",
        "revision_name",
        "file_type"
      ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string revision_name = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本号" }];
  string revision_memo = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本描述" }];
  string name = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件名",
  }];
  string path = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "文件路径",
  }];
  string file_type = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "配置文件格式：文本文件=file, 二进制文件=binary"
  }];
  string file_mode = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
  string user = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户名" }];
  string user_group = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组名" }];
  string privilege = 12
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限", example: "644" }];
  string sign = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
  uint64 byte_size = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
  uint32 template_revision_id = 15
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
  string charset = 16 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
}

message UpdateTemplateRevisionResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
}

message ListTemplateRevisionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string search_fields = 4;
  string search_value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTemplateRevisionsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtr.TemplateRevision details = 2;
}

message GetTemplateRevisionReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string revision_name = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本号" }];
}

message GetTemplateRevisionResp {
  message TemplateRevision {
    uint32 template_id = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
    string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "文件名",
    }];
    string path = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "文件路径",
    }];
    uint32 template_revision_id = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板文件版本ID",
    }];
    string template_revision_name = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板文件版本号",
    }];
    string template_revision_memo = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板文件版本描述",
    }];
    string file_type = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "配置文件格式：文本文件=file, 二进制文件=binary",
    }];
    string file_mode = 8
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件模式", default: "unix" }];
    string user = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户名" }];
    string user_group = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "用户组" }];
    string privilege = 11
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件权限", example: "644" }];
    string signature = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
    uint64 byte_size = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
    string creator = 14 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "创建者" }];
    string create_at = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "创建时间" }];
    string md5 = 16 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件MD5" }];
    bool is_latest = 17 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否最新版本：是=true，否=false" }
    ];
    string charset = 18 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件编码" }];
  }
  TemplateRevision detail = 1;
}

message DeleteTemplateRevisionReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  uint32 template_revision_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
}

message DeleteTemplateRevisionResp {}

message ListTemplateRevisionsByIDsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 ids = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
}

message ListTemplateRevisionsByIDsResp {
  repeated pbtr.TemplateRevision details = 1;
}

message ListTmplRevisionNamesByTmplIDsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 template_ids = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
}

message ListTmplRevisionNamesByTmplIDsResp {
  repeated pbtr.TemplateRevisionNamesDetail details = 1;
}

message CreateTemplateSetReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "public", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐名称" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐描述" }];
  repeated uint32 template_ids = 5;
  bool public = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "服务可见范围，公开=true，指定服务=false",
    default: "true"
  }];
  repeated uint32 bound_apps = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "绑定的服务" }];
}

message CreateTemplateSetResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
}

message UpdateTemplateSetReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_set_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  string name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐名称" }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐描述" }];
  repeated uint32 template_ids = 6;
  bool public = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "服务可见范围，公开=true，指定服务=false",
    default: "true"
  }];
  repeated uint32 bound_apps = 8;
  bool force = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否强制：是=true，否=false" }];
}

message UpdateTemplateSetResp {}

message DeleteTemplateSetReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_set_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  bool force = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否强制：是=true，否=false" }];
}

message DeleteTemplateSetResp {}

message ListTemplateSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string search_fields = 3;
  string search_value = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTemplateSetsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtset.TemplateSet details = 2;
}

message ListAppTemplateSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ListAppTemplateSetsResp {
  repeated pbtset.TemplateSet details = 1;
}

message ListTemplateSetsByIDsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 ids = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
}

message ListTemplateSetsByIDsResp {
  repeated pbtset.TemplateSet details = 1;
}

message ListTmplSetsOfBizReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ListTmplSetsOfBizResp {
  repeated pbtset.TemplateSetOfBizDetail details = 1;
}

message CreateAppTemplateBindingReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated pbatb.TemplateBinding bindings = 3;
}

message CreateAppTemplateBindingResp {
  uint32 id = 1;
}

message UpdateAppTemplateBindingReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 binding_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务绑定模板套餐后的ID" }];
  repeated pbatb.TemplateBinding bindings = 4;
}

message UpdateAppTemplateBindingResp {}

message DeleteAppTemplateBindingReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 binding_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务绑定模板套餐后的ID" }];
}

message DeleteAppTemplateBindingResp {}

message ListAppTemplateBindingsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ListAppTemplateBindingsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbatb.AppTemplateBinding details = 2;
}

message ListAppBoundTmplRevisionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string search_fields = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "支持搜索的字段",
    default: "revision_name,revision_memo,name,path,creator"
  }];
  string search_value = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  bool with_status = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "为模板配置项设置文件状态：是=true，否=false",
    default: "false"
  }];
  repeated string status = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "模板状态：(ADD、REVISE、DELETE、UNCHANGE)"
  }];
}

message ListAppBoundTmplRevisionsResp {
  repeated pbatb.AppBoundTmplRevisionGroupBySet details = 1;
}

message ListReleasedAppBoundTmplRevisionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  string search_fields = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "支持搜索的字段",
    default: "revision_name,revision_memo,name,path,creator"
  }];
  string search_value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
}

message ListReleasedAppBoundTmplRevisionsResp {
  repeated pbatb.ReleasedAppBoundTmplRevisionGroupBySet details = 1;
}

message GetReleasedAppBoundTmplRevisionReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  uint32 template_revision_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
}

message GetReleasedAppBoundTmplRevisionResp {
  pbatb.ReleasedAppBoundTmplRevision detail = 1;
}

message UpdateAppBoundTmplRevisionsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 binding_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务绑定模板套餐后的ID" }];
  repeated pbatb.TemplateBinding bindings = 4;
}

message UpdateAppBoundTmplRevisionsResp {}

message DeleteAppBoundTmplSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 binding_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务绑定模板套餐后的ID" }];
  string template_set_ids = 4;
}

message DeleteAppBoundTmplSetsResp {}

message RemoveAppBoundTmplSetReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 template_set_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
}

message RemoveAppBoundTmplSetResp {}

message CheckAppTemplateBindingReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated pbatb.TemplateBinding bindings = 3;
}

message CheckAppTemplateBindingResp {
  repeated pbatb.Conflict details = 1;
}

message ImportFromTemplateSetToAppReq {
  message Binding {
    message TemplateRevisionBinding {
      uint32 template_id = 1
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
      uint32 template_revision_id = 2
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
      bool is_latest = 3
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否最新版本" }];
      string template_name = 4
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板名称" }];
      string template_revision_name = 5
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板版本号" }];
    }
    uint32 template_set_id = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
    uint32 template_space_id = 2
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
    string template_space_name = 3
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间名称" }];
    string template_set_name = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐名称" }];
    repeated TemplateRevisionBinding template_revisions = 5
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          description: "模板版本",
        }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated Binding bindings = 3;
}

message ImportFromTemplateSetToAppResp {}

message ListTmplBoundCountsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated uint32 template_ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
}

message ListTmplBoundCountsResp {
  repeated pbtbr.TemplateBoundCounts details = 1;
}

message ListTmplRevisionBoundCountsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  repeated uint32 template_revision_ids = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
}

message ListTmplRevisionBoundCountsResp {
  repeated pbtbr.TemplateRevisionBoundCounts details = 1;
}

message ListTmplSetBoundCountsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated uint32 template_set_ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
}

message ListTmplSetBoundCountsResp {
  repeated pbtbr.TemplateSetBoundCounts details = 1;
}

message ListTmplBoundUnnamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string search_fields = 4;
  string search_value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplBoundUnnamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateBoundUnnamedAppDetail details = 2;
}

message ListTmplBoundNamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  string search_fields = 4;
  string search_value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplBoundNamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateBoundNamedAppDetail details = 2;
}

message ListTmplBoundTmplSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplBoundTmplSetsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateBoundTemplateSetDetail details = 2;
}

message ListMultiTmplBoundTmplSetsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string template_ids = 3;
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListMultiTmplBoundTmplSetsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.MultiTemplateBoundTemplateSetDetail details = 2;
}

message ListTmplRevisionBoundUnnamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  uint32 template_revision_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
  string search_fields = 5;
  string search_value = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplRevisionBoundUnnamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateRevisionBoundUnnamedAppDetail details = 2;
}

message ListTmplRevisionBoundNamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  uint32 template_revision_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
  string search_fields = 5;
  string search_value = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplRevisionBoundNamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateRevisionBoundNamedAppDetail details = 2;
}

message ListTmplSetBoundUnnamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_set_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplSetBoundUnnamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateSetBoundUnnamedAppDetail details = 2;
}

message ListMultiTmplSetBoundUnnamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  string template_set_ids = 3;
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListMultiTmplSetBoundUnnamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.MultiTemplateSetBoundUnnamedAppDetail details = 2;
}

message CheckTemplateSetReferencesAppsReq {
  message Item {
    uint32 id = 1;
    string name = 2;
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  repeated uint32 template_set_ids = 3;
  repeated Item items = 4;
}

message CheckTemplateSetReferencesAppsResp {
  message Item {
    uint32 template_set_id = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
    string template_set_name = 2;
    uint32 app_id = 3;
    string app_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
    bool app_exceeds_limit = 5;
    bool template_set_exceeds_limit = 6;
    uint32 app_exceeds_quantity = 7;
    uint32 template_set_exceeds_quantity = 8;
  }
  repeated Item items = 1;
}

message ListTmplSetBoundNamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_set_id = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListTmplSetBoundNamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.TemplateSetBoundNamedAppDetail details = 2;
}

message ListLatestTmplBoundUnnamedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_space_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
  uint32 template_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListLatestTmplBoundUnnamedAppsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtbr.LatestTemplateBoundUnnamedAppDetail details = 2;
}

message CreateTemplateVariableReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "type", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "变量名称" }];
  string type = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "变量类型：string、number" }];
  string default_val = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "默认值" }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "变量描述" }];
}

message CreateTemplateVariableResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板变量ID" }];
}

message UpdateTemplateVariableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_variable_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板变量ID" }];
  string default_val = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "默认值" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "变量描述" }];
}

message UpdateTemplateVariableResp {}

message DeleteTemplateVariableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 template_variable_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板变量ID" }];
}

message DeleteTemplateVariableResp {}

message ListTemplateVariablesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string search_fields = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "支持搜索的字段：name" }];
  string search_value = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  repeated uint32 top_ids = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需置顶ID" }];
}

message ListTemplateVariablesResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbtv.TemplateVariable details = 2;
}

message ImportTemplateVariablesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string separator = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "分隔符：(\" \",\",\",\";\",\"|\")",
    default: " "
  }];
  string variables = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "内容",
    example: "\"bk_bscp_nginx_ip string 1.1.1.1\""
  }];
}

message ImportTemplateVariablesResp {
  uint32 variable_count = 1;
  repeated uint32 ids = 2;
}

message ImportOtherFormatTemplateVariablesReq {
  uint32 biz_id = 1;
  string format = 2;
  string data = 3;
}

message ImportOtherFormatTemplateVariablesResp {
  repeated uint32 ids = 1;
  uint32 variable_count = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
}

message ExtractAppTmplVariablesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ExtractAppTmplVariablesResp {
  repeated string details = 1;
}

message GetAppTmplVariableRefsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message GetAppTmplVariableRefsResp {
  repeated pbatv.AppTemplateVariableReference details = 1;
}

message GetReleasedAppTmplVariableRefsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message GetReleasedAppTmplVariableRefsResp {
  repeated pbatv.AppTemplateVariableReference details = 1;
}

message UpdateAppTmplVariablesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated pbtv.TemplateVariableSpec variables = 3;
}

message UpdateAppTmplVariablesResp {}

message ListAppTmplVariablesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ListAppTmplVariablesResp {
  repeated pbtv.TemplateVariableSpec details = 1;
}

message ListReleasedAppTmplVariablesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
}

message ListReleasedAppTmplVariablesResp {
  repeated pbtv.TemplateVariableSpec details = 1;
}

message CreateGroupReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "selector", "public", "name" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组名称" }];
  bool public = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "服务可见范围，公开=true，指定服务=false",
    default: "true"
  }];
  repeated uint32 bind_apps = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "绑定的服务" }];
  string mode = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组枚举类型：custom,debug" }];
  google.protobuf.Struct selector = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "标签选择器：op=(eq、ne、gt、ge...)等操作符",
    example: "{\"labels_and\":[{\"key\":\"env\",\"op\":\"eq\",\"value\":\"test\"},{\"key\":\"version\",\"op\":\"gt\",\"value\":1}]}"
  }];
  string uid = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "debug UID " }];
}

message CreateGroupResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
}

message UpdateGroupReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 group_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
  string name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组名称" }];
  bool public = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "服务可见范围，公开=true，指定服务=false",
    default: "true"
  }];
  repeated uint32 bind_apps = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "绑定的服务" }];
  string mode = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组枚举类型：custom,debug" }];
  google.protobuf.Struct selector = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "标签选择器：op=(eq、ne、gt、ge...)等操作符",
    example: "{\"labels_and\":[{\"key\":\"env\",\"op\":\"eq\",\"value\":\"test\"},{\"key\":\"version\",\"op\":\"gt\",\"value\":1}]}"
  }];
  string uid = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "debug UID " }];
}

message UpdateGroupResp {}

message DeleteGroupReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 group_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
}

message DeleteGroupResp {}

message ListAllGroupsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string top_ids = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需要置顶ID" }];
}

message ListAllGroupsResp {
  message ListAllGroupsData {
    message BindApp {
      uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
      string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名" }];
    }
    uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
    string name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组名" }];
    bool public = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "服务可见范围，公开=true，指定服务=false",
    }];
    repeated BindApp bind_apps = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "绑定的服务" }];
    google.protobuf.Struct selector = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "标签选择器：op=(eq、ne、gt、ge...)等操作符",
      example: "{\"labels_and\":[{\"key\":\"env\",\"op\":\"eq\",\"value\":\"test\"},{\"key\":\"version\",\"op\":\"gt\",\"value\":1}]}"
    }];
    uint32 released_apps_num = 6
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "已上线应用数量" }];
    bool edited = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "分组是否编辑过（old_selector和new_selector不一致"
    }];
  }
  repeated ListAllGroupsData details = 1;
}

message ListAppGroupsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message ListAppGroupsResp {
  message ListAppGroupsData {
    uint32 group_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
    string group_name = 2;
    uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
    string release_name = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
    google.protobuf.Struct old_selector = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "当前线上分组选择器，如未上线则为空"
    }];
    google.protobuf.Struct new_selector = 6
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "即将上线的分组选择器" }];
    bool edited = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "分组是否编辑过（old_selector和new_selector不一致"
    }];
  }
  repeated ListAppGroupsData details = 1;
}

message ListGroupReleasedAppsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 group_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
  string search_key = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
}

message ListGroupReleasedAppsResp {
  message ListGroupReleasedAppsData {
    uint32 app_id = 1;
    string app_name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务名称" }];
    uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
    string release_name = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
    bool edited = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否为已编辑状态" }];
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated ListGroupReleasedAppsData details = 2;
}

message GetGroupByNameReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string group_name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组名" }];
}

message PublishReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "上线说明" }];
  bool all = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "全部实例上线：是=true，否=false" }
  ];
  string gray_publish_mode = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "灰度发布模式，仅在 all 为 false 时有效，枚举值：publish_by_labels,publish_by_groups "
  }];
  bool default = 7;
  repeated uint32 groups = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "分组上线：分组ID，如果有值那么all必须是false",
    default: "[]"
  }];
  repeated google.protobuf.Struct labels = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "要发布的标签列表，仅在 gray_publish_mode 为 publish_by_labels 时生效"
  }];
  string group_name = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "在 gray_publish_mode 为 publish_by_labels 时生效，用于根据 labels 生成一个分组时对其命名，如果有服务有可用的（绑定了服务）同 labels 的分组存在，则复用旧的分组，不会新创建分组"
  }];
}

message GenerateReleaseAndPublishReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string release_name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本名" }];
  string release_memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本描述" }];
  repeated pbtv.TemplateVariableSpec variables = 5;
  bool all = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "全部实例上线：是=true，否=false" }
  ];
  string gray_publish_mode = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "灰度发布模式，仅在 all 为 false 时有效，枚举值：publish_by_labels,publish_by_groups "
  }];
  repeated string groups = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "分组上线：分组ID，如果有值那么all必须是false",
    default: "[]"
  }];
  repeated google.protobuf.Struct labels = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "要发布的标签列表，仅在 gray_publish_mode 为 publish_by_labels 时生效"
  }];
  string group_name = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "在 gray_publish_mode 为 publish_by_labels 时生效，用于根据 labels 生成一个分组时对其命名，如果有服务有可用的（绑定了服务）同 labels 的分组存在，则复用旧的分组，不会新创建分组"
  }];
}

message GenerateReleaseAndPublishResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本发布后的ID" }];
}

message PublishResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "版本发布后的ID" }];
  bool have_credentials = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否有关联密钥" }];
  bool have_pull = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否被客户端拉取过" }];
}

message SubmitPublishApproveReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "描述" }];
  bool all = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否全量发布：是=true，否=false" }
  ];
  string gray_publish_mode = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "灰度发布模式，仅在 all 为 false 时有效，枚举值：publish_by_labels,publish_by_groups "
  }];
  bool default = 7;
  repeated uint32 groups = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "分组ID" }];
  repeated google.protobuf.Struct labels = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "要发布的标签列表，仅在 gray_publish_mode 为 publish_by_labels 时生效"
  }];
  string group_name = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "在 gray_publish_mode 为 publish_by_labels 时生效，用于根据 labels 生成一个分组时对其命名，如果有服务有可用的（绑定了服务）同 labels 的分组存在，则复用旧的分组，不会新创建分组"
  }];
  string publish_type = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "发布策略：(manually、automatically、scheduled、immediately)"
  }];
  string publish_time = 12 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "如果publish_type为scheduled时才会有值",
    example: "\"2024-11-14 17:53:47\""
  }];
  bool is_compare = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否比较差异：是=true，否=false",
    default: "false"
  }];
}

message ApproveReq {
  uint32 biz_id = 1;
  uint32 app_id = 2;
  uint32 release_id = 3;
  string publish_status = 4;
  string reason = 5;
}

message ApproveResp {
  bool have_credentials = 1;
  int32 code = 2;  // itsm回调
  bool have_pull = 3;
  string message = 4;
}

message GetLastSelectReq {
  uint32 biz_id = 1;
  uint32 app_id = 2;
}

message GetLastSelectResp {
  string publish_type = 1;
  bool is_approve = 2;
}

message GetLastPublishReq {
  uint32 biz_id = 1;
  uint32 app_id = 2;
}

message GetLastPublishResp {
  bool is_publishing = 1;
  string version_name = 2;
  string final_approval_time = 3;
  repeated pbrelease.PublishRecord publish_record = 4;
  uint32 release_id = 5;
}

message GetReleasesStatusReq {
  uint32 biz_id = 1;
  uint32 app_id = 2;
  uint32 release_id = 3;
}

message ListAuditsReq {
  uint32 biz_id = 1;
  uint32 app_id = 2;
  string start_time = 3;
  string end_time = 4;
  uint32 id = 5;
  string operate_way = 6;
  uint32 start = 7;
  uint32 limit = 8;
  bool all = 9;
  string name = 10;
  string resource_type = 11;
  string action = 12;
  string res_instance = 13;
  string status = 14;
  string operator = 15;
}

message ListAuditsResp {
  uint32 count = 1;
  repeated pbaudit.ListAuditsAppStrategy details = 2;
}

message CreateKvReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "key", "kv_type", "value" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string key = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
  string kv_type = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "键值类型：(any、string、number、text、json、yaml、xml、secret)"
  }];
  string value = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项值" }];
  string memo = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "描述" }];
  string secret_type = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "密钥类型：(password、、certificate、secret_key、token、custom)，如果kv_type=secret必填项"
  }];
  bool secret_hidden = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否隐藏值：是=true，否=false" }];
  string certificate_expiration_date = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "证书过期时间" }];
  uint32 managed_table_id = 10
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "托管表格ID" }];
  uint32 external_source_id = 11
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "外部源表格ID" }];
  google.protobuf.Struct filter_condition = 12
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤表格的条件" }];
  repeated string filter_fields = 13
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤表格的字段" }];
}

message CreateKvResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "键值配置项ID" }];
}

message UpdateKvReq {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      description: "请求参数"
      required: [ "key", "value" ]
    }
  };
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string key = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
  string memo = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "描述" }];
  string value = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项值" }];
  string secret_type = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "密钥类型：(password、、certificate、secret_key、token、custom)，如果kv_type=secret必填项"
  }];
  bool secret_hidden = 8
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否隐藏值：是=true，否=false" }];
}

message UpdateKvResp {}

message ListKvsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  bool all = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  string search_key = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  repeated string key = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "查询特定的配置项名" }];
  uint32 start = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool with_status = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "暂时未用到" }];
  string search_fields = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "支持搜索的字段：key,revister,creator",
    default: "key,revister,creator"
  }];
  string search_value = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  repeated string kv_type = 11 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "键值类型：(any、string、number、text、json、yaml、xml、secret)"
  }];
  string sort = 12
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "排序的值，例如：key" }];
  string order = 13 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "排序类型：desc" }];
  repeated uint32 top_ids = 14
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需要置顶ID" }];
  repeated string status = 15 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "键值配置项状态：(ADD、DELETE、REVISE、UNCHANGE)"
  }];
}

message ListKvsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbkv.Kv details = 2;
  uint32 exclusion_count = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "排除删除后的数量" }];
  bool is_cert_expired = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否有证书过期：是=true，否=false" }
  ];
}

message DeleteKvReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "键值配置项ID" }];
}

message DeleteKvResp {}

message BatchDeleteBizResourcesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  repeated uint32 ids = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需批量操作的ID" }];
  bool exclusion_operation = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
}

message BatchDeleteAppResourcesReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated uint32 ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "键值配置项ID" }];
  bool exclusion_operation = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
}

message BatchDeleteResp {
  repeated uint32 successful_ids = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "操作成功的ID" }];
  repeated uint32 failed_ids = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "操作失败的ID" }];
}

message BatchUpsertKvsReq {
  message Kv {
    string key = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
    string kv_type = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "键值类型：(any、string、number、text、json、yaml、xml、secret)"
    }];
    string value = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项值" }];
    string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "描述" }];
    string secret_type = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "密钥类型：(password、、certificate、secret_key、token、custom)"
    }];
    bool secret_hidden = 6 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否隐藏值：是=true，否=false" }
    ];
    string certificate_expiration_date = 7
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "证书过期时间" }];
    uint32 managed_table_id = 8
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "托管表格ID" }];
    uint32 external_source_id = 9
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "外部源表格ID" }];
    google.protobuf.Struct filter_condition = 10
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤表格的条件" }];
    repeated string filter_fields = 11
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤表格的字段" }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated Kv kvs = 3;
  bool replace_all = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否清空：是=true，否=false" }];
}

message BatchUpsertKvsResp {
  repeated uint32 ids = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "键值配置项ID" }];
}

message UnDeleteKvReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string key = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
}

message UnDeleteKvResp {}

message BatchUnDeleteKvReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated string keys = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
  bool exclusion_operation = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
}

message BatchUnDeleteKvResp {
  repeated string successful_keys = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "删除成功的key" }];
  repeated string failed_keys = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "删除失败的key" }];
}

message UndoKvReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string key = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
}

message UndoKvResp {}

message ImportKvsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string format = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "导入文件的格式：json、yaml",
    example: "{\"配置项名称\":{\"kv_type\":\"数据类型，支持以下类型：string、number、text、json、xml、yaml、secret\",\"value\":\"配置项的具体值\",\"secret_type\":\"密钥类型，仅在kv_type为secret时有效，支持的类型包括：password、secret_key、certificate、token\",\"secret_hidden\":\"指示配置项值是否可见，仅在kv_type为secret时有效\",\"memo\":\"对配置项的描述\"}}"
  }];
  string data = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "导入的数据" }];
}

message ImportKvsResp {
  repeated uint32 ids = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "键值配置项ID" }];
}

message ListClientsReq {
  message Order {
    string desc = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "按倒序",
      example: "\"id,name,...\""
    }];
    string asc = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "按正序",
      example: "\"id,name,...\""
    }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  bool all = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  Order order = 6;
  int64 last_heartbeat_time = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "最后心跳时间",
    example: "\"2024-11-14 17:53:47\""
  }];
  pbclient.ClientQueryCondition search = 8;
}

message FindNearExpiryCertKvsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  bool all = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  uint32 days = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "单位天，获取在指定天数内即将过期的证书"
  }];
}

message FindNearExpiryCertKvsResp {
  repeated pbkv.Kv details = 1;
  int64 count = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
}

message ListClientsResp {
  message Item {
    pbclient.Client client = 1;
    string cpu_usage_str = 2
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前cpu使用率" }];
    string cpu_max_usage_str = 3
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "最大cpu使用率" }];
    string memory_usage_str = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前内存使用率" }];
    string memory_max_usage_str = 5
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "最大内存使用率" }];
  }
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated Item details = 2;
  uint32 exclusion_count = 9
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "排除离线的数量" }];
}

message ListClientEventsReq {
  message Order {
    string desc = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "按倒序",
      example: "\"id,name,...\""
    }];
    string asc = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "按正序",
      example: "\"id,name,...\""
    }];
  }
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 client_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端ID" }];
  bool all = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  uint32 start = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  Order order = 7;
  string search_value = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  string start_time = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "开始时间" }];
  string end_time = 10 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "结束时间" }];
}

message ListClientEventsResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbce.ClientEvent details = 2;
}

message RetryClientsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  repeated uint32 client_ids = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端ID" }];
  bool all = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  bool exclusion_operation = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "是否排除操作：是=true，否=false",
    default: "false",
  }];
}

message RetryClientsResp {}

message ListClientQuerysReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string search_type = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索类型：recent、common" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
}

message ListClientQuerysResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbcq.ClientQuery details = 2;
}

message CreateClientQueryReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string search_type = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索类型：recent、common" }];
  string search_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索条件" }];
  google.protobuf.Struct search_condition = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
}

message CreateClientQueryResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端查询条件ID" }];
}

message UpdateClientQueryReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端查询条件ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  string search_name = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索条件" }];
  google.protobuf.Struct search_condition = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
}

message UpdateClientQueryResp {}

message DeleteClientQueryReq {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "客户端查询条件ID" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message DeleteClientQueryResp {}

message CheckClientQueryNameReq {
  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索条件名" }];
  uint32 biz_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message CheckClientQueryNameResp {
  bool exist = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否存在：是=true，否=false" }];
}

message ListClientLabelAndAnnotationReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  int64 last_heartbeat_time = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "最后心跳时间" }];
}

message CompareConfigItemConflictsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  uint32 other_app_id = 4
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "需对比其他的服务ID" }];
}

message CompareConfigItemConflictsResp {
  message NonTemplateConfig {
    uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项ID" }];
    pbci.ConfigItemSpec config_item_spec = 2;
    repeated pbtv.TemplateVariableSpec variables = 3;
    bool is_exist = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否存在：是=true，否=false" }];
    string signature = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件sha256" }];
    uint64 byte_size = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件大小" }];
    string md5 = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件MD5" }];
  }
  message TemplateConfig {
    message TemplateRevisionDetail {
      uint32 template_id = 1
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件ID" }];
      uint32 template_revision_id = 2
          [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件版本ID" }];
      bool is_latest = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否最新：是=true，否=false" }
      ];
      repeated pbtv.TemplateVariableSpec variables = 5;
    }
    uint32 template_space_id = 1
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间ID" }];
    string template_space_name = 2
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板空间名" }];
    uint32 template_set_id = 3
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐ID" }];
    string template_set_name = 4
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板套餐名" }];
    bool is_exist = 5
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否存在：是=true，否=false" }];
    repeated TemplateRevisionDetail template_revisions = 6;
    bool template_space_exist = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板空间是否存在：是=true，否=false"
    }];
    bool template_set_exist = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板套餐是否存在：是=true，否=false"
    }];
    bool template_set_is_empty = 9 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "模板套餐是否为空：是=true，否=false"
    }];
  }
  repeated NonTemplateConfig non_template_configs = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "非模板文件" }];
  repeated TemplateConfig template_configs = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件" }];
}

message CompareKvConflictsReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
  uint32 release_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务版本ID" }];
  uint32 other_app_id = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "其他服务ID" }];
}

message CompareKvConflictsResp {
  message Kv {
    string key = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项名" }];
    string kv_type = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "键值类型：(any、string、number、text、json、yaml、xml、secret)"
    }];
    string value = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "配置项值" }];
    string memo = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "描述" }];
    string secret_type = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "密钥类型：(password、、certificate、secret_key、token、custom)"
    }];
    bool secret_hidden = 6 [
      (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否隐藏值：是=true，否=false" }
    ];
    uint32 managed_table_id = 7
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "托管表格ID" }];
    uint32 external_source_id = 8
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "外部源表格ID" }];
    google.protobuf.Struct filter_condition = 9
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤表格的条件" }];
    repeated string filter_fields = 10
        [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤表格的字段" }];
  }
  repeated Kv exist = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "已存在的键值配置项" }];
  repeated Kv non_exist = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "不已存在的键值配置项" }];
}

message GetTemplateAndNonTemplateCICountReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 app_id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "服务ID" }];
}

message GetTemplateAndNonTemplateCICountResp {
  uint64 config_item_count = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "文件配置项数量" }];
  uint64 template_config_item_count = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "模板文件数量" }];
}

message ListDataSourceTableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  string search_value = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 5
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  string data_source_type = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "数据源类型：托管表格=0，外部数据源=1"
  }];
}

message ListDataSourceTableResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbdsm.DataSourceMapping details = 2;
}

message CreateDataSourceTableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  pbdsm.DataSourceMappingSpec spec = 2;
}

message CreateDataSourceTableResp {
  uint32 id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "数据源管理ID" }];
}

message GetDataSourceTableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "数据源表格ID" }];
}

message GetDataSourceTableResp {
  pbdsm.DataSourceMapping details = 1;
}

message UpdateDataSourceTableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "数据源表格ID" }];
  pbdsm.DataSourceMappingSpec spec = 3;
}

message UpdateDataSourceTableResp {}

message DeleteDataSourceTableReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "数据源表格ID" }];
}

message DeleteDataSourceTableResp {}

message CreateTableContentReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "表结构ID" }];
  repeated google.protobuf.Struct content = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "内容" }];
}

message CreateTableContentResp {
  repeated uint32 ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "表数据ID" }];
}

message UpsertTableContentReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "表结构ID" }];
  repeated google.protobuf.Struct contents = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "内容" }];
}

message UpsertTableContentResp {
  repeated uint32 ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "表数据ID" }];
}

message ListTableContentReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "表结构ID" }];
  google.protobuf.Struct filter_condition = 3
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "搜索的值" }];
  uint32 start = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "当前页码" }];
  uint32 limit = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "每页条数" }];
  bool all = 6
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否获取所有", default: "false" }];
  repeated string filter_fields = 7
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "过滤字段" }];
}

message ListTableContentResp {
  uint32 count = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "总数" }];
  repeated pbdsc.DataSourceContent details = 2;
  repeated pbdsc.Field fields = 3;
}

message CheckTableFieldReq {
  uint32 biz_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "业务ID" }];
  uint32 data_source_mapping_id = 2
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "表结构ID" }];
  string field_name = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "字段名" }];
}

message CheckTableFieldResp {
  bool exist = 1
      [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { description: "是否存在：是=true，否=false" }];
}

message GetLatestTemplateVersionsInSpaceReq {
  uint32 biz_id = 1;
  uint32 template_space_id = 2;
  uint32 template_id = 3;
}

message GetLatestTemplateVersionsInSpaceResp {
  pbts.TemplateSpaceSpec template_space = 1;
  message TemplateSetSpec {
    string name = 1;
    repeated pbtr.TemplateRevisionSpec template_revision = 2;
  }
  repeated TemplateSetSpec template_set = 2;
}