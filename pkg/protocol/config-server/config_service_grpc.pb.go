// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: config_service.proto

package pbcs

import (
	context "context"
	app "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/app"
	base "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/base"
	client "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/client"
	group "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/group"
	hook_revision "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/hook-revision"
	release "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/release"
	strategy "github.com/TencentBlueKing/bk-bscp/pkg/protocol/core/strategy"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Config_CreateApp_FullMethodName                          = "/pbcs.Config/CreateApp"
	Config_UpdateApp_FullMethodName                          = "/pbcs.Config/UpdateApp"
	Config_DeleteApp_FullMethodName                          = "/pbcs.Config/DeleteApp"
	Config_GetApp_FullMethodName                             = "/pbcs.Config/GetApp"
	Config_GetAppByName_FullMethodName                       = "/pbcs.Config/GetAppByName"
	Config_ListAppsRest_FullMethodName                       = "/pbcs.Config/ListAppsRest"
	Config_ListAppsBySpaceRest_FullMethodName                = "/pbcs.Config/ListAppsBySpaceRest"
	Config_CreateConfigItem_FullMethodName                   = "/pbcs.Config/CreateConfigItem"
	Config_BatchUpsertConfigItems_FullMethodName             = "/pbcs.Config/BatchUpsertConfigItems"
	Config_UpdateConfigItem_FullMethodName                   = "/pbcs.Config/UpdateConfigItem"
	Config_DeleteConfigItem_FullMethodName                   = "/pbcs.Config/DeleteConfigItem"
	Config_BatchDeleteConfigItems_FullMethodName             = "/pbcs.Config/BatchDeleteConfigItems"
	Config_UnDeleteConfigItem_FullMethodName                 = "/pbcs.Config/UnDeleteConfigItem"
	Config_BatchUnDeleteConfigItem_FullMethodName            = "/pbcs.Config/BatchUnDeleteConfigItem"
	Config_UndoConfigItem_FullMethodName                     = "/pbcs.Config/UndoConfigItem"
	Config_GetConfigItem_FullMethodName                      = "/pbcs.Config/GetConfigItem"
	Config_GetReleasedConfigItem_FullMethodName              = "/pbcs.Config/GetReleasedConfigItem"
	Config_ListConfigItems_FullMethodName                    = "/pbcs.Config/ListConfigItems"
	Config_ListReleasedConfigItems_FullMethodName            = "/pbcs.Config/ListReleasedConfigItems"
	Config_ListConfigItemCount_FullMethodName                = "/pbcs.Config/ListConfigItemCount"
	Config_ListConfigItemByTuple_FullMethodName              = "/pbcs.Config/ListConfigItemByTuple"
	Config_GetReleasedKv_FullMethodName                      = "/pbcs.Config/GetReleasedKv"
	Config_ListReleasedKvs_FullMethodName                    = "/pbcs.Config/ListReleasedKvs"
	Config_UpdateConfigHook_FullMethodName                   = "/pbcs.Config/UpdateConfigHook"
	Config_CreateRelease_FullMethodName                      = "/pbcs.Config/CreateRelease"
	Config_ListReleases_FullMethodName                       = "/pbcs.Config/ListReleases"
	Config_GetReleaseByName_FullMethodName                   = "/pbcs.Config/GetReleaseByName"
	Config_GetRelease_FullMethodName                         = "/pbcs.Config/GetRelease"
	Config_DeprecateRelease_FullMethodName                   = "/pbcs.Config/DeprecateRelease"
	Config_UnDeprecateRelease_FullMethodName                 = "/pbcs.Config/UnDeprecateRelease"
	Config_DeleteRelease_FullMethodName                      = "/pbcs.Config/DeleteRelease"
	Config_CheckReleaseName_FullMethodName                   = "/pbcs.Config/CheckReleaseName"
	Config_CreateHook_FullMethodName                         = "/pbcs.Config/CreateHook"
	Config_DeleteHook_FullMethodName                         = "/pbcs.Config/DeleteHook"
	Config_BatchDeleteHook_FullMethodName                    = "/pbcs.Config/BatchDeleteHook"
	Config_UpdateHook_FullMethodName                         = "/pbcs.Config/UpdateHook"
	Config_ListHooks_FullMethodName                          = "/pbcs.Config/ListHooks"
	Config_ListHookTags_FullMethodName                       = "/pbcs.Config/ListHookTags"
	Config_GetHook_FullMethodName                            = "/pbcs.Config/GetHook"
	Config_CreateHookRevision_FullMethodName                 = "/pbcs.Config/CreateHookRevision"
	Config_ListHookRevisions_FullMethodName                  = "/pbcs.Config/ListHookRevisions"
	Config_DeleteHookRevision_FullMethodName                 = "/pbcs.Config/DeleteHookRevision"
	Config_PublishHookRevision_FullMethodName                = "/pbcs.Config/PublishHookRevision"
	Config_GetHookRevision_FullMethodName                    = "/pbcs.Config/GetHookRevision"
	Config_UpdateHookRevision_FullMethodName                 = "/pbcs.Config/UpdateHookRevision"
	Config_ListHookReferences_FullMethodName                 = "/pbcs.Config/ListHookReferences"
	Config_ListHookRevisionReferences_FullMethodName         = "/pbcs.Config/ListHookRevisionReferences"
	Config_GetReleaseHook_FullMethodName                     = "/pbcs.Config/GetReleaseHook"
	Config_CreateTemplateSpace_FullMethodName                = "/pbcs.Config/CreateTemplateSpace"
	Config_DeleteTemplateSpace_FullMethodName                = "/pbcs.Config/DeleteTemplateSpace"
	Config_UpdateTemplateSpace_FullMethodName                = "/pbcs.Config/UpdateTemplateSpace"
	Config_ListTemplateSpaces_FullMethodName                 = "/pbcs.Config/ListTemplateSpaces"
	Config_GetAllBizsOfTmplSpaces_FullMethodName             = "/pbcs.Config/GetAllBizsOfTmplSpaces"
	Config_CreateDefaultTmplSpace_FullMethodName             = "/pbcs.Config/CreateDefaultTmplSpace"
	Config_ListTmplSpacesByIDs_FullMethodName                = "/pbcs.Config/ListTmplSpacesByIDs"
	Config_CreateTemplate_FullMethodName                     = "/pbcs.Config/CreateTemplate"
	Config_DeleteTemplate_FullMethodName                     = "/pbcs.Config/DeleteTemplate"
	Config_BatchDeleteTemplate_FullMethodName                = "/pbcs.Config/BatchDeleteTemplate"
	Config_UpdateTemplate_FullMethodName                     = "/pbcs.Config/UpdateTemplate"
	Config_ListTemplates_FullMethodName                      = "/pbcs.Config/ListTemplates"
	Config_BatchUpsertTemplates_FullMethodName               = "/pbcs.Config/BatchUpsertTemplates"
	Config_BatchUpdateTemplatePermissions_FullMethodName     = "/pbcs.Config/BatchUpdateTemplatePermissions"
	Config_AddTmplsToTmplSets_FullMethodName                 = "/pbcs.Config/AddTmplsToTmplSets"
	Config_DeleteTmplsFromTmplSets_FullMethodName            = "/pbcs.Config/DeleteTmplsFromTmplSets"
	Config_ListTemplatesByIDs_FullMethodName                 = "/pbcs.Config/ListTemplatesByIDs"
	Config_ListTemplatesNotBound_FullMethodName              = "/pbcs.Config/ListTemplatesNotBound"
	Config_ListTemplateByTuple_FullMethodName                = "/pbcs.Config/ListTemplateByTuple"
	Config_ListTmplsOfTmplSet_FullMethodName                 = "/pbcs.Config/ListTmplsOfTmplSet"
	Config_ListTemplateSetsAndRevisions_FullMethodName       = "/pbcs.Config/ListTemplateSetsAndRevisions"
	Config_CreateTemplateRevision_FullMethodName             = "/pbcs.Config/CreateTemplateRevision"
	Config_UpdateTemplateRevision_FullMethodName             = "/pbcs.Config/UpdateTemplateRevision"
	Config_ListTemplateRevisions_FullMethodName              = "/pbcs.Config/ListTemplateRevisions"
	Config_GetTemplateRevision_FullMethodName                = "/pbcs.Config/GetTemplateRevision"
	Config_ListTemplateRevisionsByIDs_FullMethodName         = "/pbcs.Config/ListTemplateRevisionsByIDs"
	Config_ListTmplRevisionNamesByTmplIDs_FullMethodName     = "/pbcs.Config/ListTmplRevisionNamesByTmplIDs"
	Config_CreateTemplateSet_FullMethodName                  = "/pbcs.Config/CreateTemplateSet"
	Config_DeleteTemplateSet_FullMethodName                  = "/pbcs.Config/DeleteTemplateSet"
	Config_UpdateTemplateSet_FullMethodName                  = "/pbcs.Config/UpdateTemplateSet"
	Config_ListTemplateSets_FullMethodName                   = "/pbcs.Config/ListTemplateSets"
	Config_ListAppTemplateSets_FullMethodName                = "/pbcs.Config/ListAppTemplateSets"
	Config_ListTemplateSetsByIDs_FullMethodName              = "/pbcs.Config/ListTemplateSetsByIDs"
	Config_ListTmplSetsOfBiz_FullMethodName                  = "/pbcs.Config/ListTmplSetsOfBiz"
	Config_CreateAppTemplateBinding_FullMethodName           = "/pbcs.Config/CreateAppTemplateBinding"
	Config_DeleteAppTemplateBinding_FullMethodName           = "/pbcs.Config/DeleteAppTemplateBinding"
	Config_UpdateAppTemplateBinding_FullMethodName           = "/pbcs.Config/UpdateAppTemplateBinding"
	Config_ListAppTemplateBindings_FullMethodName            = "/pbcs.Config/ListAppTemplateBindings"
	Config_ListAppBoundTmplRevisions_FullMethodName          = "/pbcs.Config/ListAppBoundTmplRevisions"
	Config_ListReleasedAppBoundTmplRevisions_FullMethodName  = "/pbcs.Config/ListReleasedAppBoundTmplRevisions"
	Config_GetReleasedAppBoundTmplRevision_FullMethodName    = "/pbcs.Config/GetReleasedAppBoundTmplRevision"
	Config_UpdateAppBoundTmplRevisions_FullMethodName        = "/pbcs.Config/UpdateAppBoundTmplRevisions"
	Config_DeleteAppBoundTmplSets_FullMethodName             = "/pbcs.Config/DeleteAppBoundTmplSets"
	Config_RemoveAppBoundTmplSet_FullMethodName              = "/pbcs.Config/RemoveAppBoundTmplSet"
	Config_CheckAppTemplateBinding_FullMethodName            = "/pbcs.Config/CheckAppTemplateBinding"
	Config_ImportFromTemplateSetToApp_FullMethodName         = "/pbcs.Config/ImportFromTemplateSetToApp"
	Config_ListTmplBoundCounts_FullMethodName                = "/pbcs.Config/ListTmplBoundCounts"
	Config_ListTmplRevisionBoundCounts_FullMethodName        = "/pbcs.Config/ListTmplRevisionBoundCounts"
	Config_ListTmplSetBoundCounts_FullMethodName             = "/pbcs.Config/ListTmplSetBoundCounts"
	Config_ListTmplBoundUnnamedApps_FullMethodName           = "/pbcs.Config/ListTmplBoundUnnamedApps"
	Config_ListTmplBoundNamedApps_FullMethodName             = "/pbcs.Config/ListTmplBoundNamedApps"
	Config_ListTmplBoundTmplSets_FullMethodName              = "/pbcs.Config/ListTmplBoundTmplSets"
	Config_ListMultiTmplBoundTmplSets_FullMethodName         = "/pbcs.Config/ListMultiTmplBoundTmplSets"
	Config_ListTmplRevisionBoundUnnamedApps_FullMethodName   = "/pbcs.Config/ListTmplRevisionBoundUnnamedApps"
	Config_ListTmplRevisionBoundNamedApps_FullMethodName     = "/pbcs.Config/ListTmplRevisionBoundNamedApps"
	Config_ListTmplSetBoundUnnamedApps_FullMethodName        = "/pbcs.Config/ListTmplSetBoundUnnamedApps"
	Config_ListMultiTmplSetBoundUnnamedApps_FullMethodName   = "/pbcs.Config/ListMultiTmplSetBoundUnnamedApps"
	Config_CheckTemplateSetReferencesApps_FullMethodName     = "/pbcs.Config/CheckTemplateSetReferencesApps"
	Config_ListTmplSetBoundNamedApps_FullMethodName          = "/pbcs.Config/ListTmplSetBoundNamedApps"
	Config_ListLatestTmplBoundUnnamedApps_FullMethodName     = "/pbcs.Config/ListLatestTmplBoundUnnamedApps"
	Config_CreateTemplateVariable_FullMethodName             = "/pbcs.Config/CreateTemplateVariable"
	Config_DeleteTemplateVariable_FullMethodName             = "/pbcs.Config/DeleteTemplateVariable"
	Config_BatchDeleteTemplateVariable_FullMethodName        = "/pbcs.Config/BatchDeleteTemplateVariable"
	Config_UpdateTemplateVariable_FullMethodName             = "/pbcs.Config/UpdateTemplateVariable"
	Config_ListTemplateVariables_FullMethodName              = "/pbcs.Config/ListTemplateVariables"
	Config_ImportTemplateVariables_FullMethodName            = "/pbcs.Config/ImportTemplateVariables"
	Config_ImportOtherFormatTemplateVariables_FullMethodName = "/pbcs.Config/ImportOtherFormatTemplateVariables"
	Config_ExtractAppTmplVariables_FullMethodName            = "/pbcs.Config/ExtractAppTmplVariables"
	Config_GetAppTmplVariableRefs_FullMethodName             = "/pbcs.Config/GetAppTmplVariableRefs"
	Config_GetReleasedAppTmplVariableRefs_FullMethodName     = "/pbcs.Config/GetReleasedAppTmplVariableRefs"
	Config_UpdateAppTmplVariables_FullMethodName             = "/pbcs.Config/UpdateAppTmplVariables"
	Config_ListAppTmplVariables_FullMethodName               = "/pbcs.Config/ListAppTmplVariables"
	Config_ListReleasedAppTmplVariables_FullMethodName       = "/pbcs.Config/ListReleasedAppTmplVariables"
	Config_CreateGroup_FullMethodName                        = "/pbcs.Config/CreateGroup"
	Config_DeleteGroup_FullMethodName                        = "/pbcs.Config/DeleteGroup"
	Config_BatchDeleteGroups_FullMethodName                  = "/pbcs.Config/BatchDeleteGroups"
	Config_UpdateGroup_FullMethodName                        = "/pbcs.Config/UpdateGroup"
	Config_ListAllGroups_FullMethodName                      = "/pbcs.Config/ListAllGroups"
	Config_ListAppGroups_FullMethodName                      = "/pbcs.Config/ListAppGroups"
	Config_ListGroupReleasedApps_FullMethodName              = "/pbcs.Config/ListGroupReleasedApps"
	Config_GetGroupByName_FullMethodName                     = "/pbcs.Config/GetGroupByName"
	Config_Publish_FullMethodName                            = "/pbcs.Config/Publish"
	Config_GenerateReleaseAndPublish_FullMethodName          = "/pbcs.Config/GenerateReleaseAndPublish"
	Config_SubmitPublishApprove_FullMethodName               = "/pbcs.Config/SubmitPublishApprove"
	Config_Approve_FullMethodName                            = "/pbcs.Config/Approve"
	Config_GetLastSelect_FullMethodName                      = "/pbcs.Config/GetLastSelect"
	Config_GetLastPublish_FullMethodName                     = "/pbcs.Config/GetLastPublish"
	Config_GetReleasesStatus_FullMethodName                  = "/pbcs.Config/GetReleasesStatus"
	Config_ListAudits_FullMethodName                         = "/pbcs.Config/ListAudits"
	Config_CreateCredentials_FullMethodName                  = "/pbcs.Config/CreateCredentials"
	Config_ListCredentials_FullMethodName                    = "/pbcs.Config/ListCredentials"
	Config_DeleteCredential_FullMethodName                   = "/pbcs.Config/DeleteCredential"
	Config_UpdateCredential_FullMethodName                   = "/pbcs.Config/UpdateCredential"
	Config_CheckCredentialName_FullMethodName                = "/pbcs.Config/CheckCredentialName"
	Config_ListCredentialScopes_FullMethodName               = "/pbcs.Config/ListCredentialScopes"
	Config_UpdateCredentialScope_FullMethodName              = "/pbcs.Config/UpdateCredentialScope"
	Config_CredentialScopePreview_FullMethodName             = "/pbcs.Config/CredentialScopePreview"
	Config_CreateKv_FullMethodName                           = "/pbcs.Config/CreateKv"
	Config_UpdateKv_FullMethodName                           = "/pbcs.Config/UpdateKv"
	Config_ListKvs_FullMethodName                            = "/pbcs.Config/ListKvs"
	Config_DeleteKv_FullMethodName                           = "/pbcs.Config/DeleteKv"
	Config_BatchDeleteKv_FullMethodName                      = "/pbcs.Config/BatchDeleteKv"
	Config_BatchUpsertKvs_FullMethodName                     = "/pbcs.Config/BatchUpsertKvs"
	Config_UnDeleteKv_FullMethodName                         = "/pbcs.Config/UnDeleteKv"
	Config_BatchUnDeleteKv_FullMethodName                    = "/pbcs.Config/BatchUnDeleteKv"
	Config_UndoKv_FullMethodName                             = "/pbcs.Config/UndoKv"
	Config_ImportKvs_FullMethodName                          = "/pbcs.Config/ImportKvs"
	Config_FindNearExpiryCertKvs_FullMethodName              = "/pbcs.Config/FindNearExpiryCertKvs"
	Config_ListClients_FullMethodName                        = "/pbcs.Config/ListClients"
	Config_ListClientEvents_FullMethodName                   = "/pbcs.Config/ListClientEvents"
	Config_RetryClients_FullMethodName                       = "/pbcs.Config/RetryClients"
	Config_ListClientQuerys_FullMethodName                   = "/pbcs.Config/ListClientQuerys"
	Config_CreateClientQuery_FullMethodName                  = "/pbcs.Config/CreateClientQuery"
	Config_UpdateClientQuery_FullMethodName                  = "/pbcs.Config/UpdateClientQuery"
	Config_DeleteClientQuery_FullMethodName                  = "/pbcs.Config/DeleteClientQuery"
	Config_CheckClientQueryName_FullMethodName               = "/pbcs.Config/CheckClientQueryName"
	Config_ClientConfigVersionStatistics_FullMethodName      = "/pbcs.Config/ClientConfigVersionStatistics"
	Config_ClientPullTrendStatistics_FullMethodName          = "/pbcs.Config/ClientPullTrendStatistics"
	Config_ClientPullStatistics_FullMethodName               = "/pbcs.Config/ClientPullStatistics"
	Config_ClientLabelStatistics_FullMethodName              = "/pbcs.Config/ClientLabelStatistics"
	Config_ClientAnnotationStatistics_FullMethodName         = "/pbcs.Config/ClientAnnotationStatistics"
	Config_ClientVersionStatistics_FullMethodName            = "/pbcs.Config/ClientVersionStatistics"
	Config_ListClientLabelAndAnnotation_FullMethodName       = "/pbcs.Config/ListClientLabelAndAnnotation"
	Config_ClientSpecificFailedReason_FullMethodName         = "/pbcs.Config/ClientSpecificFailedReason"
	Config_CompareConfigItemConflicts_FullMethodName         = "/pbcs.Config/CompareConfigItemConflicts"
	Config_CompareKvConflicts_FullMethodName                 = "/pbcs.Config/CompareKvConflicts"
	Config_GetTemplateAndNonTemplateCICount_FullMethodName   = "/pbcs.Config/GetTemplateAndNonTemplateCICount"
)

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	//  创建服务
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	// 更新服务
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*app.App, error)
	// 删除服务
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	// 获取服务
	GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error)
	// 按服务名称获取
	GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error)
	// 获取用户有权限的 spaces 所有的 apps
	ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	// 按 space 查询 app 信息
	ListAppsBySpaceRest(ctx context.Context, in *ListAppsBySpaceRestReq, opts ...grpc.CallOption) (*ListAppsResp, error)
	// 创建文件配置项
	CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateConfigItemResp, error)
	// 批量创建或更新文件配置项
	BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*BatchUpsertConfigItemsResp, error)
	// 更新文件配置项
	UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*UpdateConfigItemResp, error)
	// 删除文件配置项
	DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*DeleteConfigItemResp, error)
	// 批量删除文件配置项
	BatchDeleteConfigItems(ctx context.Context, in *BatchDeleteAppResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error)
	// 恢复文件配置项
	UnDeleteConfigItem(ctx context.Context, in *UnDeleteConfigItemReq, opts ...grpc.CallOption) (*UnDeleteConfigItemResp, error)
	// 批量恢复文件配置项
	BatchUnDeleteConfigItem(ctx context.Context, in *BatchUnDeleteConfigItemReq, opts ...grpc.CallOption) (*BatchUnDeleteConfigItemResp, error)
	// 撤销文件配置项
	UndoConfigItem(ctx context.Context, in *UndoConfigItemReq, opts ...grpc.CallOption) (*UndoConfigItemResp, error)
	// 获取文件配置项
	GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*GetConfigItemResp, error)
	// 获取已发布文件配置项
	GetReleasedConfigItem(ctx context.Context, in *GetReleasedConfigItemReq, opts ...grpc.CallOption) (*GetReleasedConfigItemResp, error)
	// 获取文件配置项列表
	ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error)
	// 获取已发布文件配置项列表
	ListReleasedConfigItems(ctx context.Context, in *ListReleasedConfigItemsReq, opts ...grpc.CallOption) (*ListReleasedConfigItemsResp, error)
	// 获取文件型服务配置数量列表
	ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error)
	// 按绝对路径获取文件配置项列表
	ListConfigItemByTuple(ctx context.Context, in *ListConfigItemByTupleReq, opts ...grpc.CallOption) (*ListConfigItemByTupleResp, error)
	// 获取已生成版本键值配置项
	GetReleasedKv(ctx context.Context, in *GetReleasedKvReq, opts ...grpc.CallOption) (*GetReleasedKvResp, error)
	// 获取已生成版本键值配置项列表
	ListReleasedKvs(ctx context.Context, in *ListReleasedKvsReq, opts ...grpc.CallOption) (*ListReleasedKvsResp, error)
	// 引用前后置脚本
	UpdateConfigHook(ctx context.Context, in *UpdateConfigHookReq, opts ...grpc.CallOption) (*UpdateConfigHookResp, error)
	// 生成配置服务版本
	CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error)
	// 获取服务版本列表
	ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error)
	// 按服务版本名
	GetReleaseByName(ctx context.Context, in *GetReleaseByNameReq, opts ...grpc.CallOption) (*release.Release, error)
	// 获取服务版本
	GetRelease(ctx context.Context, in *GetReleaseReq, opts ...grpc.CallOption) (*release.Release, error)
	// 废弃服务版本
	DeprecateRelease(ctx context.Context, in *DeprecateReleaseReq, opts ...grpc.CallOption) (*DeprecateReleaseResp, error)
	// 撤回废弃服务版本
	UnDeprecateRelease(ctx context.Context, in *UnDeprecateReleaseReq, opts ...grpc.CallOption) (*UnDeprecateReleaseResp, error)
	// 删除服务版本
	DeleteRelease(ctx context.Context, in *DeleteReleaseReq, opts ...grpc.CallOption) (*DeleteReleaseResp, error)
	// 检测服务版本名
	CheckReleaseName(ctx context.Context, in *CheckReleaseNameReq, opts ...grpc.CallOption) (*CheckReleaseNameResp, error)
	// 创建脚本
	CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateHookResp, error)
	// 删除脚本
	DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*DeleteHookResp, error)
	// 批量删除脚本
	BatchDeleteHook(ctx context.Context, in *BatchDeleteHookReq, opts ...grpc.CallOption) (*BatchDeleteResp, error)
	// 更新脚本
	UpdateHook(ctx context.Context, in *UpdateHookReq, opts ...grpc.CallOption) (*UpdateHookResp, error)
	// 获取脚本列表
	ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error)
	// 获取脚本标签列表
	ListHookTags(ctx context.Context, in *ListHookTagsReq, opts ...grpc.CallOption) (*ListHookTagsResp, error)
	// 获取脚本
	GetHook(ctx context.Context, in *GetHookReq, opts ...grpc.CallOption) (*GetHookResp, error)
	// 创建脚本版本
	CreateHookRevision(ctx context.Context, in *CreateHookRevisionReq, opts ...grpc.CallOption) (*CreateHookRevisionResp, error)
	// 获取脚本版本列表
	ListHookRevisions(ctx context.Context, in *ListHookRevisionsReq, opts ...grpc.CallOption) (*ListHookRevisionsResp, error)
	// 删除骄傲本版本
	DeleteHookRevision(ctx context.Context, in *DeleteHookRevisionReq, opts ...grpc.CallOption) (*DeleteHookRevisionResp, error)
	// 上线脚本版本
	PublishHookRevision(ctx context.Context, in *PublishHookRevisionReq, opts ...grpc.CallOption) (*PublishHookRevisionResp, error)
	// 获取脚本版本
	GetHookRevision(ctx context.Context, in *GetHookRevisionReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error)
	// 更新脚本版本
	UpdateHookRevision(ctx context.Context, in *UpdateHookRevisionReq, opts ...grpc.CallOption) (*UpdateHookRevisionResp, error)
	// 获取被引用的脚本配置服务列表
	ListHookReferences(ctx context.Context, in *ListHookReferencesReq, opts ...grpc.CallOption) (*ListHookReferencesResp, error)
	// 获取被引用的脚本版本配置服务列表
	ListHookRevisionReferences(ctx context.Context, in *ListHookRevisionReferencesReq, opts ...grpc.CallOption) (*ListHookRevisionReferencesResp, error)
	// TODO
	GetReleaseHook(ctx context.Context, in *GetReleaseHookReq, opts ...grpc.CallOption) (*GetReleaseHookResp, error)
	// 创建模板空间
	CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateTemplateSpaceResp, error)
	// 删除模板空间
	DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*DeleteTemplateSpaceResp, error)
	// 更新模板空间
	UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*UpdateTemplateSpaceResp, error)
	// 获取模板空间列表
	ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error)
	// GetAllBizsOfTmplSpaces called only by system itself
	GetAllBizsOfTmplSpaces(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*GetAllBizsOfTmplSpacesResp, error)
	// 创建模板默认空间(仅由系统本身调用)
	CreateDefaultTmplSpace(ctx context.Context, in *CreateDefaultTmplSpaceReq, opts ...grpc.CallOption) (*CreateDefaultTmplSpaceResp, error)
	ListTmplSpacesByIDs(ctx context.Context, in *ListTmplSpacesByIDsReq, opts ...grpc.CallOption) (*ListTmplSpacesByIDsResp, error)
	// 创建模板
	CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateTemplateResp, error)
	// 删除模板
	DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*DeleteTemplateResp, error)
	// 批量删除模板
	BatchDeleteTemplate(ctx context.Context, in *BatchDeleteTemplateReq, opts ...grpc.CallOption) (*BatchDeleteTemplateResp, error)
	// 更新模板
	UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*UpdateTemplateResp, error)
	// 获取模板列表(全部配置文件)
	ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error)
	// 批量创建或更新模板
	BatchUpsertTemplates(ctx context.Context, in *BatchUpsertTemplatesReq, opts ...grpc.CallOption) (*BatchUpsertTemplatesResp, error)
	// 批量更新模板权限
	BatchUpdateTemplatePermissions(ctx context.Context, in *BatchUpdateTemplatePermissionsReq, opts ...grpc.CallOption) (*BatchUpdateTemplatePermissionsResp, error)
	// 添加至模板套餐中
	AddTmplsToTmplSets(ctx context.Context, in *AddTmplsToTmplSetsReq, opts ...grpc.CallOption) (*AddTmplsToTmplSetsResp, error)
	// 从模板套餐中移出
	DeleteTmplsFromTmplSets(ctx context.Context, in *DeleteTmplsFromTmplSetsReq, opts ...grpc.CallOption) (*BatchDeleteResp, error)
	// 按模板ID获取模板列表
	ListTemplatesByIDs(ctx context.Context, in *ListTemplatesByIDsReq, opts ...grpc.CallOption) (*ListTemplatesByIDsResp, error)
	// 获取未绑定的模板列表
	ListTemplatesNotBound(ctx context.Context, in *ListTemplatesNotBoundReq, opts ...grpc.CallOption) (*ListTemplatesNotBoundResp, error)
	// 按模板绝对路径获取模板列表
	ListTemplateByTuple(ctx context.Context, in *ListTemplateByTupleReq, opts ...grpc.CallOption) (*ListTemplateByTupleResp, error)
	// 按模板套餐获取模板列表
	ListTmplsOfTmplSet(ctx context.Context, in *ListTmplsOfTmplSetReq, opts ...grpc.CallOption) (*ListTmplsOfTmplSetResp, error)
	// 获取模板套餐下的所有版本列表
	ListTemplateSetsAndRevisions(ctx context.Context, in *ListTemplateSetsAndRevisionsReq, opts ...grpc.CallOption) (*ListTemplateSetsAndRevisionsResp, error)
	// 创建模板版本
	CreateTemplateRevision(ctx context.Context, in *CreateTemplateRevisionReq, opts ...grpc.CallOption) (*CreateTemplateRevisionResp, error)
	// 更新模板版本
	UpdateTemplateRevision(ctx context.Context, in *UpdateTemplateRevisionReq, opts ...grpc.CallOption) (*UpdateTemplateRevisionResp, error)
	// 获取模板版本列表
	ListTemplateRevisions(ctx context.Context, in *ListTemplateRevisionsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsResp, error)
	// 获取模板版本
	GetTemplateRevision(ctx context.Context, in *GetTemplateRevisionReq, opts ...grpc.CallOption) (*GetTemplateRevisionResp, error)
	// 按模板版本ID获取模板版本列表
	ListTemplateRevisionsByIDs(ctx context.Context, in *ListTemplateRevisionsByIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsByIDsResp, error)
	// 按模板ID获取模板版本列表
	ListTmplRevisionNamesByTmplIDs(ctx context.Context, in *ListTmplRevisionNamesByTmplIDsReq, opts ...grpc.CallOption) (*ListTmplRevisionNamesByTmplIDsResp, error)
	// 创建模板套餐
	CreateTemplateSet(ctx context.Context, in *CreateTemplateSetReq, opts ...grpc.CallOption) (*CreateTemplateSetResp, error)
	// 删除模板套餐
	DeleteTemplateSet(ctx context.Context, in *DeleteTemplateSetReq, opts ...grpc.CallOption) (*DeleteTemplateSetResp, error)
	// 更新模板套餐
	UpdateTemplateSet(ctx context.Context, in *UpdateTemplateSetReq, opts ...grpc.CallOption) (*UpdateTemplateSetResp, error)
	// 获取模板套餐列表
	ListTemplateSets(ctx context.Context, in *ListTemplateSetsReq, opts ...grpc.CallOption) (*ListTemplateSetsResp, error)
	// 获取模板套餐列表
	ListAppTemplateSets(ctx context.Context, in *ListAppTemplateSetsReq, opts ...grpc.CallOption) (*ListAppTemplateSetsResp, error)
	// 按模板套餐ID获取模板套餐列表
	ListTemplateSetsByIDs(ctx context.Context, in *ListTemplateSetsByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetsByIDsResp, error)
	// 按服务ID获取模板套餐列表
	ListTmplSetsOfBiz(ctx context.Context, in *ListTmplSetsOfBizReq, opts ...grpc.CallOption) (*ListTmplSetsOfBizResp, error)
	// 创建绑定服务的模板(暂无用到)
	CreateAppTemplateBinding(ctx context.Context, in *CreateAppTemplateBindingReq, opts ...grpc.CallOption) (*CreateAppTemplateBindingResp, error)
	// 删除绑定服务的模板
	DeleteAppTemplateBinding(ctx context.Context, in *DeleteAppTemplateBindingReq, opts ...grpc.CallOption) (*DeleteAppTemplateBindingResp, error)
	// 更新绑定服务的模板
	UpdateAppTemplateBinding(ctx context.Context, in *UpdateAppTemplateBindingReq, opts ...grpc.CallOption) (*UpdateAppTemplateBindingResp, error)
	// 按服务获取绑定的模板列表
	ListAppTemplateBindings(ctx context.Context, in *ListAppTemplateBindingsReq, opts ...grpc.CallOption) (*ListAppTemplateBindingsResp, error)
	// 按未命名版本服务获取绑定的模板版本列表
	ListAppBoundTmplRevisions(ctx context.Context, in *ListAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListAppBoundTmplRevisionsResp, error)
	// 按已发布版本服务获取绑定的模板版本列表
	ListReleasedAppBoundTmplRevisions(ctx context.Context, in *ListReleasedAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListReleasedAppBoundTmplRevisionsResp, error)
	// 查看已发布版本服务的模板版本详情
	GetReleasedAppBoundTmplRevision(ctx context.Context, in *GetReleasedAppBoundTmplRevisionReq, opts ...grpc.CallOption) (*GetReleasedAppBoundTmplRevisionResp, error)
	// 替换服务引用后的模板版本
	UpdateAppBoundTmplRevisions(ctx context.Context, in *UpdateAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*UpdateAppBoundTmplRevisionsResp, error)
	// 移除服务引用的模板套餐(暂未用到)
	DeleteAppBoundTmplSets(ctx context.Context, in *DeleteAppBoundTmplSetsReq, opts ...grpc.CallOption) (*DeleteAppBoundTmplSetsResp, error)
	// 移除服务引用的模板套餐
	RemoveAppBoundTmplSet(ctx context.Context, in *RemoveAppBoundTmplSetReq, opts ...grpc.CallOption) (*RemoveAppBoundTmplSetResp, error)
	// 检测服务绑定的模板套餐
	CheckAppTemplateBinding(ctx context.Context, in *CheckAppTemplateBindingReq, opts ...grpc.CallOption) (*CheckAppTemplateBindingResp, error)
	// 配置服务引用模版套餐
	ImportFromTemplateSetToApp(ctx context.Context, in *ImportFromTemplateSetToAppReq, opts ...grpc.CallOption) (*ImportFromTemplateSetToAppResp, error)
	// 获取模板绑定服务数列表
	ListTmplBoundCounts(ctx context.Context, in *ListTmplBoundCountsReq, opts ...grpc.CallOption) (*ListTmplBoundCountsResp, error)
	// 获取模板版本绑定服务数列表
	ListTmplRevisionBoundCounts(ctx context.Context, in *ListTmplRevisionBoundCountsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundCountsResp, error)
	// 获取模板套餐绑定服务数列表
	ListTmplSetBoundCounts(ctx context.Context, in *ListTmplSetBoundCountsReq, opts ...grpc.CallOption) (*ListTmplSetBoundCountsResp, error)
	// 获取模板绑定的服务列表
	ListTmplBoundUnnamedApps(ctx context.Context, in *ListTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundUnnamedAppsResp, error)
	// 获取模板绑定的服务以及模板版本列表
	ListTmplBoundNamedApps(ctx context.Context, in *ListTmplBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundNamedAppsResp, error)
	// 获取服务绑定的模板套餐列表
	ListTmplBoundTmplSets(ctx context.Context, in *ListTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListTmplBoundTmplSetsResp, error)
	// 获取服务绑定的模板套餐以及模板列表
	ListMultiTmplBoundTmplSets(ctx context.Context, in *ListMultiTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListMultiTmplBoundTmplSetsResp, error)
	// 按模板版本获取绑定的未命名版本服务列表
	ListTmplRevisionBoundUnnamedApps(ctx context.Context, in *ListTmplRevisionBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundUnnamedAppsResp, error)
	// 按模板版本获取绑定的已命名版本服务列表
	ListTmplRevisionBoundNamedApps(ctx context.Context, in *ListTmplRevisionBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundNamedAppsResp, error)
	// 按模板套餐获取绑定的未命名版本服务列表
	ListTmplSetBoundUnnamedApps(ctx context.Context, in *ListTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundUnnamedAppsResp, error)
	// 按多模板套餐获取绑定的未命名版本服务列表
	ListMultiTmplSetBoundUnnamedApps(ctx context.Context, in *ListMultiTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListMultiTmplSetBoundUnnamedAppsResp, error)
	// 检测模板套餐引用的服务
	CheckTemplateSetReferencesApps(ctx context.Context, in *CheckTemplateSetReferencesAppsReq, opts ...grpc.CallOption) (*CheckTemplateSetReferencesAppsResp, error)
	// 按模板套餐获取绑定的已命名版本服务列表
	ListTmplSetBoundNamedApps(ctx context.Context, in *ListTmplSetBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundNamedAppsResp, error)
	// 按最新的模板版本获取未命名版本服务列表
	ListLatestTmplBoundUnnamedApps(ctx context.Context, in *ListLatestTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListLatestTmplBoundUnnamedAppsResp, error)
	// 创建模板变量
	CreateTemplateVariable(ctx context.Context, in *CreateTemplateVariableReq, opts ...grpc.CallOption) (*CreateTemplateVariableResp, error)
	// 删除模板变量
	DeleteTemplateVariable(ctx context.Context, in *DeleteTemplateVariableReq, opts ...grpc.CallOption) (*DeleteTemplateVariableResp, error)
	// 批量删除模板变量
	BatchDeleteTemplateVariable(ctx context.Context, in *BatchDeleteBizResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error)
	// 更新模板变量
	UpdateTemplateVariable(ctx context.Context, in *UpdateTemplateVariableReq, opts ...grpc.CallOption) (*UpdateTemplateVariableResp, error)
	// 获取模板变量列表
	ListTemplateVariables(ctx context.Context, in *ListTemplateVariablesReq, opts ...grpc.CallOption) (*ListTemplateVariablesResp, error)
	// 批量导入简单文件模板变量
	ImportTemplateVariables(ctx context.Context, in *ImportTemplateVariablesReq, opts ...grpc.CallOption) (*ImportTemplateVariablesResp, error)
	ImportOtherFormatTemplateVariables(ctx context.Context, in *ImportOtherFormatTemplateVariablesReq, opts ...grpc.CallOption) (*ImportOtherFormatTemplateVariablesResp, error)
	// 提取模板变量
	ExtractAppTmplVariables(ctx context.Context, in *ExtractAppTmplVariablesReq, opts ...grpc.CallOption) (*ExtractAppTmplVariablesResp, error)
	// 获取未命名服务版本被引用的变量
	GetAppTmplVariableRefs(ctx context.Context, in *GetAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetAppTmplVariableRefsResp, error)
	// 获取服务版本下被引用的变量
	GetReleasedAppTmplVariableRefs(ctx context.Context, in *GetReleasedAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetReleasedAppTmplVariableRefsResp, error)
	// 更新未命名服务版本变量
	UpdateAppTmplVariables(ctx context.Context, in *UpdateAppTmplVariablesReq, opts ...grpc.CallOption) (*UpdateAppTmplVariablesResp, error)
	// 获取未命名服务版本模板变量
	ListAppTmplVariables(ctx context.Context, in *ListAppTmplVariablesReq, opts ...grpc.CallOption) (*ListAppTmplVariablesResp, error)
	// 获取服务版本的模板变量列表
	ListReleasedAppTmplVariables(ctx context.Context, in *ListReleasedAppTmplVariablesReq, opts ...grpc.CallOption) (*ListReleasedAppTmplVariablesResp, error)
	// 创建分组
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// 删除分组
	DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
	// 批量删除分组
	BatchDeleteGroups(ctx context.Context, in *BatchDeleteBizResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error)
	// 更新分组
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
	// 获取所有分组列表
	ListAllGroups(ctx context.Context, in *ListAllGroupsReq, opts ...grpc.CallOption) (*ListAllGroupsResp, error)
	// 按服务获取分组
	ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error)
	// 按分组获取服务
	ListGroupReleasedApps(ctx context.Context, in *ListGroupReleasedAppsReq, opts ...grpc.CallOption) (*ListGroupReleasedAppsResp, error)
	// 按名称获取分组
	GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*group.Group, error)
	// 发布服务版本
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	// 生成新的服务版本并发布
	GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	// 上线服务版本
	SubmitPublishApprove(ctx context.Context, in *SubmitPublishApproveReq, opts ...grpc.CallOption) (*PublishResp, error)
	Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*ApproveResp, error)
	GetLastSelect(ctx context.Context, in *GetLastSelectReq, opts ...grpc.CallOption) (*GetLastSelectResp, error)
	GetLastPublish(ctx context.Context, in *GetLastPublishReq, opts ...grpc.CallOption) (*GetLastPublishResp, error)
	GetReleasesStatus(ctx context.Context, in *GetReleasesStatusReq, opts ...grpc.CallOption) (*strategy.Strategy, error)
	ListAudits(ctx context.Context, in *ListAuditsReq, opts ...grpc.CallOption) (*ListAuditsResp, error)
	// 创建客户端密钥
	CreateCredentials(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateCredentialResp, error)
	// 获取客户端密钥
	ListCredentials(ctx context.Context, in *ListCredentialsReq, opts ...grpc.CallOption) (*ListCredentialsResp, error)
	// 删除客户端密钥
	DeleteCredential(ctx context.Context, in *DeleteCredentialsReq, opts ...grpc.CallOption) (*DeleteCredentialsResp, error)
	// 更新客户端密钥
	UpdateCredential(ctx context.Context, in *UpdateCredentialsReq, opts ...grpc.CallOption) (*UpdateCredentialsResp, error)
	// 检测客户端密钥名称
	CheckCredentialName(ctx context.Context, in *CheckCredentialNameReq, opts ...grpc.CallOption) (*CheckCredentialNameResp, error)
	// 获取客户端密钥关联服务的列表
	ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error)
	// 更新客户端密钥关联服务规则
	UpdateCredentialScope(ctx context.Context, in *UpdateCredentialScopeReq, opts ...grpc.CallOption) (*UpdateCredentialScopeResp, error)
	// 预览客户端密钥关联配置项
	CredentialScopePreview(ctx context.Context, in *CredentialScopePreviewReq, opts ...grpc.CallOption) (*CredentialScopePreviewResp, error)
	// 创建键值配置项
	CreateKv(ctx context.Context, in *CreateKvReq, opts ...grpc.CallOption) (*CreateKvResp, error)
	// 更新键值配置项
	UpdateKv(ctx context.Context, in *UpdateKvReq, opts ...grpc.CallOption) (*UpdateKvResp, error)
	// 获取键值配置项列表
	ListKvs(ctx context.Context, in *ListKvsReq, opts ...grpc.CallOption) (*ListKvsResp, error)
	// 删除键值配置项
	DeleteKv(ctx context.Context, in *DeleteKvReq, opts ...grpc.CallOption) (*DeleteKvResp, error)
	// 批量删除键值配置项
	BatchDeleteKv(ctx context.Context, in *BatchDeleteAppResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error)
	// 批量创建或更新键值配置项
	BatchUpsertKvs(ctx context.Context, in *BatchUpsertKvsReq, opts ...grpc.CallOption) (*BatchUpsertKvsResp, error)
	// 恢复键值配置项
	UnDeleteKv(ctx context.Context, in *UnDeleteKvReq, opts ...grpc.CallOption) (*UnDeleteKvResp, error)
	// 批量恢复键值配置项
	BatchUnDeleteKv(ctx context.Context, in *BatchUnDeleteKvReq, opts ...grpc.CallOption) (*BatchUnDeleteKvResp, error)
	// 撤销修改的键值配置项
	UndoKv(ctx context.Context, in *UndoKvReq, opts ...grpc.CallOption) (*UndoKvResp, error)
	// 批量导出文本格式键值配置项
	ImportKvs(ctx context.Context, in *ImportKvsReq, opts ...grpc.CallOption) (*ImportKvsResp, error)
	// 查找临近到期证书
	FindNearExpiryCertKvs(ctx context.Context, in *FindNearExpiryCertKvsReq, opts ...grpc.CallOption) (*FindNearExpiryCertKvsResp, error)
	// 获取客户端列表
	ListClients(ctx context.Context, in *ListClientsReq, opts ...grpc.CallOption) (*ListClientsResp, error)
	// 获取客户端拉取记录列表
	ListClientEvents(ctx context.Context, in *ListClientEventsReq, opts ...grpc.CallOption) (*ListClientEventsResp, error)
	// 重试客户端拉取
	RetryClients(ctx context.Context, in *RetryClientsReq, opts ...grpc.CallOption) (*RetryClientsResp, error)
	// 获取客户端查询条件列表
	ListClientQuerys(ctx context.Context, in *ListClientQuerysReq, opts ...grpc.CallOption) (*ListClientQuerysResp, error)
	// 创建客户端查询条件
	CreateClientQuery(ctx context.Context, in *CreateClientQueryReq, opts ...grpc.CallOption) (*CreateClientQueryResp, error)
	// 更新客户端查询条件
	UpdateClientQuery(ctx context.Context, in *UpdateClientQueryReq, opts ...grpc.CallOption) (*UpdateClientQueryResp, error)
	// 删除客户端查询条件
	DeleteClientQuery(ctx context.Context, in *DeleteClientQueryReq, opts ...grpc.CallOption) (*DeleteClientQueryResp, error)
	// 检测客户端查询条件名
	CheckClientQueryName(ctx context.Context, in *CheckClientQueryNameReq, opts ...grpc.CallOption) (*CheckClientQueryNameResp, error)
	// 客户端配置版本统计
	ClientConfigVersionStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 客户端拉取趋势统计
	ClientPullTrendStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 客户端拉取状态统计
	ClientPullStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 客户端标签统计
	ClientLabelStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 客户端附加信息统计
	ClientAnnotationStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 客户端组件版本统计
	ClientVersionStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 获取客户端标签和附加信息列表
	ListClientLabelAndAnnotation(ctx context.Context, in *ListClientLabelAndAnnotationReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 获取客户端失败原因
	ClientSpecificFailedReason(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error)
	// 文件服务以及和其他服务版本之间对比
	CompareConfigItemConflicts(ctx context.Context, in *CompareConfigItemConflictsReq, opts ...grpc.CallOption) (*CompareConfigItemConflictsResp, error)
	// 键值服务以及和其他服务版本之间对比
	CompareKvConflicts(ctx context.Context, in *CompareKvConflictsReq, opts ...grpc.CallOption) (*CompareKvConflictsResp, error)
	// 获取模板和非模板配置项数量
	GetTemplateAndNonTemplateCICount(ctx context.Context, in *GetTemplateAndNonTemplateCICountReq, opts ...grpc.CallOption) (*GetTemplateAndNonTemplateCICountResp, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := c.cc.Invoke(ctx, Config_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Config_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := c.cc.Invoke(ctx, Config_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetApp(ctx context.Context, in *GetAppReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Config_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAppByName(ctx context.Context, in *GetAppByNameReq, opts ...grpc.CallOption) (*app.App, error) {
	out := new(app.App)
	err := c.cc.Invoke(ctx, Config_GetAppByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppsRest(ctx context.Context, in *ListAppsRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Config_ListAppsRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppsBySpaceRest(ctx context.Context, in *ListAppsBySpaceRestReq, opts ...grpc.CallOption) (*ListAppsResp, error) {
	out := new(ListAppsResp)
	err := c.cc.Invoke(ctx, Config_ListAppsBySpaceRest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateConfigItem(ctx context.Context, in *CreateConfigItemReq, opts ...grpc.CallOption) (*CreateConfigItemResp, error) {
	out := new(CreateConfigItemResp)
	err := c.cc.Invoke(ctx, Config_CreateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUpsertConfigItems(ctx context.Context, in *BatchUpsertConfigItemsReq, opts ...grpc.CallOption) (*BatchUpsertConfigItemsResp, error) {
	out := new(BatchUpsertConfigItemsResp)
	err := c.cc.Invoke(ctx, Config_BatchUpsertConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfigItem(ctx context.Context, in *UpdateConfigItemReq, opts ...grpc.CallOption) (*UpdateConfigItemResp, error) {
	out := new(UpdateConfigItemResp)
	err := c.cc.Invoke(ctx, Config_UpdateConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteConfigItem(ctx context.Context, in *DeleteConfigItemReq, opts ...grpc.CallOption) (*DeleteConfigItemResp, error) {
	out := new(DeleteConfigItemResp)
	err := c.cc.Invoke(ctx, Config_DeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteConfigItems(ctx context.Context, in *BatchDeleteAppResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error) {
	out := new(BatchDeleteResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UnDeleteConfigItem(ctx context.Context, in *UnDeleteConfigItemReq, opts ...grpc.CallOption) (*UnDeleteConfigItemResp, error) {
	out := new(UnDeleteConfigItemResp)
	err := c.cc.Invoke(ctx, Config_UnDeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUnDeleteConfigItem(ctx context.Context, in *BatchUnDeleteConfigItemReq, opts ...grpc.CallOption) (*BatchUnDeleteConfigItemResp, error) {
	out := new(BatchUnDeleteConfigItemResp)
	err := c.cc.Invoke(ctx, Config_BatchUnDeleteConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UndoConfigItem(ctx context.Context, in *UndoConfigItemReq, opts ...grpc.CallOption) (*UndoConfigItemResp, error) {
	out := new(UndoConfigItemResp)
	err := c.cc.Invoke(ctx, Config_UndoConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetConfigItem(ctx context.Context, in *GetConfigItemReq, opts ...grpc.CallOption) (*GetConfigItemResp, error) {
	out := new(GetConfigItemResp)
	err := c.cc.Invoke(ctx, Config_GetConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleasedConfigItem(ctx context.Context, in *GetReleasedConfigItemReq, opts ...grpc.CallOption) (*GetReleasedConfigItemResp, error) {
	out := new(GetReleasedConfigItemResp)
	err := c.cc.Invoke(ctx, Config_GetReleasedConfigItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListConfigItems(ctx context.Context, in *ListConfigItemsReq, opts ...grpc.CallOption) (*ListConfigItemsResp, error) {
	out := new(ListConfigItemsResp)
	err := c.cc.Invoke(ctx, Config_ListConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleasedConfigItems(ctx context.Context, in *ListReleasedConfigItemsReq, opts ...grpc.CallOption) (*ListReleasedConfigItemsResp, error) {
	out := new(ListReleasedConfigItemsResp)
	err := c.cc.Invoke(ctx, Config_ListReleasedConfigItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListConfigItemCount(ctx context.Context, in *ListConfigItemCountReq, opts ...grpc.CallOption) (*ListConfigItemCountResp, error) {
	out := new(ListConfigItemCountResp)
	err := c.cc.Invoke(ctx, Config_ListConfigItemCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListConfigItemByTuple(ctx context.Context, in *ListConfigItemByTupleReq, opts ...grpc.CallOption) (*ListConfigItemByTupleResp, error) {
	out := new(ListConfigItemByTupleResp)
	err := c.cc.Invoke(ctx, Config_ListConfigItemByTuple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleasedKv(ctx context.Context, in *GetReleasedKvReq, opts ...grpc.CallOption) (*GetReleasedKvResp, error) {
	out := new(GetReleasedKvResp)
	err := c.cc.Invoke(ctx, Config_GetReleasedKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleasedKvs(ctx context.Context, in *ListReleasedKvsReq, opts ...grpc.CallOption) (*ListReleasedKvsResp, error) {
	out := new(ListReleasedKvsResp)
	err := c.cc.Invoke(ctx, Config_ListReleasedKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfigHook(ctx context.Context, in *UpdateConfigHookReq, opts ...grpc.CallOption) (*UpdateConfigHookResp, error) {
	out := new(UpdateConfigHookResp)
	err := c.cc.Invoke(ctx, Config_UpdateConfigHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateRelease(ctx context.Context, in *CreateReleaseReq, opts ...grpc.CallOption) (*CreateReleaseResp, error) {
	out := new(CreateReleaseResp)
	err := c.cc.Invoke(ctx, Config_CreateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleases(ctx context.Context, in *ListReleasesReq, opts ...grpc.CallOption) (*ListReleasesResp, error) {
	out := new(ListReleasesResp)
	err := c.cc.Invoke(ctx, Config_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleaseByName(ctx context.Context, in *GetReleaseByNameReq, opts ...grpc.CallOption) (*release.Release, error) {
	out := new(release.Release)
	err := c.cc.Invoke(ctx, Config_GetReleaseByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetRelease(ctx context.Context, in *GetReleaseReq, opts ...grpc.CallOption) (*release.Release, error) {
	out := new(release.Release)
	err := c.cc.Invoke(ctx, Config_GetRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeprecateRelease(ctx context.Context, in *DeprecateReleaseReq, opts ...grpc.CallOption) (*DeprecateReleaseResp, error) {
	out := new(DeprecateReleaseResp)
	err := c.cc.Invoke(ctx, Config_DeprecateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UnDeprecateRelease(ctx context.Context, in *UnDeprecateReleaseReq, opts ...grpc.CallOption) (*UnDeprecateReleaseResp, error) {
	out := new(UnDeprecateReleaseResp)
	err := c.cc.Invoke(ctx, Config_UnDeprecateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteRelease(ctx context.Context, in *DeleteReleaseReq, opts ...grpc.CallOption) (*DeleteReleaseResp, error) {
	out := new(DeleteReleaseResp)
	err := c.cc.Invoke(ctx, Config_DeleteRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CheckReleaseName(ctx context.Context, in *CheckReleaseNameReq, opts ...grpc.CallOption) (*CheckReleaseNameResp, error) {
	out := new(CheckReleaseNameResp)
	err := c.cc.Invoke(ctx, Config_CheckReleaseName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateHook(ctx context.Context, in *CreateHookReq, opts ...grpc.CallOption) (*CreateHookResp, error) {
	out := new(CreateHookResp)
	err := c.cc.Invoke(ctx, Config_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteHook(ctx context.Context, in *DeleteHookReq, opts ...grpc.CallOption) (*DeleteHookResp, error) {
	out := new(DeleteHookResp)
	err := c.cc.Invoke(ctx, Config_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteHook(ctx context.Context, in *BatchDeleteHookReq, opts ...grpc.CallOption) (*BatchDeleteResp, error) {
	out := new(BatchDeleteResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateHook(ctx context.Context, in *UpdateHookReq, opts ...grpc.CallOption) (*UpdateHookResp, error) {
	out := new(UpdateHookResp)
	err := c.cc.Invoke(ctx, Config_UpdateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHooks(ctx context.Context, in *ListHooksReq, opts ...grpc.CallOption) (*ListHooksResp, error) {
	out := new(ListHooksResp)
	err := c.cc.Invoke(ctx, Config_ListHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookTags(ctx context.Context, in *ListHookTagsReq, opts ...grpc.CallOption) (*ListHookTagsResp, error) {
	out := new(ListHookTagsResp)
	err := c.cc.Invoke(ctx, Config_ListHookTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetHook(ctx context.Context, in *GetHookReq, opts ...grpc.CallOption) (*GetHookResp, error) {
	out := new(GetHookResp)
	err := c.cc.Invoke(ctx, Config_GetHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateHookRevision(ctx context.Context, in *CreateHookRevisionReq, opts ...grpc.CallOption) (*CreateHookRevisionResp, error) {
	out := new(CreateHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_CreateHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookRevisions(ctx context.Context, in *ListHookRevisionsReq, opts ...grpc.CallOption) (*ListHookRevisionsResp, error) {
	out := new(ListHookRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListHookRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteHookRevision(ctx context.Context, in *DeleteHookRevisionReq, opts ...grpc.CallOption) (*DeleteHookRevisionResp, error) {
	out := new(DeleteHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_DeleteHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) PublishHookRevision(ctx context.Context, in *PublishHookRevisionReq, opts ...grpc.CallOption) (*PublishHookRevisionResp, error) {
	out := new(PublishHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_PublishHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetHookRevision(ctx context.Context, in *GetHookRevisionReq, opts ...grpc.CallOption) (*hook_revision.HookRevision, error) {
	out := new(hook_revision.HookRevision)
	err := c.cc.Invoke(ctx, Config_GetHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateHookRevision(ctx context.Context, in *UpdateHookRevisionReq, opts ...grpc.CallOption) (*UpdateHookRevisionResp, error) {
	out := new(UpdateHookRevisionResp)
	err := c.cc.Invoke(ctx, Config_UpdateHookRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookReferences(ctx context.Context, in *ListHookReferencesReq, opts ...grpc.CallOption) (*ListHookReferencesResp, error) {
	out := new(ListHookReferencesResp)
	err := c.cc.Invoke(ctx, Config_ListHookReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListHookRevisionReferences(ctx context.Context, in *ListHookRevisionReferencesReq, opts ...grpc.CallOption) (*ListHookRevisionReferencesResp, error) {
	out := new(ListHookRevisionReferencesResp)
	err := c.cc.Invoke(ctx, Config_ListHookRevisionReferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleaseHook(ctx context.Context, in *GetReleaseHookReq, opts ...grpc.CallOption) (*GetReleaseHookResp, error) {
	out := new(GetReleaseHookResp)
	err := c.cc.Invoke(ctx, Config_GetReleaseHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateSpace(ctx context.Context, in *CreateTemplateSpaceReq, opts ...grpc.CallOption) (*CreateTemplateSpaceResp, error) {
	out := new(CreateTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplateSpace(ctx context.Context, in *DeleteTemplateSpaceReq, opts ...grpc.CallOption) (*DeleteTemplateSpaceResp, error) {
	out := new(DeleteTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateSpace(ctx context.Context, in *UpdateTemplateSpaceReq, opts ...grpc.CallOption) (*UpdateTemplateSpaceResp, error) {
	out := new(UpdateTemplateSpaceResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSpaces(ctx context.Context, in *ListTemplateSpacesReq, opts ...grpc.CallOption) (*ListTemplateSpacesResp, error) {
	out := new(ListTemplateSpacesResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAllBizsOfTmplSpaces(ctx context.Context, in *base.EmptyReq, opts ...grpc.CallOption) (*GetAllBizsOfTmplSpacesResp, error) {
	out := new(GetAllBizsOfTmplSpacesResp)
	err := c.cc.Invoke(ctx, Config_GetAllBizsOfTmplSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateDefaultTmplSpace(ctx context.Context, in *CreateDefaultTmplSpaceReq, opts ...grpc.CallOption) (*CreateDefaultTmplSpaceResp, error) {
	out := new(CreateDefaultTmplSpaceResp)
	err := c.cc.Invoke(ctx, Config_CreateDefaultTmplSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplSpacesByIDs(ctx context.Context, in *ListTmplSpacesByIDsReq, opts ...grpc.CallOption) (*ListTmplSpacesByIDsResp, error) {
	out := new(ListTmplSpacesByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplSpacesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*CreateTemplateResp, error) {
	out := new(CreateTemplateResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*DeleteTemplateResp, error) {
	out := new(DeleteTemplateResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteTemplate(ctx context.Context, in *BatchDeleteTemplateReq, opts ...grpc.CallOption) (*BatchDeleteTemplateResp, error) {
	out := new(BatchDeleteTemplateResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*UpdateTemplateResp, error) {
	out := new(UpdateTemplateResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplates(ctx context.Context, in *ListTemplatesReq, opts ...grpc.CallOption) (*ListTemplatesResp, error) {
	out := new(ListTemplatesResp)
	err := c.cc.Invoke(ctx, Config_ListTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUpsertTemplates(ctx context.Context, in *BatchUpsertTemplatesReq, opts ...grpc.CallOption) (*BatchUpsertTemplatesResp, error) {
	out := new(BatchUpsertTemplatesResp)
	err := c.cc.Invoke(ctx, Config_BatchUpsertTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUpdateTemplatePermissions(ctx context.Context, in *BatchUpdateTemplatePermissionsReq, opts ...grpc.CallOption) (*BatchUpdateTemplatePermissionsResp, error) {
	out := new(BatchUpdateTemplatePermissionsResp)
	err := c.cc.Invoke(ctx, Config_BatchUpdateTemplatePermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) AddTmplsToTmplSets(ctx context.Context, in *AddTmplsToTmplSetsReq, opts ...grpc.CallOption) (*AddTmplsToTmplSetsResp, error) {
	out := new(AddTmplsToTmplSetsResp)
	err := c.cc.Invoke(ctx, Config_AddTmplsToTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTmplsFromTmplSets(ctx context.Context, in *DeleteTmplsFromTmplSetsReq, opts ...grpc.CallOption) (*BatchDeleteResp, error) {
	out := new(BatchDeleteResp)
	err := c.cc.Invoke(ctx, Config_DeleteTmplsFromTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplatesByIDs(ctx context.Context, in *ListTemplatesByIDsReq, opts ...grpc.CallOption) (*ListTemplatesByIDsResp, error) {
	out := new(ListTemplatesByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplatesByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplatesNotBound(ctx context.Context, in *ListTemplatesNotBoundReq, opts ...grpc.CallOption) (*ListTemplatesNotBoundResp, error) {
	out := new(ListTemplatesNotBoundResp)
	err := c.cc.Invoke(ctx, Config_ListTemplatesNotBound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateByTuple(ctx context.Context, in *ListTemplateByTupleReq, opts ...grpc.CallOption) (*ListTemplateByTupleResp, error) {
	out := new(ListTemplateByTupleResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateByTuple_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplsOfTmplSet(ctx context.Context, in *ListTmplsOfTmplSetReq, opts ...grpc.CallOption) (*ListTmplsOfTmplSetResp, error) {
	out := new(ListTmplsOfTmplSetResp)
	err := c.cc.Invoke(ctx, Config_ListTmplsOfTmplSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetsAndRevisions(ctx context.Context, in *ListTemplateSetsAndRevisionsReq, opts ...grpc.CallOption) (*ListTemplateSetsAndRevisionsResp, error) {
	out := new(ListTemplateSetsAndRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetsAndRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateRevision(ctx context.Context, in *CreateTemplateRevisionReq, opts ...grpc.CallOption) (*CreateTemplateRevisionResp, error) {
	out := new(CreateTemplateRevisionResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateRevision(ctx context.Context, in *UpdateTemplateRevisionReq, opts ...grpc.CallOption) (*UpdateTemplateRevisionResp, error) {
	out := new(UpdateTemplateRevisionResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisions(ctx context.Context, in *ListTemplateRevisionsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsResp, error) {
	out := new(ListTemplateRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetTemplateRevision(ctx context.Context, in *GetTemplateRevisionReq, opts ...grpc.CallOption) (*GetTemplateRevisionResp, error) {
	out := new(GetTemplateRevisionResp)
	err := c.cc.Invoke(ctx, Config_GetTemplateRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateRevisionsByIDs(ctx context.Context, in *ListTemplateRevisionsByIDsReq, opts ...grpc.CallOption) (*ListTemplateRevisionsByIDsResp, error) {
	out := new(ListTemplateRevisionsByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateRevisionsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplRevisionNamesByTmplIDs(ctx context.Context, in *ListTmplRevisionNamesByTmplIDsReq, opts ...grpc.CallOption) (*ListTmplRevisionNamesByTmplIDsResp, error) {
	out := new(ListTmplRevisionNamesByTmplIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplRevisionNamesByTmplIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateSet(ctx context.Context, in *CreateTemplateSetReq, opts ...grpc.CallOption) (*CreateTemplateSetResp, error) {
	out := new(CreateTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplateSet(ctx context.Context, in *DeleteTemplateSetReq, opts ...grpc.CallOption) (*DeleteTemplateSetResp, error) {
	out := new(DeleteTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateSet(ctx context.Context, in *UpdateTemplateSetReq, opts ...grpc.CallOption) (*UpdateTemplateSetResp, error) {
	out := new(UpdateTemplateSetResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSets(ctx context.Context, in *ListTemplateSetsReq, opts ...grpc.CallOption) (*ListTemplateSetsResp, error) {
	out := new(ListTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppTemplateSets(ctx context.Context, in *ListAppTemplateSetsReq, opts ...grpc.CallOption) (*ListAppTemplateSetsResp, error) {
	out := new(ListAppTemplateSetsResp)
	err := c.cc.Invoke(ctx, Config_ListAppTemplateSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateSetsByIDs(ctx context.Context, in *ListTemplateSetsByIDsReq, opts ...grpc.CallOption) (*ListTemplateSetsByIDsResp, error) {
	out := new(ListTemplateSetsByIDsResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateSetsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplSetsOfBiz(ctx context.Context, in *ListTmplSetsOfBizReq, opts ...grpc.CallOption) (*ListTmplSetsOfBizResp, error) {
	out := new(ListTmplSetsOfBizResp)
	err := c.cc.Invoke(ctx, Config_ListTmplSetsOfBiz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateAppTemplateBinding(ctx context.Context, in *CreateAppTemplateBindingReq, opts ...grpc.CallOption) (*CreateAppTemplateBindingResp, error) {
	out := new(CreateAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_CreateAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteAppTemplateBinding(ctx context.Context, in *DeleteAppTemplateBindingReq, opts ...grpc.CallOption) (*DeleteAppTemplateBindingResp, error) {
	out := new(DeleteAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_DeleteAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAppTemplateBinding(ctx context.Context, in *UpdateAppTemplateBindingReq, opts ...grpc.CallOption) (*UpdateAppTemplateBindingResp, error) {
	out := new(UpdateAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_UpdateAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppTemplateBindings(ctx context.Context, in *ListAppTemplateBindingsReq, opts ...grpc.CallOption) (*ListAppTemplateBindingsResp, error) {
	out := new(ListAppTemplateBindingsResp)
	err := c.cc.Invoke(ctx, Config_ListAppTemplateBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppBoundTmplRevisions(ctx context.Context, in *ListAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListAppBoundTmplRevisionsResp, error) {
	out := new(ListAppBoundTmplRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListAppBoundTmplRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleasedAppBoundTmplRevisions(ctx context.Context, in *ListReleasedAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*ListReleasedAppBoundTmplRevisionsResp, error) {
	out := new(ListReleasedAppBoundTmplRevisionsResp)
	err := c.cc.Invoke(ctx, Config_ListReleasedAppBoundTmplRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleasedAppBoundTmplRevision(ctx context.Context, in *GetReleasedAppBoundTmplRevisionReq, opts ...grpc.CallOption) (*GetReleasedAppBoundTmplRevisionResp, error) {
	out := new(GetReleasedAppBoundTmplRevisionResp)
	err := c.cc.Invoke(ctx, Config_GetReleasedAppBoundTmplRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAppBoundTmplRevisions(ctx context.Context, in *UpdateAppBoundTmplRevisionsReq, opts ...grpc.CallOption) (*UpdateAppBoundTmplRevisionsResp, error) {
	out := new(UpdateAppBoundTmplRevisionsResp)
	err := c.cc.Invoke(ctx, Config_UpdateAppBoundTmplRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteAppBoundTmplSets(ctx context.Context, in *DeleteAppBoundTmplSetsReq, opts ...grpc.CallOption) (*DeleteAppBoundTmplSetsResp, error) {
	out := new(DeleteAppBoundTmplSetsResp)
	err := c.cc.Invoke(ctx, Config_DeleteAppBoundTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RemoveAppBoundTmplSet(ctx context.Context, in *RemoveAppBoundTmplSetReq, opts ...grpc.CallOption) (*RemoveAppBoundTmplSetResp, error) {
	out := new(RemoveAppBoundTmplSetResp)
	err := c.cc.Invoke(ctx, Config_RemoveAppBoundTmplSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CheckAppTemplateBinding(ctx context.Context, in *CheckAppTemplateBindingReq, opts ...grpc.CallOption) (*CheckAppTemplateBindingResp, error) {
	out := new(CheckAppTemplateBindingResp)
	err := c.cc.Invoke(ctx, Config_CheckAppTemplateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ImportFromTemplateSetToApp(ctx context.Context, in *ImportFromTemplateSetToAppReq, opts ...grpc.CallOption) (*ImportFromTemplateSetToAppResp, error) {
	out := new(ImportFromTemplateSetToAppResp)
	err := c.cc.Invoke(ctx, Config_ImportFromTemplateSetToApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplBoundCounts(ctx context.Context, in *ListTmplBoundCountsReq, opts ...grpc.CallOption) (*ListTmplBoundCountsResp, error) {
	out := new(ListTmplBoundCountsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplRevisionBoundCounts(ctx context.Context, in *ListTmplRevisionBoundCountsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundCountsResp, error) {
	out := new(ListTmplRevisionBoundCountsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplRevisionBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplSetBoundCounts(ctx context.Context, in *ListTmplSetBoundCountsReq, opts ...grpc.CallOption) (*ListTmplSetBoundCountsResp, error) {
	out := new(ListTmplSetBoundCountsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplSetBoundCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplBoundUnnamedApps(ctx context.Context, in *ListTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundUnnamedAppsResp, error) {
	out := new(ListTmplBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplBoundNamedApps(ctx context.Context, in *ListTmplBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplBoundNamedAppsResp, error) {
	out := new(ListTmplBoundNamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplBoundNamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplBoundTmplSets(ctx context.Context, in *ListTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListTmplBoundTmplSetsResp, error) {
	out := new(ListTmplBoundTmplSetsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplBoundTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListMultiTmplBoundTmplSets(ctx context.Context, in *ListMultiTmplBoundTmplSetsReq, opts ...grpc.CallOption) (*ListMultiTmplBoundTmplSetsResp, error) {
	out := new(ListMultiTmplBoundTmplSetsResp)
	err := c.cc.Invoke(ctx, Config_ListMultiTmplBoundTmplSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplRevisionBoundUnnamedApps(ctx context.Context, in *ListTmplRevisionBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundUnnamedAppsResp, error) {
	out := new(ListTmplRevisionBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplRevisionBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplRevisionBoundNamedApps(ctx context.Context, in *ListTmplRevisionBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplRevisionBoundNamedAppsResp, error) {
	out := new(ListTmplRevisionBoundNamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplRevisionBoundNamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplSetBoundUnnamedApps(ctx context.Context, in *ListTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundUnnamedAppsResp, error) {
	out := new(ListTmplSetBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplSetBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListMultiTmplSetBoundUnnamedApps(ctx context.Context, in *ListMultiTmplSetBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListMultiTmplSetBoundUnnamedAppsResp, error) {
	out := new(ListMultiTmplSetBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListMultiTmplSetBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CheckTemplateSetReferencesApps(ctx context.Context, in *CheckTemplateSetReferencesAppsReq, opts ...grpc.CallOption) (*CheckTemplateSetReferencesAppsResp, error) {
	out := new(CheckTemplateSetReferencesAppsResp)
	err := c.cc.Invoke(ctx, Config_CheckTemplateSetReferencesApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTmplSetBoundNamedApps(ctx context.Context, in *ListTmplSetBoundNamedAppsReq, opts ...grpc.CallOption) (*ListTmplSetBoundNamedAppsResp, error) {
	out := new(ListTmplSetBoundNamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListTmplSetBoundNamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListLatestTmplBoundUnnamedApps(ctx context.Context, in *ListLatestTmplBoundUnnamedAppsReq, opts ...grpc.CallOption) (*ListLatestTmplBoundUnnamedAppsResp, error) {
	out := new(ListLatestTmplBoundUnnamedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListLatestTmplBoundUnnamedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateTemplateVariable(ctx context.Context, in *CreateTemplateVariableReq, opts ...grpc.CallOption) (*CreateTemplateVariableResp, error) {
	out := new(CreateTemplateVariableResp)
	err := c.cc.Invoke(ctx, Config_CreateTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteTemplateVariable(ctx context.Context, in *DeleteTemplateVariableReq, opts ...grpc.CallOption) (*DeleteTemplateVariableResp, error) {
	out := new(DeleteTemplateVariableResp)
	err := c.cc.Invoke(ctx, Config_DeleteTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteTemplateVariable(ctx context.Context, in *BatchDeleteBizResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error) {
	out := new(BatchDeleteResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateTemplateVariable(ctx context.Context, in *UpdateTemplateVariableReq, opts ...grpc.CallOption) (*UpdateTemplateVariableResp, error) {
	out := new(UpdateTemplateVariableResp)
	err := c.cc.Invoke(ctx, Config_UpdateTemplateVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTemplateVariables(ctx context.Context, in *ListTemplateVariablesReq, opts ...grpc.CallOption) (*ListTemplateVariablesResp, error) {
	out := new(ListTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ListTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ImportTemplateVariables(ctx context.Context, in *ImportTemplateVariablesReq, opts ...grpc.CallOption) (*ImportTemplateVariablesResp, error) {
	out := new(ImportTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ImportTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ImportOtherFormatTemplateVariables(ctx context.Context, in *ImportOtherFormatTemplateVariablesReq, opts ...grpc.CallOption) (*ImportOtherFormatTemplateVariablesResp, error) {
	out := new(ImportOtherFormatTemplateVariablesResp)
	err := c.cc.Invoke(ctx, Config_ImportOtherFormatTemplateVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ExtractAppTmplVariables(ctx context.Context, in *ExtractAppTmplVariablesReq, opts ...grpc.CallOption) (*ExtractAppTmplVariablesResp, error) {
	out := new(ExtractAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Config_ExtractAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetAppTmplVariableRefs(ctx context.Context, in *GetAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetAppTmplVariableRefsResp, error) {
	out := new(GetAppTmplVariableRefsResp)
	err := c.cc.Invoke(ctx, Config_GetAppTmplVariableRefs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleasedAppTmplVariableRefs(ctx context.Context, in *GetReleasedAppTmplVariableRefsReq, opts ...grpc.CallOption) (*GetReleasedAppTmplVariableRefsResp, error) {
	out := new(GetReleasedAppTmplVariableRefsResp)
	err := c.cc.Invoke(ctx, Config_GetReleasedAppTmplVariableRefs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateAppTmplVariables(ctx context.Context, in *UpdateAppTmplVariablesReq, opts ...grpc.CallOption) (*UpdateAppTmplVariablesResp, error) {
	out := new(UpdateAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Config_UpdateAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppTmplVariables(ctx context.Context, in *ListAppTmplVariablesReq, opts ...grpc.CallOption) (*ListAppTmplVariablesResp, error) {
	out := new(ListAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Config_ListAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListReleasedAppTmplVariables(ctx context.Context, in *ListReleasedAppTmplVariablesReq, opts ...grpc.CallOption) (*ListReleasedAppTmplVariablesResp, error) {
	out := new(ListReleasedAppTmplVariablesResp)
	err := c.cc.Invoke(ctx, Config_ListReleasedAppTmplVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, Config_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	out := new(DeleteGroupResp)
	err := c.cc.Invoke(ctx, Config_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteGroups(ctx context.Context, in *BatchDeleteBizResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error) {
	out := new(BatchDeleteResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	out := new(UpdateGroupResp)
	err := c.cc.Invoke(ctx, Config_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAllGroups(ctx context.Context, in *ListAllGroupsReq, opts ...grpc.CallOption) (*ListAllGroupsResp, error) {
	out := new(ListAllGroupsResp)
	err := c.cc.Invoke(ctx, Config_ListAllGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAppGroups(ctx context.Context, in *ListAppGroupsReq, opts ...grpc.CallOption) (*ListAppGroupsResp, error) {
	out := new(ListAppGroupsResp)
	err := c.cc.Invoke(ctx, Config_ListAppGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListGroupReleasedApps(ctx context.Context, in *ListGroupReleasedAppsReq, opts ...grpc.CallOption) (*ListGroupReleasedAppsResp, error) {
	out := new(ListGroupReleasedAppsResp)
	err := c.cc.Invoke(ctx, Config_ListGroupReleasedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetGroupByName(ctx context.Context, in *GetGroupByNameReq, opts ...grpc.CallOption) (*group.Group, error) {
	out := new(group.Group)
	err := c.cc.Invoke(ctx, Config_GetGroupByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Config_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GenerateReleaseAndPublish(ctx context.Context, in *GenerateReleaseAndPublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Config_GenerateReleaseAndPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) SubmitPublishApprove(ctx context.Context, in *SubmitPublishApproveReq, opts ...grpc.CallOption) (*PublishResp, error) {
	out := new(PublishResp)
	err := c.cc.Invoke(ctx, Config_SubmitPublishApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*ApproveResp, error) {
	out := new(ApproveResp)
	err := c.cc.Invoke(ctx, Config_Approve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetLastSelect(ctx context.Context, in *GetLastSelectReq, opts ...grpc.CallOption) (*GetLastSelectResp, error) {
	out := new(GetLastSelectResp)
	err := c.cc.Invoke(ctx, Config_GetLastSelect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetLastPublish(ctx context.Context, in *GetLastPublishReq, opts ...grpc.CallOption) (*GetLastPublishResp, error) {
	out := new(GetLastPublishResp)
	err := c.cc.Invoke(ctx, Config_GetLastPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetReleasesStatus(ctx context.Context, in *GetReleasesStatusReq, opts ...grpc.CallOption) (*strategy.Strategy, error) {
	out := new(strategy.Strategy)
	err := c.cc.Invoke(ctx, Config_GetReleasesStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListAudits(ctx context.Context, in *ListAuditsReq, opts ...grpc.CallOption) (*ListAuditsResp, error) {
	out := new(ListAuditsResp)
	err := c.cc.Invoke(ctx, Config_ListAudits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateCredentials(ctx context.Context, in *CreateCredentialReq, opts ...grpc.CallOption) (*CreateCredentialResp, error) {
	out := new(CreateCredentialResp)
	err := c.cc.Invoke(ctx, Config_CreateCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListCredentials(ctx context.Context, in *ListCredentialsReq, opts ...grpc.CallOption) (*ListCredentialsResp, error) {
	out := new(ListCredentialsResp)
	err := c.cc.Invoke(ctx, Config_ListCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteCredential(ctx context.Context, in *DeleteCredentialsReq, opts ...grpc.CallOption) (*DeleteCredentialsResp, error) {
	out := new(DeleteCredentialsResp)
	err := c.cc.Invoke(ctx, Config_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCredential(ctx context.Context, in *UpdateCredentialsReq, opts ...grpc.CallOption) (*UpdateCredentialsResp, error) {
	out := new(UpdateCredentialsResp)
	err := c.cc.Invoke(ctx, Config_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CheckCredentialName(ctx context.Context, in *CheckCredentialNameReq, opts ...grpc.CallOption) (*CheckCredentialNameResp, error) {
	out := new(CheckCredentialNameResp)
	err := c.cc.Invoke(ctx, Config_CheckCredentialName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListCredentialScopes(ctx context.Context, in *ListCredentialScopesReq, opts ...grpc.CallOption) (*ListCredentialScopesResp, error) {
	out := new(ListCredentialScopesResp)
	err := c.cc.Invoke(ctx, Config_ListCredentialScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateCredentialScope(ctx context.Context, in *UpdateCredentialScopeReq, opts ...grpc.CallOption) (*UpdateCredentialScopeResp, error) {
	out := new(UpdateCredentialScopeResp)
	err := c.cc.Invoke(ctx, Config_UpdateCredentialScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CredentialScopePreview(ctx context.Context, in *CredentialScopePreviewReq, opts ...grpc.CallOption) (*CredentialScopePreviewResp, error) {
	out := new(CredentialScopePreviewResp)
	err := c.cc.Invoke(ctx, Config_CredentialScopePreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateKv(ctx context.Context, in *CreateKvReq, opts ...grpc.CallOption) (*CreateKvResp, error) {
	out := new(CreateKvResp)
	err := c.cc.Invoke(ctx, Config_CreateKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateKv(ctx context.Context, in *UpdateKvReq, opts ...grpc.CallOption) (*UpdateKvResp, error) {
	out := new(UpdateKvResp)
	err := c.cc.Invoke(ctx, Config_UpdateKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListKvs(ctx context.Context, in *ListKvsReq, opts ...grpc.CallOption) (*ListKvsResp, error) {
	out := new(ListKvsResp)
	err := c.cc.Invoke(ctx, Config_ListKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteKv(ctx context.Context, in *DeleteKvReq, opts ...grpc.CallOption) (*DeleteKvResp, error) {
	out := new(DeleteKvResp)
	err := c.cc.Invoke(ctx, Config_DeleteKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchDeleteKv(ctx context.Context, in *BatchDeleteAppResourcesReq, opts ...grpc.CallOption) (*BatchDeleteResp, error) {
	out := new(BatchDeleteResp)
	err := c.cc.Invoke(ctx, Config_BatchDeleteKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUpsertKvs(ctx context.Context, in *BatchUpsertKvsReq, opts ...grpc.CallOption) (*BatchUpsertKvsResp, error) {
	out := new(BatchUpsertKvsResp)
	err := c.cc.Invoke(ctx, Config_BatchUpsertKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UnDeleteKv(ctx context.Context, in *UnDeleteKvReq, opts ...grpc.CallOption) (*UnDeleteKvResp, error) {
	out := new(UnDeleteKvResp)
	err := c.cc.Invoke(ctx, Config_UnDeleteKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) BatchUnDeleteKv(ctx context.Context, in *BatchUnDeleteKvReq, opts ...grpc.CallOption) (*BatchUnDeleteKvResp, error) {
	out := new(BatchUnDeleteKvResp)
	err := c.cc.Invoke(ctx, Config_BatchUnDeleteKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UndoKv(ctx context.Context, in *UndoKvReq, opts ...grpc.CallOption) (*UndoKvResp, error) {
	out := new(UndoKvResp)
	err := c.cc.Invoke(ctx, Config_UndoKv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ImportKvs(ctx context.Context, in *ImportKvsReq, opts ...grpc.CallOption) (*ImportKvsResp, error) {
	out := new(ImportKvsResp)
	err := c.cc.Invoke(ctx, Config_ImportKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) FindNearExpiryCertKvs(ctx context.Context, in *FindNearExpiryCertKvsReq, opts ...grpc.CallOption) (*FindNearExpiryCertKvsResp, error) {
	out := new(FindNearExpiryCertKvsResp)
	err := c.cc.Invoke(ctx, Config_FindNearExpiryCertKvs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListClients(ctx context.Context, in *ListClientsReq, opts ...grpc.CallOption) (*ListClientsResp, error) {
	out := new(ListClientsResp)
	err := c.cc.Invoke(ctx, Config_ListClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListClientEvents(ctx context.Context, in *ListClientEventsReq, opts ...grpc.CallOption) (*ListClientEventsResp, error) {
	out := new(ListClientEventsResp)
	err := c.cc.Invoke(ctx, Config_ListClientEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RetryClients(ctx context.Context, in *RetryClientsReq, opts ...grpc.CallOption) (*RetryClientsResp, error) {
	out := new(RetryClientsResp)
	err := c.cc.Invoke(ctx, Config_RetryClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListClientQuerys(ctx context.Context, in *ListClientQuerysReq, opts ...grpc.CallOption) (*ListClientQuerysResp, error) {
	out := new(ListClientQuerysResp)
	err := c.cc.Invoke(ctx, Config_ListClientQuerys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateClientQuery(ctx context.Context, in *CreateClientQueryReq, opts ...grpc.CallOption) (*CreateClientQueryResp, error) {
	out := new(CreateClientQueryResp)
	err := c.cc.Invoke(ctx, Config_CreateClientQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateClientQuery(ctx context.Context, in *UpdateClientQueryReq, opts ...grpc.CallOption) (*UpdateClientQueryResp, error) {
	out := new(UpdateClientQueryResp)
	err := c.cc.Invoke(ctx, Config_UpdateClientQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteClientQuery(ctx context.Context, in *DeleteClientQueryReq, opts ...grpc.CallOption) (*DeleteClientQueryResp, error) {
	out := new(DeleteClientQueryResp)
	err := c.cc.Invoke(ctx, Config_DeleteClientQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CheckClientQueryName(ctx context.Context, in *CheckClientQueryNameReq, opts ...grpc.CallOption) (*CheckClientQueryNameResp, error) {
	out := new(CheckClientQueryNameResp)
	err := c.cc.Invoke(ctx, Config_CheckClientQueryName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientConfigVersionStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientConfigVersionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientPullTrendStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientPullTrendStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientPullStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientPullStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientLabelStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientLabelStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientAnnotationStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientAnnotationStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientVersionStatistics(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientVersionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListClientLabelAndAnnotation(ctx context.Context, in *ListClientLabelAndAnnotationReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ListClientLabelAndAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ClientSpecificFailedReason(ctx context.Context, in *client.ClientCommonReq, opts ...grpc.CallOption) (*structpb.Struct, error) {
	out := new(structpb.Struct)
	err := c.cc.Invoke(ctx, Config_ClientSpecificFailedReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CompareConfigItemConflicts(ctx context.Context, in *CompareConfigItemConflictsReq, opts ...grpc.CallOption) (*CompareConfigItemConflictsResp, error) {
	out := new(CompareConfigItemConflictsResp)
	err := c.cc.Invoke(ctx, Config_CompareConfigItemConflicts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CompareKvConflicts(ctx context.Context, in *CompareKvConflictsReq, opts ...grpc.CallOption) (*CompareKvConflictsResp, error) {
	out := new(CompareKvConflictsResp)
	err := c.cc.Invoke(ctx, Config_CompareKvConflicts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetTemplateAndNonTemplateCICount(ctx context.Context, in *GetTemplateAndNonTemplateCICountReq, opts ...grpc.CallOption) (*GetTemplateAndNonTemplateCICountResp, error) {
	out := new(GetTemplateAndNonTemplateCICountResp)
	err := c.cc.Invoke(ctx, Config_GetTemplateAndNonTemplateCICount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations should embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	//  创建服务
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	// 更新服务
	UpdateApp(context.Context, *UpdateAppReq) (*app.App, error)
	// 删除服务
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	// 获取服务
	GetApp(context.Context, *GetAppReq) (*app.App, error)
	// 按服务名称获取
	GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error)
	// 获取用户有权限的 spaces 所有的 apps
	ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error)
	// 按 space 查询 app 信息
	ListAppsBySpaceRest(context.Context, *ListAppsBySpaceRestReq) (*ListAppsResp, error)
	// 创建文件配置项
	CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateConfigItemResp, error)
	// 批量创建或更新文件配置项
	BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*BatchUpsertConfigItemsResp, error)
	// 更新文件配置项
	UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*UpdateConfigItemResp, error)
	// 删除文件配置项
	DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*DeleteConfigItemResp, error)
	// 批量删除文件配置项
	BatchDeleteConfigItems(context.Context, *BatchDeleteAppResourcesReq) (*BatchDeleteResp, error)
	// 恢复文件配置项
	UnDeleteConfigItem(context.Context, *UnDeleteConfigItemReq) (*UnDeleteConfigItemResp, error)
	// 批量恢复文件配置项
	BatchUnDeleteConfigItem(context.Context, *BatchUnDeleteConfigItemReq) (*BatchUnDeleteConfigItemResp, error)
	// 撤销文件配置项
	UndoConfigItem(context.Context, *UndoConfigItemReq) (*UndoConfigItemResp, error)
	// 获取文件配置项
	GetConfigItem(context.Context, *GetConfigItemReq) (*GetConfigItemResp, error)
	// 获取已发布文件配置项
	GetReleasedConfigItem(context.Context, *GetReleasedConfigItemReq) (*GetReleasedConfigItemResp, error)
	// 获取文件配置项列表
	ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error)
	// 获取已发布文件配置项列表
	ListReleasedConfigItems(context.Context, *ListReleasedConfigItemsReq) (*ListReleasedConfigItemsResp, error)
	// 获取文件型服务配置数量列表
	ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error)
	// 按绝对路径获取文件配置项列表
	ListConfigItemByTuple(context.Context, *ListConfigItemByTupleReq) (*ListConfigItemByTupleResp, error)
	// 获取已生成版本键值配置项
	GetReleasedKv(context.Context, *GetReleasedKvReq) (*GetReleasedKvResp, error)
	// 获取已生成版本键值配置项列表
	ListReleasedKvs(context.Context, *ListReleasedKvsReq) (*ListReleasedKvsResp, error)
	// 引用前后置脚本
	UpdateConfigHook(context.Context, *UpdateConfigHookReq) (*UpdateConfigHookResp, error)
	// 生成配置服务版本
	CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error)
	// 获取服务版本列表
	ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error)
	// 按服务版本名
	GetReleaseByName(context.Context, *GetReleaseByNameReq) (*release.Release, error)
	// 获取服务版本
	GetRelease(context.Context, *GetReleaseReq) (*release.Release, error)
	// 废弃服务版本
	DeprecateRelease(context.Context, *DeprecateReleaseReq) (*DeprecateReleaseResp, error)
	// 撤回废弃服务版本
	UnDeprecateRelease(context.Context, *UnDeprecateReleaseReq) (*UnDeprecateReleaseResp, error)
	// 删除服务版本
	DeleteRelease(context.Context, *DeleteReleaseReq) (*DeleteReleaseResp, error)
	// 检测服务版本名
	CheckReleaseName(context.Context, *CheckReleaseNameReq) (*CheckReleaseNameResp, error)
	// 创建脚本
	CreateHook(context.Context, *CreateHookReq) (*CreateHookResp, error)
	// 删除脚本
	DeleteHook(context.Context, *DeleteHookReq) (*DeleteHookResp, error)
	// 批量删除脚本
	BatchDeleteHook(context.Context, *BatchDeleteHookReq) (*BatchDeleteResp, error)
	// 更新脚本
	UpdateHook(context.Context, *UpdateHookReq) (*UpdateHookResp, error)
	// 获取脚本列表
	ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error)
	// 获取脚本标签列表
	ListHookTags(context.Context, *ListHookTagsReq) (*ListHookTagsResp, error)
	// 获取脚本
	GetHook(context.Context, *GetHookReq) (*GetHookResp, error)
	// 创建脚本版本
	CreateHookRevision(context.Context, *CreateHookRevisionReq) (*CreateHookRevisionResp, error)
	// 获取脚本版本列表
	ListHookRevisions(context.Context, *ListHookRevisionsReq) (*ListHookRevisionsResp, error)
	// 删除骄傲本版本
	DeleteHookRevision(context.Context, *DeleteHookRevisionReq) (*DeleteHookRevisionResp, error)
	// 上线脚本版本
	PublishHookRevision(context.Context, *PublishHookRevisionReq) (*PublishHookRevisionResp, error)
	// 获取脚本版本
	GetHookRevision(context.Context, *GetHookRevisionReq) (*hook_revision.HookRevision, error)
	// 更新脚本版本
	UpdateHookRevision(context.Context, *UpdateHookRevisionReq) (*UpdateHookRevisionResp, error)
	// 获取被引用的脚本配置服务列表
	ListHookReferences(context.Context, *ListHookReferencesReq) (*ListHookReferencesResp, error)
	// 获取被引用的脚本版本配置服务列表
	ListHookRevisionReferences(context.Context, *ListHookRevisionReferencesReq) (*ListHookRevisionReferencesResp, error)
	// TODO
	GetReleaseHook(context.Context, *GetReleaseHookReq) (*GetReleaseHookResp, error)
	// 创建模板空间
	CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateTemplateSpaceResp, error)
	// 删除模板空间
	DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*DeleteTemplateSpaceResp, error)
	// 更新模板空间
	UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*UpdateTemplateSpaceResp, error)
	// 获取模板空间列表
	ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error)
	// GetAllBizsOfTmplSpaces called only by system itself
	GetAllBizsOfTmplSpaces(context.Context, *base.EmptyReq) (*GetAllBizsOfTmplSpacesResp, error)
	// 创建模板默认空间(仅由系统本身调用)
	CreateDefaultTmplSpace(context.Context, *CreateDefaultTmplSpaceReq) (*CreateDefaultTmplSpaceResp, error)
	ListTmplSpacesByIDs(context.Context, *ListTmplSpacesByIDsReq) (*ListTmplSpacesByIDsResp, error)
	// 创建模板
	CreateTemplate(context.Context, *CreateTemplateReq) (*CreateTemplateResp, error)
	// 删除模板
	DeleteTemplate(context.Context, *DeleteTemplateReq) (*DeleteTemplateResp, error)
	// 批量删除模板
	BatchDeleteTemplate(context.Context, *BatchDeleteTemplateReq) (*BatchDeleteTemplateResp, error)
	// 更新模板
	UpdateTemplate(context.Context, *UpdateTemplateReq) (*UpdateTemplateResp, error)
	// 获取模板列表(全部配置文件)
	ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error)
	// 批量创建或更新模板
	BatchUpsertTemplates(context.Context, *BatchUpsertTemplatesReq) (*BatchUpsertTemplatesResp, error)
	// 批量更新模板权限
	BatchUpdateTemplatePermissions(context.Context, *BatchUpdateTemplatePermissionsReq) (*BatchUpdateTemplatePermissionsResp, error)
	// 添加至模板套餐中
	AddTmplsToTmplSets(context.Context, *AddTmplsToTmplSetsReq) (*AddTmplsToTmplSetsResp, error)
	// 从模板套餐中移出
	DeleteTmplsFromTmplSets(context.Context, *DeleteTmplsFromTmplSetsReq) (*BatchDeleteResp, error)
	// 按模板ID获取模板列表
	ListTemplatesByIDs(context.Context, *ListTemplatesByIDsReq) (*ListTemplatesByIDsResp, error)
	// 获取未绑定的模板列表
	ListTemplatesNotBound(context.Context, *ListTemplatesNotBoundReq) (*ListTemplatesNotBoundResp, error)
	// 按模板绝对路径获取模板列表
	ListTemplateByTuple(context.Context, *ListTemplateByTupleReq) (*ListTemplateByTupleResp, error)
	// 按模板套餐获取模板列表
	ListTmplsOfTmplSet(context.Context, *ListTmplsOfTmplSetReq) (*ListTmplsOfTmplSetResp, error)
	// 获取模板套餐下的所有版本列表
	ListTemplateSetsAndRevisions(context.Context, *ListTemplateSetsAndRevisionsReq) (*ListTemplateSetsAndRevisionsResp, error)
	// 创建模板版本
	CreateTemplateRevision(context.Context, *CreateTemplateRevisionReq) (*CreateTemplateRevisionResp, error)
	// 更新模板版本
	UpdateTemplateRevision(context.Context, *UpdateTemplateRevisionReq) (*UpdateTemplateRevisionResp, error)
	// 获取模板版本列表
	ListTemplateRevisions(context.Context, *ListTemplateRevisionsReq) (*ListTemplateRevisionsResp, error)
	// 获取模板版本
	GetTemplateRevision(context.Context, *GetTemplateRevisionReq) (*GetTemplateRevisionResp, error)
	// 按模板版本ID获取模板版本列表
	ListTemplateRevisionsByIDs(context.Context, *ListTemplateRevisionsByIDsReq) (*ListTemplateRevisionsByIDsResp, error)
	// 按模板ID获取模板版本列表
	ListTmplRevisionNamesByTmplIDs(context.Context, *ListTmplRevisionNamesByTmplIDsReq) (*ListTmplRevisionNamesByTmplIDsResp, error)
	// 创建模板套餐
	CreateTemplateSet(context.Context, *CreateTemplateSetReq) (*CreateTemplateSetResp, error)
	// 删除模板套餐
	DeleteTemplateSet(context.Context, *DeleteTemplateSetReq) (*DeleteTemplateSetResp, error)
	// 更新模板套餐
	UpdateTemplateSet(context.Context, *UpdateTemplateSetReq) (*UpdateTemplateSetResp, error)
	// 获取模板套餐列表
	ListTemplateSets(context.Context, *ListTemplateSetsReq) (*ListTemplateSetsResp, error)
	// 获取模板套餐列表
	ListAppTemplateSets(context.Context, *ListAppTemplateSetsReq) (*ListAppTemplateSetsResp, error)
	// 按模板套餐ID获取模板套餐列表
	ListTemplateSetsByIDs(context.Context, *ListTemplateSetsByIDsReq) (*ListTemplateSetsByIDsResp, error)
	// 按服务ID获取模板套餐列表
	ListTmplSetsOfBiz(context.Context, *ListTmplSetsOfBizReq) (*ListTmplSetsOfBizResp, error)
	// 创建绑定服务的模板(暂无用到)
	CreateAppTemplateBinding(context.Context, *CreateAppTemplateBindingReq) (*CreateAppTemplateBindingResp, error)
	// 删除绑定服务的模板
	DeleteAppTemplateBinding(context.Context, *DeleteAppTemplateBindingReq) (*DeleteAppTemplateBindingResp, error)
	// 更新绑定服务的模板
	UpdateAppTemplateBinding(context.Context, *UpdateAppTemplateBindingReq) (*UpdateAppTemplateBindingResp, error)
	// 按服务获取绑定的模板列表
	ListAppTemplateBindings(context.Context, *ListAppTemplateBindingsReq) (*ListAppTemplateBindingsResp, error)
	// 按未命名版本服务获取绑定的模板版本列表
	ListAppBoundTmplRevisions(context.Context, *ListAppBoundTmplRevisionsReq) (*ListAppBoundTmplRevisionsResp, error)
	// 按已发布版本服务获取绑定的模板版本列表
	ListReleasedAppBoundTmplRevisions(context.Context, *ListReleasedAppBoundTmplRevisionsReq) (*ListReleasedAppBoundTmplRevisionsResp, error)
	// 查看已发布版本服务的模板版本详情
	GetReleasedAppBoundTmplRevision(context.Context, *GetReleasedAppBoundTmplRevisionReq) (*GetReleasedAppBoundTmplRevisionResp, error)
	// 替换服务引用后的模板版本
	UpdateAppBoundTmplRevisions(context.Context, *UpdateAppBoundTmplRevisionsReq) (*UpdateAppBoundTmplRevisionsResp, error)
	// 移除服务引用的模板套餐(暂未用到)
	DeleteAppBoundTmplSets(context.Context, *DeleteAppBoundTmplSetsReq) (*DeleteAppBoundTmplSetsResp, error)
	// 移除服务引用的模板套餐
	RemoveAppBoundTmplSet(context.Context, *RemoveAppBoundTmplSetReq) (*RemoveAppBoundTmplSetResp, error)
	// 检测服务绑定的模板套餐
	CheckAppTemplateBinding(context.Context, *CheckAppTemplateBindingReq) (*CheckAppTemplateBindingResp, error)
	// 配置服务引用模版套餐
	ImportFromTemplateSetToApp(context.Context, *ImportFromTemplateSetToAppReq) (*ImportFromTemplateSetToAppResp, error)
	// 获取模板绑定服务数列表
	ListTmplBoundCounts(context.Context, *ListTmplBoundCountsReq) (*ListTmplBoundCountsResp, error)
	// 获取模板版本绑定服务数列表
	ListTmplRevisionBoundCounts(context.Context, *ListTmplRevisionBoundCountsReq) (*ListTmplRevisionBoundCountsResp, error)
	// 获取模板套餐绑定服务数列表
	ListTmplSetBoundCounts(context.Context, *ListTmplSetBoundCountsReq) (*ListTmplSetBoundCountsResp, error)
	// 获取模板绑定的服务列表
	ListTmplBoundUnnamedApps(context.Context, *ListTmplBoundUnnamedAppsReq) (*ListTmplBoundUnnamedAppsResp, error)
	// 获取模板绑定的服务以及模板版本列表
	ListTmplBoundNamedApps(context.Context, *ListTmplBoundNamedAppsReq) (*ListTmplBoundNamedAppsResp, error)
	// 获取服务绑定的模板套餐列表
	ListTmplBoundTmplSets(context.Context, *ListTmplBoundTmplSetsReq) (*ListTmplBoundTmplSetsResp, error)
	// 获取服务绑定的模板套餐以及模板列表
	ListMultiTmplBoundTmplSets(context.Context, *ListMultiTmplBoundTmplSetsReq) (*ListMultiTmplBoundTmplSetsResp, error)
	// 按模板版本获取绑定的未命名版本服务列表
	ListTmplRevisionBoundUnnamedApps(context.Context, *ListTmplRevisionBoundUnnamedAppsReq) (*ListTmplRevisionBoundUnnamedAppsResp, error)
	// 按模板版本获取绑定的已命名版本服务列表
	ListTmplRevisionBoundNamedApps(context.Context, *ListTmplRevisionBoundNamedAppsReq) (*ListTmplRevisionBoundNamedAppsResp, error)
	// 按模板套餐获取绑定的未命名版本服务列表
	ListTmplSetBoundUnnamedApps(context.Context, *ListTmplSetBoundUnnamedAppsReq) (*ListTmplSetBoundUnnamedAppsResp, error)
	// 按多模板套餐获取绑定的未命名版本服务列表
	ListMultiTmplSetBoundUnnamedApps(context.Context, *ListMultiTmplSetBoundUnnamedAppsReq) (*ListMultiTmplSetBoundUnnamedAppsResp, error)
	// 检测模板套餐引用的服务
	CheckTemplateSetReferencesApps(context.Context, *CheckTemplateSetReferencesAppsReq) (*CheckTemplateSetReferencesAppsResp, error)
	// 按模板套餐获取绑定的已命名版本服务列表
	ListTmplSetBoundNamedApps(context.Context, *ListTmplSetBoundNamedAppsReq) (*ListTmplSetBoundNamedAppsResp, error)
	// 按最新的模板版本获取未命名版本服务列表
	ListLatestTmplBoundUnnamedApps(context.Context, *ListLatestTmplBoundUnnamedAppsReq) (*ListLatestTmplBoundUnnamedAppsResp, error)
	// 创建模板变量
	CreateTemplateVariable(context.Context, *CreateTemplateVariableReq) (*CreateTemplateVariableResp, error)
	// 删除模板变量
	DeleteTemplateVariable(context.Context, *DeleteTemplateVariableReq) (*DeleteTemplateVariableResp, error)
	// 批量删除模板变量
	BatchDeleteTemplateVariable(context.Context, *BatchDeleteBizResourcesReq) (*BatchDeleteResp, error)
	// 更新模板变量
	UpdateTemplateVariable(context.Context, *UpdateTemplateVariableReq) (*UpdateTemplateVariableResp, error)
	// 获取模板变量列表
	ListTemplateVariables(context.Context, *ListTemplateVariablesReq) (*ListTemplateVariablesResp, error)
	// 批量导入简单文件模板变量
	ImportTemplateVariables(context.Context, *ImportTemplateVariablesReq) (*ImportTemplateVariablesResp, error)
	ImportOtherFormatTemplateVariables(context.Context, *ImportOtherFormatTemplateVariablesReq) (*ImportOtherFormatTemplateVariablesResp, error)
	// 提取模板变量
	ExtractAppTmplVariables(context.Context, *ExtractAppTmplVariablesReq) (*ExtractAppTmplVariablesResp, error)
	// 获取未命名服务版本被引用的变量
	GetAppTmplVariableRefs(context.Context, *GetAppTmplVariableRefsReq) (*GetAppTmplVariableRefsResp, error)
	// 获取服务版本下被引用的变量
	GetReleasedAppTmplVariableRefs(context.Context, *GetReleasedAppTmplVariableRefsReq) (*GetReleasedAppTmplVariableRefsResp, error)
	// 更新未命名服务版本变量
	UpdateAppTmplVariables(context.Context, *UpdateAppTmplVariablesReq) (*UpdateAppTmplVariablesResp, error)
	// 获取未命名服务版本模板变量
	ListAppTmplVariables(context.Context, *ListAppTmplVariablesReq) (*ListAppTmplVariablesResp, error)
	// 获取服务版本的模板变量列表
	ListReleasedAppTmplVariables(context.Context, *ListReleasedAppTmplVariablesReq) (*ListReleasedAppTmplVariablesResp, error)
	// 创建分组
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// 删除分组
	DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error)
	// 批量删除分组
	BatchDeleteGroups(context.Context, *BatchDeleteBizResourcesReq) (*BatchDeleteResp, error)
	// 更新分组
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error)
	// 获取所有分组列表
	ListAllGroups(context.Context, *ListAllGroupsReq) (*ListAllGroupsResp, error)
	// 按服务获取分组
	ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error)
	// 按分组获取服务
	ListGroupReleasedApps(context.Context, *ListGroupReleasedAppsReq) (*ListGroupReleasedAppsResp, error)
	// 按名称获取分组
	GetGroupByName(context.Context, *GetGroupByNameReq) (*group.Group, error)
	// 发布服务版本
	Publish(context.Context, *PublishReq) (*PublishResp, error)
	// 生成新的服务版本并发布
	GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error)
	// 上线服务版本
	SubmitPublishApprove(context.Context, *SubmitPublishApproveReq) (*PublishResp, error)
	Approve(context.Context, *ApproveReq) (*ApproveResp, error)
	GetLastSelect(context.Context, *GetLastSelectReq) (*GetLastSelectResp, error)
	GetLastPublish(context.Context, *GetLastPublishReq) (*GetLastPublishResp, error)
	GetReleasesStatus(context.Context, *GetReleasesStatusReq) (*strategy.Strategy, error)
	ListAudits(context.Context, *ListAuditsReq) (*ListAuditsResp, error)
	// 创建客户端密钥
	CreateCredentials(context.Context, *CreateCredentialReq) (*CreateCredentialResp, error)
	// 获取客户端密钥
	ListCredentials(context.Context, *ListCredentialsReq) (*ListCredentialsResp, error)
	// 删除客户端密钥
	DeleteCredential(context.Context, *DeleteCredentialsReq) (*DeleteCredentialsResp, error)
	// 更新客户端密钥
	UpdateCredential(context.Context, *UpdateCredentialsReq) (*UpdateCredentialsResp, error)
	// 检测客户端密钥名称
	CheckCredentialName(context.Context, *CheckCredentialNameReq) (*CheckCredentialNameResp, error)
	// 获取客户端密钥关联服务的列表
	ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error)
	// 更新客户端密钥关联服务规则
	UpdateCredentialScope(context.Context, *UpdateCredentialScopeReq) (*UpdateCredentialScopeResp, error)
	// 预览客户端密钥关联配置项
	CredentialScopePreview(context.Context, *CredentialScopePreviewReq) (*CredentialScopePreviewResp, error)
	// 创建键值配置项
	CreateKv(context.Context, *CreateKvReq) (*CreateKvResp, error)
	// 更新键值配置项
	UpdateKv(context.Context, *UpdateKvReq) (*UpdateKvResp, error)
	// 获取键值配置项列表
	ListKvs(context.Context, *ListKvsReq) (*ListKvsResp, error)
	// 删除键值配置项
	DeleteKv(context.Context, *DeleteKvReq) (*DeleteKvResp, error)
	// 批量删除键值配置项
	BatchDeleteKv(context.Context, *BatchDeleteAppResourcesReq) (*BatchDeleteResp, error)
	// 批量创建或更新键值配置项
	BatchUpsertKvs(context.Context, *BatchUpsertKvsReq) (*BatchUpsertKvsResp, error)
	// 恢复键值配置项
	UnDeleteKv(context.Context, *UnDeleteKvReq) (*UnDeleteKvResp, error)
	// 批量恢复键值配置项
	BatchUnDeleteKv(context.Context, *BatchUnDeleteKvReq) (*BatchUnDeleteKvResp, error)
	// 撤销修改的键值配置项
	UndoKv(context.Context, *UndoKvReq) (*UndoKvResp, error)
	// 批量导出文本格式键值配置项
	ImportKvs(context.Context, *ImportKvsReq) (*ImportKvsResp, error)
	// 查找临近到期证书
	FindNearExpiryCertKvs(context.Context, *FindNearExpiryCertKvsReq) (*FindNearExpiryCertKvsResp, error)
	// 获取客户端列表
	ListClients(context.Context, *ListClientsReq) (*ListClientsResp, error)
	// 获取客户端拉取记录列表
	ListClientEvents(context.Context, *ListClientEventsReq) (*ListClientEventsResp, error)
	// 重试客户端拉取
	RetryClients(context.Context, *RetryClientsReq) (*RetryClientsResp, error)
	// 获取客户端查询条件列表
	ListClientQuerys(context.Context, *ListClientQuerysReq) (*ListClientQuerysResp, error)
	// 创建客户端查询条件
	CreateClientQuery(context.Context, *CreateClientQueryReq) (*CreateClientQueryResp, error)
	// 更新客户端查询条件
	UpdateClientQuery(context.Context, *UpdateClientQueryReq) (*UpdateClientQueryResp, error)
	// 删除客户端查询条件
	DeleteClientQuery(context.Context, *DeleteClientQueryReq) (*DeleteClientQueryResp, error)
	// 检测客户端查询条件名
	CheckClientQueryName(context.Context, *CheckClientQueryNameReq) (*CheckClientQueryNameResp, error)
	// 客户端配置版本统计
	ClientConfigVersionStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 客户端拉取趋势统计
	ClientPullTrendStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 客户端拉取状态统计
	ClientPullStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 客户端标签统计
	ClientLabelStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 客户端附加信息统计
	ClientAnnotationStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 客户端组件版本统计
	ClientVersionStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 获取客户端标签和附加信息列表
	ListClientLabelAndAnnotation(context.Context, *ListClientLabelAndAnnotationReq) (*structpb.Struct, error)
	// 获取客户端失败原因
	ClientSpecificFailedReason(context.Context, *client.ClientCommonReq) (*structpb.Struct, error)
	// 文件服务以及和其他服务版本之间对比
	CompareConfigItemConflicts(context.Context, *CompareConfigItemConflictsReq) (*CompareConfigItemConflictsResp, error)
	// 键值服务以及和其他服务版本之间对比
	CompareKvConflicts(context.Context, *CompareKvConflictsReq) (*CompareKvConflictsResp, error)
	// 获取模板和非模板配置项数量
	GetTemplateAndNonTemplateCICount(context.Context, *GetTemplateAndNonTemplateCICountReq) (*GetTemplateAndNonTemplateCICountResp, error)
}

// UnimplementedConfigServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedConfigServer) UpdateApp(context.Context, *UpdateAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedConfigServer) DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedConfigServer) GetApp(context.Context, *GetAppReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedConfigServer) GetAppByName(context.Context, *GetAppByNameReq) (*app.App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppByName not implemented")
}
func (UnimplementedConfigServer) ListAppsRest(context.Context, *ListAppsRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsRest not implemented")
}
func (UnimplementedConfigServer) ListAppsBySpaceRest(context.Context, *ListAppsBySpaceRestReq) (*ListAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppsBySpaceRest not implemented")
}
func (UnimplementedConfigServer) CreateConfigItem(context.Context, *CreateConfigItemReq) (*CreateConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigItem not implemented")
}
func (UnimplementedConfigServer) BatchUpsertConfigItems(context.Context, *BatchUpsertConfigItemsReq) (*BatchUpsertConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertConfigItems not implemented")
}
func (UnimplementedConfigServer) UpdateConfigItem(context.Context, *UpdateConfigItemReq) (*UpdateConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigItem not implemented")
}
func (UnimplementedConfigServer) DeleteConfigItem(context.Context, *DeleteConfigItemReq) (*DeleteConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigItem not implemented")
}
func (UnimplementedConfigServer) BatchDeleteConfigItems(context.Context, *BatchDeleteAppResourcesReq) (*BatchDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteConfigItems not implemented")
}
func (UnimplementedConfigServer) UnDeleteConfigItem(context.Context, *UnDeleteConfigItemReq) (*UnDeleteConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDeleteConfigItem not implemented")
}
func (UnimplementedConfigServer) BatchUnDeleteConfigItem(context.Context, *BatchUnDeleteConfigItemReq) (*BatchUnDeleteConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUnDeleteConfigItem not implemented")
}
func (UnimplementedConfigServer) UndoConfigItem(context.Context, *UndoConfigItemReq) (*UndoConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoConfigItem not implemented")
}
func (UnimplementedConfigServer) GetConfigItem(context.Context, *GetConfigItemReq) (*GetConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigItem not implemented")
}
func (UnimplementedConfigServer) GetReleasedConfigItem(context.Context, *GetReleasedConfigItemReq) (*GetReleasedConfigItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedConfigItem not implemented")
}
func (UnimplementedConfigServer) ListConfigItems(context.Context, *ListConfigItemsReq) (*ListConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItems not implemented")
}
func (UnimplementedConfigServer) ListReleasedConfigItems(context.Context, *ListReleasedConfigItemsReq) (*ListReleasedConfigItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedConfigItems not implemented")
}
func (UnimplementedConfigServer) ListConfigItemCount(context.Context, *ListConfigItemCountReq) (*ListConfigItemCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItemCount not implemented")
}
func (UnimplementedConfigServer) ListConfigItemByTuple(context.Context, *ListConfigItemByTupleReq) (*ListConfigItemByTupleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigItemByTuple not implemented")
}
func (UnimplementedConfigServer) GetReleasedKv(context.Context, *GetReleasedKvReq) (*GetReleasedKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedKv not implemented")
}
func (UnimplementedConfigServer) ListReleasedKvs(context.Context, *ListReleasedKvsReq) (*ListReleasedKvsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedKvs not implemented")
}
func (UnimplementedConfigServer) UpdateConfigHook(context.Context, *UpdateConfigHookReq) (*UpdateConfigHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigHook not implemented")
}
func (UnimplementedConfigServer) CreateRelease(context.Context, *CreateReleaseReq) (*CreateReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedConfigServer) ListReleases(context.Context, *ListReleasesReq) (*ListReleasesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedConfigServer) GetReleaseByName(context.Context, *GetReleaseByNameReq) (*release.Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseByName not implemented")
}
func (UnimplementedConfigServer) GetRelease(context.Context, *GetReleaseReq) (*release.Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (UnimplementedConfigServer) DeprecateRelease(context.Context, *DeprecateReleaseReq) (*DeprecateReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprecateRelease not implemented")
}
func (UnimplementedConfigServer) UnDeprecateRelease(context.Context, *UnDeprecateReleaseReq) (*UnDeprecateReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDeprecateRelease not implemented")
}
func (UnimplementedConfigServer) DeleteRelease(context.Context, *DeleteReleaseReq) (*DeleteReleaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelease not implemented")
}
func (UnimplementedConfigServer) CheckReleaseName(context.Context, *CheckReleaseNameReq) (*CheckReleaseNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReleaseName not implemented")
}
func (UnimplementedConfigServer) CreateHook(context.Context, *CreateHookReq) (*CreateHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedConfigServer) DeleteHook(context.Context, *DeleteHookReq) (*DeleteHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedConfigServer) BatchDeleteHook(context.Context, *BatchDeleteHookReq) (*BatchDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteHook not implemented")
}
func (UnimplementedConfigServer) UpdateHook(context.Context, *UpdateHookReq) (*UpdateHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHook not implemented")
}
func (UnimplementedConfigServer) ListHooks(context.Context, *ListHooksReq) (*ListHooksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (UnimplementedConfigServer) ListHookTags(context.Context, *ListHookTagsReq) (*ListHookTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookTags not implemented")
}
func (UnimplementedConfigServer) GetHook(context.Context, *GetHookReq) (*GetHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHook not implemented")
}
func (UnimplementedConfigServer) CreateHookRevision(context.Context, *CreateHookRevisionReq) (*CreateHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHookRevision not implemented")
}
func (UnimplementedConfigServer) ListHookRevisions(context.Context, *ListHookRevisionsReq) (*ListHookRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookRevisions not implemented")
}
func (UnimplementedConfigServer) DeleteHookRevision(context.Context, *DeleteHookRevisionReq) (*DeleteHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHookRevision not implemented")
}
func (UnimplementedConfigServer) PublishHookRevision(context.Context, *PublishHookRevisionReq) (*PublishHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishHookRevision not implemented")
}
func (UnimplementedConfigServer) GetHookRevision(context.Context, *GetHookRevisionReq) (*hook_revision.HookRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHookRevision not implemented")
}
func (UnimplementedConfigServer) UpdateHookRevision(context.Context, *UpdateHookRevisionReq) (*UpdateHookRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHookRevision not implemented")
}
func (UnimplementedConfigServer) ListHookReferences(context.Context, *ListHookReferencesReq) (*ListHookReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookReferences not implemented")
}
func (UnimplementedConfigServer) ListHookRevisionReferences(context.Context, *ListHookRevisionReferencesReq) (*ListHookRevisionReferencesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHookRevisionReferences not implemented")
}
func (UnimplementedConfigServer) GetReleaseHook(context.Context, *GetReleaseHookReq) (*GetReleaseHookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseHook not implemented")
}
func (UnimplementedConfigServer) CreateTemplateSpace(context.Context, *CreateTemplateSpaceReq) (*CreateTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSpace not implemented")
}
func (UnimplementedConfigServer) DeleteTemplateSpace(context.Context, *DeleteTemplateSpaceReq) (*DeleteTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSpace not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateSpace(context.Context, *UpdateTemplateSpaceReq) (*UpdateTemplateSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSpace not implemented")
}
func (UnimplementedConfigServer) ListTemplateSpaces(context.Context, *ListTemplateSpacesReq) (*ListTemplateSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSpaces not implemented")
}
func (UnimplementedConfigServer) GetAllBizsOfTmplSpaces(context.Context, *base.EmptyReq) (*GetAllBizsOfTmplSpacesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBizsOfTmplSpaces not implemented")
}
func (UnimplementedConfigServer) CreateDefaultTmplSpace(context.Context, *CreateDefaultTmplSpaceReq) (*CreateDefaultTmplSpaceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefaultTmplSpace not implemented")
}
func (UnimplementedConfigServer) ListTmplSpacesByIDs(context.Context, *ListTmplSpacesByIDsReq) (*ListTmplSpacesByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSpacesByIDs not implemented")
}
func (UnimplementedConfigServer) CreateTemplate(context.Context, *CreateTemplateReq) (*CreateTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedConfigServer) DeleteTemplate(context.Context, *DeleteTemplateReq) (*DeleteTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedConfigServer) BatchDeleteTemplate(context.Context, *BatchDeleteTemplateReq) (*BatchDeleteTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteTemplate not implemented")
}
func (UnimplementedConfigServer) UpdateTemplate(context.Context, *UpdateTemplateReq) (*UpdateTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedConfigServer) ListTemplates(context.Context, *ListTemplatesReq) (*ListTemplatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedConfigServer) BatchUpsertTemplates(context.Context, *BatchUpsertTemplatesReq) (*BatchUpsertTemplatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertTemplates not implemented")
}
func (UnimplementedConfigServer) BatchUpdateTemplatePermissions(context.Context, *BatchUpdateTemplatePermissionsReq) (*BatchUpdateTemplatePermissionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateTemplatePermissions not implemented")
}
func (UnimplementedConfigServer) AddTmplsToTmplSets(context.Context, *AddTmplsToTmplSetsReq) (*AddTmplsToTmplSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTmplsToTmplSets not implemented")
}
func (UnimplementedConfigServer) DeleteTmplsFromTmplSets(context.Context, *DeleteTmplsFromTmplSetsReq) (*BatchDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTmplsFromTmplSets not implemented")
}
func (UnimplementedConfigServer) ListTemplatesByIDs(context.Context, *ListTemplatesByIDsReq) (*ListTemplatesByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesByIDs not implemented")
}
func (UnimplementedConfigServer) ListTemplatesNotBound(context.Context, *ListTemplatesNotBoundReq) (*ListTemplatesNotBoundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatesNotBound not implemented")
}
func (UnimplementedConfigServer) ListTemplateByTuple(context.Context, *ListTemplateByTupleReq) (*ListTemplateByTupleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateByTuple not implemented")
}
func (UnimplementedConfigServer) ListTmplsOfTmplSet(context.Context, *ListTmplsOfTmplSetReq) (*ListTmplsOfTmplSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplsOfTmplSet not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetsAndRevisions(context.Context, *ListTemplateSetsAndRevisionsReq) (*ListTemplateSetsAndRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetsAndRevisions not implemented")
}
func (UnimplementedConfigServer) CreateTemplateRevision(context.Context, *CreateTemplateRevisionReq) (*CreateTemplateRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateRevision not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateRevision(context.Context, *UpdateTemplateRevisionReq) (*UpdateTemplateRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateRevision not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisions(context.Context, *ListTemplateRevisionsReq) (*ListTemplateRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisions not implemented")
}
func (UnimplementedConfigServer) GetTemplateRevision(context.Context, *GetTemplateRevisionReq) (*GetTemplateRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateRevision not implemented")
}
func (UnimplementedConfigServer) ListTemplateRevisionsByIDs(context.Context, *ListTemplateRevisionsByIDsReq) (*ListTemplateRevisionsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateRevisionsByIDs not implemented")
}
func (UnimplementedConfigServer) ListTmplRevisionNamesByTmplIDs(context.Context, *ListTmplRevisionNamesByTmplIDsReq) (*ListTmplRevisionNamesByTmplIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionNamesByTmplIDs not implemented")
}
func (UnimplementedConfigServer) CreateTemplateSet(context.Context, *CreateTemplateSetReq) (*CreateTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateSet not implemented")
}
func (UnimplementedConfigServer) DeleteTemplateSet(context.Context, *DeleteTemplateSetReq) (*DeleteTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateSet not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateSet(context.Context, *UpdateTemplateSetReq) (*UpdateTemplateSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateSet not implemented")
}
func (UnimplementedConfigServer) ListTemplateSets(context.Context, *ListTemplateSetsReq) (*ListTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSets not implemented")
}
func (UnimplementedConfigServer) ListAppTemplateSets(context.Context, *ListAppTemplateSetsReq) (*ListAppTemplateSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateSets not implemented")
}
func (UnimplementedConfigServer) ListTemplateSetsByIDs(context.Context, *ListTemplateSetsByIDsReq) (*ListTemplateSetsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateSetsByIDs not implemented")
}
func (UnimplementedConfigServer) ListTmplSetsOfBiz(context.Context, *ListTmplSetsOfBizReq) (*ListTmplSetsOfBizResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetsOfBiz not implemented")
}
func (UnimplementedConfigServer) CreateAppTemplateBinding(context.Context, *CreateAppTemplateBindingReq) (*CreateAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) DeleteAppTemplateBinding(context.Context, *DeleteAppTemplateBindingReq) (*DeleteAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) UpdateAppTemplateBinding(context.Context, *UpdateAppTemplateBindingReq) (*UpdateAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) ListAppTemplateBindings(context.Context, *ListAppTemplateBindingsReq) (*ListAppTemplateBindingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTemplateBindings not implemented")
}
func (UnimplementedConfigServer) ListAppBoundTmplRevisions(context.Context, *ListAppBoundTmplRevisionsReq) (*ListAppBoundTmplRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppBoundTmplRevisions not implemented")
}
func (UnimplementedConfigServer) ListReleasedAppBoundTmplRevisions(context.Context, *ListReleasedAppBoundTmplRevisionsReq) (*ListReleasedAppBoundTmplRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedAppBoundTmplRevisions not implemented")
}
func (UnimplementedConfigServer) GetReleasedAppBoundTmplRevision(context.Context, *GetReleasedAppBoundTmplRevisionReq) (*GetReleasedAppBoundTmplRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedAppBoundTmplRevision not implemented")
}
func (UnimplementedConfigServer) UpdateAppBoundTmplRevisions(context.Context, *UpdateAppBoundTmplRevisionsReq) (*UpdateAppBoundTmplRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppBoundTmplRevisions not implemented")
}
func (UnimplementedConfigServer) DeleteAppBoundTmplSets(context.Context, *DeleteAppBoundTmplSetsReq) (*DeleteAppBoundTmplSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppBoundTmplSets not implemented")
}
func (UnimplementedConfigServer) RemoveAppBoundTmplSet(context.Context, *RemoveAppBoundTmplSetReq) (*RemoveAppBoundTmplSetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppBoundTmplSet not implemented")
}
func (UnimplementedConfigServer) CheckAppTemplateBinding(context.Context, *CheckAppTemplateBindingReq) (*CheckAppTemplateBindingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppTemplateBinding not implemented")
}
func (UnimplementedConfigServer) ImportFromTemplateSetToApp(context.Context, *ImportFromTemplateSetToAppReq) (*ImportFromTemplateSetToAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportFromTemplateSetToApp not implemented")
}
func (UnimplementedConfigServer) ListTmplBoundCounts(context.Context, *ListTmplBoundCountsReq) (*ListTmplBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundCounts not implemented")
}
func (UnimplementedConfigServer) ListTmplRevisionBoundCounts(context.Context, *ListTmplRevisionBoundCountsReq) (*ListTmplRevisionBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionBoundCounts not implemented")
}
func (UnimplementedConfigServer) ListTmplSetBoundCounts(context.Context, *ListTmplSetBoundCountsReq) (*ListTmplSetBoundCountsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetBoundCounts not implemented")
}
func (UnimplementedConfigServer) ListTmplBoundUnnamedApps(context.Context, *ListTmplBoundUnnamedAppsReq) (*ListTmplBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundUnnamedApps not implemented")
}
func (UnimplementedConfigServer) ListTmplBoundNamedApps(context.Context, *ListTmplBoundNamedAppsReq) (*ListTmplBoundNamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundNamedApps not implemented")
}
func (UnimplementedConfigServer) ListTmplBoundTmplSets(context.Context, *ListTmplBoundTmplSetsReq) (*ListTmplBoundTmplSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplBoundTmplSets not implemented")
}
func (UnimplementedConfigServer) ListMultiTmplBoundTmplSets(context.Context, *ListMultiTmplBoundTmplSetsReq) (*ListMultiTmplBoundTmplSetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiTmplBoundTmplSets not implemented")
}
func (UnimplementedConfigServer) ListTmplRevisionBoundUnnamedApps(context.Context, *ListTmplRevisionBoundUnnamedAppsReq) (*ListTmplRevisionBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionBoundUnnamedApps not implemented")
}
func (UnimplementedConfigServer) ListTmplRevisionBoundNamedApps(context.Context, *ListTmplRevisionBoundNamedAppsReq) (*ListTmplRevisionBoundNamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplRevisionBoundNamedApps not implemented")
}
func (UnimplementedConfigServer) ListTmplSetBoundUnnamedApps(context.Context, *ListTmplSetBoundUnnamedAppsReq) (*ListTmplSetBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetBoundUnnamedApps not implemented")
}
func (UnimplementedConfigServer) ListMultiTmplSetBoundUnnamedApps(context.Context, *ListMultiTmplSetBoundUnnamedAppsReq) (*ListMultiTmplSetBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiTmplSetBoundUnnamedApps not implemented")
}
func (UnimplementedConfigServer) CheckTemplateSetReferencesApps(context.Context, *CheckTemplateSetReferencesAppsReq) (*CheckTemplateSetReferencesAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTemplateSetReferencesApps not implemented")
}
func (UnimplementedConfigServer) ListTmplSetBoundNamedApps(context.Context, *ListTmplSetBoundNamedAppsReq) (*ListTmplSetBoundNamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTmplSetBoundNamedApps not implemented")
}
func (UnimplementedConfigServer) ListLatestTmplBoundUnnamedApps(context.Context, *ListLatestTmplBoundUnnamedAppsReq) (*ListLatestTmplBoundUnnamedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestTmplBoundUnnamedApps not implemented")
}
func (UnimplementedConfigServer) CreateTemplateVariable(context.Context, *CreateTemplateVariableReq) (*CreateTemplateVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplateVariable not implemented")
}
func (UnimplementedConfigServer) DeleteTemplateVariable(context.Context, *DeleteTemplateVariableReq) (*DeleteTemplateVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplateVariable not implemented")
}
func (UnimplementedConfigServer) BatchDeleteTemplateVariable(context.Context, *BatchDeleteBizResourcesReq) (*BatchDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteTemplateVariable not implemented")
}
func (UnimplementedConfigServer) UpdateTemplateVariable(context.Context, *UpdateTemplateVariableReq) (*UpdateTemplateVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateVariable not implemented")
}
func (UnimplementedConfigServer) ListTemplateVariables(context.Context, *ListTemplateVariablesReq) (*ListTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateVariables not implemented")
}
func (UnimplementedConfigServer) ImportTemplateVariables(context.Context, *ImportTemplateVariablesReq) (*ImportTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTemplateVariables not implemented")
}
func (UnimplementedConfigServer) ImportOtherFormatTemplateVariables(context.Context, *ImportOtherFormatTemplateVariablesReq) (*ImportOtherFormatTemplateVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOtherFormatTemplateVariables not implemented")
}
func (UnimplementedConfigServer) ExtractAppTmplVariables(context.Context, *ExtractAppTmplVariablesReq) (*ExtractAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractAppTmplVariables not implemented")
}
func (UnimplementedConfigServer) GetAppTmplVariableRefs(context.Context, *GetAppTmplVariableRefsReq) (*GetAppTmplVariableRefsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppTmplVariableRefs not implemented")
}
func (UnimplementedConfigServer) GetReleasedAppTmplVariableRefs(context.Context, *GetReleasedAppTmplVariableRefsReq) (*GetReleasedAppTmplVariableRefsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasedAppTmplVariableRefs not implemented")
}
func (UnimplementedConfigServer) UpdateAppTmplVariables(context.Context, *UpdateAppTmplVariablesReq) (*UpdateAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppTmplVariables not implemented")
}
func (UnimplementedConfigServer) ListAppTmplVariables(context.Context, *ListAppTmplVariablesReq) (*ListAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppTmplVariables not implemented")
}
func (UnimplementedConfigServer) ListReleasedAppTmplVariables(context.Context, *ListReleasedAppTmplVariablesReq) (*ListReleasedAppTmplVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedAppTmplVariables not implemented")
}
func (UnimplementedConfigServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedConfigServer) DeleteGroup(context.Context, *DeleteGroupReq) (*DeleteGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedConfigServer) BatchDeleteGroups(context.Context, *BatchDeleteBizResourcesReq) (*BatchDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteGroups not implemented")
}
func (UnimplementedConfigServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedConfigServer) ListAllGroups(context.Context, *ListAllGroupsReq) (*ListAllGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllGroups not implemented")
}
func (UnimplementedConfigServer) ListAppGroups(context.Context, *ListAppGroupsReq) (*ListAppGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppGroups not implemented")
}
func (UnimplementedConfigServer) ListGroupReleasedApps(context.Context, *ListGroupReleasedAppsReq) (*ListGroupReleasedAppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupReleasedApps not implemented")
}
func (UnimplementedConfigServer) GetGroupByName(context.Context, *GetGroupByNameReq) (*group.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (UnimplementedConfigServer) Publish(context.Context, *PublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedConfigServer) GenerateReleaseAndPublish(context.Context, *GenerateReleaseAndPublishReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReleaseAndPublish not implemented")
}
func (UnimplementedConfigServer) SubmitPublishApprove(context.Context, *SubmitPublishApproveReq) (*PublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPublishApprove not implemented")
}
func (UnimplementedConfigServer) Approve(context.Context, *ApproveReq) (*ApproveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedConfigServer) GetLastSelect(context.Context, *GetLastSelectReq) (*GetLastSelectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSelect not implemented")
}
func (UnimplementedConfigServer) GetLastPublish(context.Context, *GetLastPublishReq) (*GetLastPublishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastPublish not implemented")
}
func (UnimplementedConfigServer) GetReleasesStatus(context.Context, *GetReleasesStatusReq) (*strategy.Strategy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasesStatus not implemented")
}
func (UnimplementedConfigServer) ListAudits(context.Context, *ListAuditsReq) (*ListAuditsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudits not implemented")
}
func (UnimplementedConfigServer) CreateCredentials(context.Context, *CreateCredentialReq) (*CreateCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredentials not implemented")
}
func (UnimplementedConfigServer) ListCredentials(context.Context, *ListCredentialsReq) (*ListCredentialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedConfigServer) DeleteCredential(context.Context, *DeleteCredentialsReq) (*DeleteCredentialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedConfigServer) UpdateCredential(context.Context, *UpdateCredentialsReq) (*UpdateCredentialsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedConfigServer) CheckCredentialName(context.Context, *CheckCredentialNameReq) (*CheckCredentialNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCredentialName not implemented")
}
func (UnimplementedConfigServer) ListCredentialScopes(context.Context, *ListCredentialScopesReq) (*ListCredentialScopesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialScopes not implemented")
}
func (UnimplementedConfigServer) UpdateCredentialScope(context.Context, *UpdateCredentialScopeReq) (*UpdateCredentialScopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentialScope not implemented")
}
func (UnimplementedConfigServer) CredentialScopePreview(context.Context, *CredentialScopePreviewReq) (*CredentialScopePreviewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialScopePreview not implemented")
}
func (UnimplementedConfigServer) CreateKv(context.Context, *CreateKvReq) (*CreateKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKv not implemented")
}
func (UnimplementedConfigServer) UpdateKv(context.Context, *UpdateKvReq) (*UpdateKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKv not implemented")
}
func (UnimplementedConfigServer) ListKvs(context.Context, *ListKvsReq) (*ListKvsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKvs not implemented")
}
func (UnimplementedConfigServer) DeleteKv(context.Context, *DeleteKvReq) (*DeleteKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKv not implemented")
}
func (UnimplementedConfigServer) BatchDeleteKv(context.Context, *BatchDeleteAppResourcesReq) (*BatchDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteKv not implemented")
}
func (UnimplementedConfigServer) BatchUpsertKvs(context.Context, *BatchUpsertKvsReq) (*BatchUpsertKvsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpsertKvs not implemented")
}
func (UnimplementedConfigServer) UnDeleteKv(context.Context, *UnDeleteKvReq) (*UnDeleteKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDeleteKv not implemented")
}
func (UnimplementedConfigServer) BatchUnDeleteKv(context.Context, *BatchUnDeleteKvReq) (*BatchUnDeleteKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUnDeleteKv not implemented")
}
func (UnimplementedConfigServer) UndoKv(context.Context, *UndoKvReq) (*UndoKvResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoKv not implemented")
}
func (UnimplementedConfigServer) ImportKvs(context.Context, *ImportKvsReq) (*ImportKvsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportKvs not implemented")
}
func (UnimplementedConfigServer) FindNearExpiryCertKvs(context.Context, *FindNearExpiryCertKvsReq) (*FindNearExpiryCertKvsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearExpiryCertKvs not implemented")
}
func (UnimplementedConfigServer) ListClients(context.Context, *ListClientsReq) (*ListClientsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedConfigServer) ListClientEvents(context.Context, *ListClientEventsReq) (*ListClientEventsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientEvents not implemented")
}
func (UnimplementedConfigServer) RetryClients(context.Context, *RetryClientsReq) (*RetryClientsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryClients not implemented")
}
func (UnimplementedConfigServer) ListClientQuerys(context.Context, *ListClientQuerysReq) (*ListClientQuerysResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientQuerys not implemented")
}
func (UnimplementedConfigServer) CreateClientQuery(context.Context, *CreateClientQueryReq) (*CreateClientQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientQuery not implemented")
}
func (UnimplementedConfigServer) UpdateClientQuery(context.Context, *UpdateClientQueryReq) (*UpdateClientQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientQuery not implemented")
}
func (UnimplementedConfigServer) DeleteClientQuery(context.Context, *DeleteClientQueryReq) (*DeleteClientQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientQuery not implemented")
}
func (UnimplementedConfigServer) CheckClientQueryName(context.Context, *CheckClientQueryNameReq) (*CheckClientQueryNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClientQueryName not implemented")
}
func (UnimplementedConfigServer) ClientConfigVersionStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientConfigVersionStatistics not implemented")
}
func (UnimplementedConfigServer) ClientPullTrendStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPullTrendStatistics not implemented")
}
func (UnimplementedConfigServer) ClientPullStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPullStatistics not implemented")
}
func (UnimplementedConfigServer) ClientLabelStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientLabelStatistics not implemented")
}
func (UnimplementedConfigServer) ClientAnnotationStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAnnotationStatistics not implemented")
}
func (UnimplementedConfigServer) ClientVersionStatistics(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientVersionStatistics not implemented")
}
func (UnimplementedConfigServer) ListClientLabelAndAnnotation(context.Context, *ListClientLabelAndAnnotationReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClientLabelAndAnnotation not implemented")
}
func (UnimplementedConfigServer) ClientSpecificFailedReason(context.Context, *client.ClientCommonReq) (*structpb.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSpecificFailedReason not implemented")
}
func (UnimplementedConfigServer) CompareConfigItemConflicts(context.Context, *CompareConfigItemConflictsReq) (*CompareConfigItemConflictsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareConfigItemConflicts not implemented")
}
func (UnimplementedConfigServer) CompareKvConflicts(context.Context, *CompareKvConflictsReq) (*CompareKvConflictsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareKvConflicts not implemented")
}
func (UnimplementedConfigServer) GetTemplateAndNonTemplateCICount(context.Context, *GetTemplateAndNonTemplateCICountReq) (*GetTemplateAndNonTemplateCICountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateAndNonTemplateCICount not implemented")
}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetApp(ctx, req.(*GetAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAppByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAppByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetAppByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAppByName(ctx, req.(*GetAppByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppsRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppsRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppsRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppsRest(ctx, req.(*ListAppsRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppsBySpaceRest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsBySpaceRestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppsBySpaceRest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppsBySpaceRest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppsBySpaceRest(ctx, req.(*ListAppsBySpaceRestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateConfigItem(ctx, req.(*CreateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUpsertConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUpsertConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUpsertConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUpsertConfigItems(ctx, req.(*BatchUpsertConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfigItem(ctx, req.(*UpdateConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteConfigItem(ctx, req.(*DeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteAppResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteConfigItems(ctx, req.(*BatchDeleteAppResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UnDeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UnDeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UnDeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UnDeleteConfigItem(ctx, req.(*UnDeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUnDeleteConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUnDeleteConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUnDeleteConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUnDeleteConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUnDeleteConfigItem(ctx, req.(*BatchUnDeleteConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UndoConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UndoConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UndoConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UndoConfigItem(ctx, req.(*UndoConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetConfigItem(ctx, req.(*GetConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleasedConfigItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedConfigItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleasedConfigItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleasedConfigItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleasedConfigItem(ctx, req.(*GetReleasedConfigItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListConfigItems(ctx, req.(*ListConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleasedConfigItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedConfigItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleasedConfigItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleasedConfigItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleasedConfigItems(ctx, req.(*ListReleasedConfigItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListConfigItemCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListConfigItemCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListConfigItemCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListConfigItemCount(ctx, req.(*ListConfigItemCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListConfigItemByTuple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigItemByTupleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListConfigItemByTuple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListConfigItemByTuple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListConfigItemByTuple(ctx, req.(*ListConfigItemByTupleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleasedKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleasedKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleasedKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleasedKv(ctx, req.(*GetReleasedKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleasedKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleasedKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleasedKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleasedKvs(ctx, req.(*ListReleasedKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfigHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfigHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateConfigHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfigHook(ctx, req.(*UpdateConfigHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateRelease(ctx, req.(*CreateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleases(ctx, req.(*ListReleasesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleaseByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleaseByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleaseByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleaseByName(ctx, req.(*GetReleaseByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetRelease(ctx, req.(*GetReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeprecateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprecateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeprecateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeprecateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeprecateRelease(ctx, req.(*DeprecateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UnDeprecateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDeprecateReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UnDeprecateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UnDeprecateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UnDeprecateRelease(ctx, req.(*UnDeprecateReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteRelease(ctx, req.(*DeleteReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CheckReleaseName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReleaseNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CheckReleaseName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CheckReleaseName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CheckReleaseName(ctx, req.(*CheckReleaseNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateHook(ctx, req.(*CreateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteHook(ctx, req.(*DeleteHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteHook(ctx, req.(*BatchDeleteHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateHook(ctx, req.(*UpdateHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHooksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHooks(ctx, req.(*ListHooksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookTags(ctx, req.(*ListHookTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetHook(ctx, req.(*GetHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateHookRevision(ctx, req.(*CreateHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookRevisions(ctx, req.(*ListHookRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteHookRevision(ctx, req.(*DeleteHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_PublishHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).PublishHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_PublishHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).PublishHookRevision(ctx, req.(*PublishHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetHookRevision(ctx, req.(*GetHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateHookRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateHookRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateHookRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateHookRevision(ctx, req.(*UpdateHookRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookReferences(ctx, req.(*ListHookReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListHookRevisionReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHookRevisionReferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListHookRevisionReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListHookRevisionReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListHookRevisionReferences(ctx, req.(*ListHookRevisionReferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleaseHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseHookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleaseHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleaseHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleaseHook(ctx, req.(*GetReleaseHookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateSpace(ctx, req.(*CreateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplateSpace(ctx, req.(*DeleteTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateSpace(ctx, req.(*UpdateTemplateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSpacesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSpaces(ctx, req.(*ListTemplateSpacesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAllBizsOfTmplSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAllBizsOfTmplSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetAllBizsOfTmplSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAllBizsOfTmplSpaces(ctx, req.(*base.EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateDefaultTmplSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefaultTmplSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateDefaultTmplSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateDefaultTmplSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateDefaultTmplSpace(ctx, req.(*CreateDefaultTmplSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplSpacesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSpacesByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplSpacesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplSpacesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplSpacesByIDs(ctx, req.(*ListTmplSpacesByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplate(ctx, req.(*CreateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplate(ctx, req.(*DeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteTemplate(ctx, req.(*BatchDeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplate(ctx, req.(*UpdateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplates(ctx, req.(*ListTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUpsertTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUpsertTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUpsertTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUpsertTemplates(ctx, req.(*BatchUpsertTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUpdateTemplatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateTemplatePermissionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUpdateTemplatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUpdateTemplatePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUpdateTemplatePermissions(ctx, req.(*BatchUpdateTemplatePermissionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_AddTmplsToTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTmplsToTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).AddTmplsToTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_AddTmplsToTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).AddTmplsToTmplSets(ctx, req.(*AddTmplsToTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTmplsFromTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTmplsFromTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTmplsFromTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTmplsFromTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTmplsFromTmplSets(ctx, req.(*DeleteTmplsFromTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplatesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplatesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplatesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplatesByIDs(ctx, req.(*ListTemplatesByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplatesNotBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesNotBoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplatesNotBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplatesNotBound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplatesNotBound(ctx, req.(*ListTemplatesNotBoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateByTuple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateByTupleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateByTuple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateByTuple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateByTuple(ctx, req.(*ListTemplateByTupleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplsOfTmplSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplsOfTmplSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplsOfTmplSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplsOfTmplSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplsOfTmplSet(ctx, req.(*ListTmplsOfTmplSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetsAndRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsAndRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetsAndRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetsAndRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetsAndRevisions(ctx, req.(*ListTemplateSetsAndRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateRevision(ctx, req.(*CreateTemplateRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateRevision(ctx, req.(*UpdateTemplateRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisions(ctx, req.(*ListTemplateRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetTemplateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetTemplateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetTemplateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetTemplateRevision(ctx, req.(*GetTemplateRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateRevisionsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRevisionsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateRevisionsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateRevisionsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateRevisionsByIDs(ctx, req.(*ListTemplateRevisionsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplRevisionNamesByTmplIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionNamesByTmplIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplRevisionNamesByTmplIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplRevisionNamesByTmplIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplRevisionNamesByTmplIDs(ctx, req.(*ListTmplRevisionNamesByTmplIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateSet(ctx, req.(*CreateTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplateSet(ctx, req.(*DeleteTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateSet(ctx, req.(*UpdateTemplateSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSets(ctx, req.(*ListTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppTemplateSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppTemplateSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppTemplateSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppTemplateSets(ctx, req.(*ListAppTemplateSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateSetsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateSetsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateSetsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateSetsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateSetsByIDs(ctx, req.(*ListTemplateSetsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplSetsOfBiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetsOfBizReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplSetsOfBiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplSetsOfBiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplSetsOfBiz(ctx, req.(*ListTmplSetsOfBizReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateAppTemplateBinding(ctx, req.(*CreateAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteAppTemplateBinding(ctx, req.(*DeleteAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAppTemplateBinding(ctx, req.(*UpdateAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppTemplateBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTemplateBindingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppTemplateBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppTemplateBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppTemplateBindings(ctx, req.(*ListAppTemplateBindingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppBoundTmplRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppBoundTmplRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppBoundTmplRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppBoundTmplRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppBoundTmplRevisions(ctx, req.(*ListAppBoundTmplRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleasedAppBoundTmplRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedAppBoundTmplRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleasedAppBoundTmplRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleasedAppBoundTmplRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleasedAppBoundTmplRevisions(ctx, req.(*ListReleasedAppBoundTmplRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleasedAppBoundTmplRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedAppBoundTmplRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleasedAppBoundTmplRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleasedAppBoundTmplRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleasedAppBoundTmplRevision(ctx, req.(*GetReleasedAppBoundTmplRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAppBoundTmplRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppBoundTmplRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAppBoundTmplRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateAppBoundTmplRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAppBoundTmplRevisions(ctx, req.(*UpdateAppBoundTmplRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteAppBoundTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppBoundTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteAppBoundTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteAppBoundTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteAppBoundTmplSets(ctx, req.(*DeleteAppBoundTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RemoveAppBoundTmplSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppBoundTmplSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RemoveAppBoundTmplSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_RemoveAppBoundTmplSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RemoveAppBoundTmplSet(ctx, req.(*RemoveAppBoundTmplSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CheckAppTemplateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppTemplateBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CheckAppTemplateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CheckAppTemplateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CheckAppTemplateBinding(ctx, req.(*CheckAppTemplateBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ImportFromTemplateSetToApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFromTemplateSetToAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ImportFromTemplateSetToApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ImportFromTemplateSetToApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ImportFromTemplateSetToApp(ctx, req.(*ImportFromTemplateSetToAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplBoundCounts(ctx, req.(*ListTmplBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplRevisionBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplRevisionBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplRevisionBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplRevisionBoundCounts(ctx, req.(*ListTmplRevisionBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplSetBoundCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetBoundCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplSetBoundCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplSetBoundCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplSetBoundCounts(ctx, req.(*ListTmplSetBoundCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplBoundUnnamedApps(ctx, req.(*ListTmplBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplBoundNamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundNamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplBoundNamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplBoundNamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplBoundNamedApps(ctx, req.(*ListTmplBoundNamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplBoundTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplBoundTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplBoundTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplBoundTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplBoundTmplSets(ctx, req.(*ListTmplBoundTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListMultiTmplBoundTmplSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiTmplBoundTmplSetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListMultiTmplBoundTmplSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListMultiTmplBoundTmplSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListMultiTmplBoundTmplSets(ctx, req.(*ListMultiTmplBoundTmplSetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplRevisionBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplRevisionBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplRevisionBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplRevisionBoundUnnamedApps(ctx, req.(*ListTmplRevisionBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplRevisionBoundNamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplRevisionBoundNamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplRevisionBoundNamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplRevisionBoundNamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplRevisionBoundNamedApps(ctx, req.(*ListTmplRevisionBoundNamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplSetBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplSetBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplSetBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplSetBoundUnnamedApps(ctx, req.(*ListTmplSetBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListMultiTmplSetBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiTmplSetBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListMultiTmplSetBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListMultiTmplSetBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListMultiTmplSetBoundUnnamedApps(ctx, req.(*ListMultiTmplSetBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CheckTemplateSetReferencesApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTemplateSetReferencesAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CheckTemplateSetReferencesApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CheckTemplateSetReferencesApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CheckTemplateSetReferencesApps(ctx, req.(*CheckTemplateSetReferencesAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTmplSetBoundNamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTmplSetBoundNamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTmplSetBoundNamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTmplSetBoundNamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTmplSetBoundNamedApps(ctx, req.(*ListTmplSetBoundNamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListLatestTmplBoundUnnamedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestTmplBoundUnnamedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListLatestTmplBoundUnnamedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListLatestTmplBoundUnnamedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListLatestTmplBoundUnnamedApps(ctx, req.(*ListLatestTmplBoundUnnamedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateTemplateVariable(ctx, req.(*CreateTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteTemplateVariable(ctx, req.(*DeleteTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteBizResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteTemplateVariable(ctx, req.(*BatchDeleteBizResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateTemplateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateTemplateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateTemplateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateTemplateVariable(ctx, req.(*UpdateTemplateVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTemplateVariables(ctx, req.(*ListTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ImportTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ImportTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ImportTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ImportTemplateVariables(ctx, req.(*ImportTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ImportOtherFormatTemplateVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOtherFormatTemplateVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ImportOtherFormatTemplateVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ImportOtherFormatTemplateVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ImportOtherFormatTemplateVariables(ctx, req.(*ImportOtherFormatTemplateVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ExtractAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ExtractAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ExtractAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ExtractAppTmplVariables(ctx, req.(*ExtractAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetAppTmplVariableRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppTmplVariableRefsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetAppTmplVariableRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetAppTmplVariableRefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetAppTmplVariableRefs(ctx, req.(*GetAppTmplVariableRefsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleasedAppTmplVariableRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasedAppTmplVariableRefsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleasedAppTmplVariableRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleasedAppTmplVariableRefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleasedAppTmplVariableRefs(ctx, req.(*GetReleasedAppTmplVariableRefsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateAppTmplVariables(ctx, req.(*UpdateAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppTmplVariables(ctx, req.(*ListAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListReleasedAppTmplVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedAppTmplVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListReleasedAppTmplVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListReleasedAppTmplVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListReleasedAppTmplVariables(ctx, req.(*ListReleasedAppTmplVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteGroup(ctx, req.(*DeleteGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteBizResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteGroups(ctx, req.(*BatchDeleteBizResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAllGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAllGroups(ctx, req.(*ListAllGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAppGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAppGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAppGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAppGroups(ctx, req.(*ListAppGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListGroupReleasedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupReleasedAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListGroupReleasedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListGroupReleasedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListGroupReleasedApps(ctx, req.(*ListGroupReleasedAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetGroupByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetGroupByName(ctx, req.(*GetGroupByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GenerateReleaseAndPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReleaseAndPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GenerateReleaseAndPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GenerateReleaseAndPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GenerateReleaseAndPublish(ctx, req.(*GenerateReleaseAndPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_SubmitPublishApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPublishApproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).SubmitPublishApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_SubmitPublishApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).SubmitPublishApprove(ctx, req.(*SubmitPublishApproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Approve(ctx, req.(*ApproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetLastSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetLastSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetLastSelect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetLastSelect(ctx, req.(*GetLastSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetLastPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastPublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetLastPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetLastPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetLastPublish(ctx, req.(*GetLastPublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetReleasesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasesStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetReleasesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetReleasesStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetReleasesStatus(ctx, req.(*GetReleasesStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListAudits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListAudits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListAudits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListAudits(ctx, req.(*ListAuditsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateCredentials(ctx, req.(*CreateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCredentials(ctx, req.(*ListCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteCredential(ctx, req.(*DeleteCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCredential(ctx, req.(*UpdateCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CheckCredentialName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCredentialNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CheckCredentialName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CheckCredentialName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CheckCredentialName(ctx, req.(*CheckCredentialNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListCredentialScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialScopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListCredentialScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListCredentialScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListCredentialScopes(ctx, req.(*ListCredentialScopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateCredentialScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialScopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateCredentialScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateCredentialScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateCredentialScope(ctx, req.(*UpdateCredentialScopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CredentialScopePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialScopePreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CredentialScopePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CredentialScopePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CredentialScopePreview(ctx, req.(*CredentialScopePreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateKv(ctx, req.(*CreateKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateKv(ctx, req.(*UpdateKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListKvs(ctx, req.(*ListKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteKv(ctx, req.(*DeleteKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchDeleteKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteAppResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchDeleteKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchDeleteKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchDeleteKv(ctx, req.(*BatchDeleteAppResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUpsertKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpsertKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUpsertKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUpsertKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUpsertKvs(ctx, req.(*BatchUpsertKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UnDeleteKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDeleteKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UnDeleteKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UnDeleteKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UnDeleteKv(ctx, req.(*UnDeleteKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_BatchUnDeleteKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUnDeleteKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).BatchUnDeleteKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_BatchUnDeleteKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).BatchUnDeleteKv(ctx, req.(*BatchUnDeleteKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UndoKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoKvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UndoKv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UndoKv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UndoKv(ctx, req.(*UndoKvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ImportKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ImportKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ImportKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ImportKvs(ctx, req.(*ImportKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_FindNearExpiryCertKvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearExpiryCertKvsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).FindNearExpiryCertKvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_FindNearExpiryCertKvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).FindNearExpiryCertKvs(ctx, req.(*FindNearExpiryCertKvsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListClients(ctx, req.(*ListClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListClientEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListClientEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListClientEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListClientEvents(ctx, req.(*ListClientEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RetryClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RetryClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_RetryClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RetryClients(ctx, req.(*RetryClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListClientQuerys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientQuerysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListClientQuerys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListClientQuerys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListClientQuerys(ctx, req.(*ListClientQuerysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateClientQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateClientQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateClientQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateClientQuery(ctx, req.(*CreateClientQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateClientQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateClientQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateClientQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateClientQuery(ctx, req.(*UpdateClientQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteClientQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteClientQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteClientQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteClientQuery(ctx, req.(*DeleteClientQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CheckClientQueryName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckClientQueryNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CheckClientQueryName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CheckClientQueryName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CheckClientQueryName(ctx, req.(*CheckClientQueryNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientConfigVersionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientConfigVersionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientConfigVersionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientConfigVersionStatistics(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientPullTrendStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientPullTrendStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientPullTrendStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientPullTrendStatistics(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientPullStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientPullStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientPullStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientPullStatistics(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientLabelStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientLabelStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientLabelStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientLabelStatistics(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientAnnotationStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientAnnotationStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientAnnotationStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientAnnotationStatistics(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientVersionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientVersionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientVersionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientVersionStatistics(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListClientLabelAndAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientLabelAndAnnotationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListClientLabelAndAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListClientLabelAndAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListClientLabelAndAnnotation(ctx, req.(*ListClientLabelAndAnnotationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ClientSpecificFailedReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(client.ClientCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ClientSpecificFailedReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ClientSpecificFailedReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ClientSpecificFailedReason(ctx, req.(*client.ClientCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CompareConfigItemConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareConfigItemConflictsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CompareConfigItemConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CompareConfigItemConflicts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CompareConfigItemConflicts(ctx, req.(*CompareConfigItemConflictsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CompareKvConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareKvConflictsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CompareKvConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CompareKvConflicts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CompareKvConflicts(ctx, req.(*CompareKvConflictsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetTemplateAndNonTemplateCICount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateAndNonTemplateCICountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetTemplateAndNonTemplateCICount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetTemplateAndNonTemplateCICount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetTemplateAndNonTemplateCICount(ctx, req.(*GetTemplateAndNonTemplateCICountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbcs.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Config_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Config_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Config_DeleteApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Config_GetApp_Handler,
		},
		{
			MethodName: "GetAppByName",
			Handler:    _Config_GetAppByName_Handler,
		},
		{
			MethodName: "ListAppsRest",
			Handler:    _Config_ListAppsRest_Handler,
		},
		{
			MethodName: "ListAppsBySpaceRest",
			Handler:    _Config_ListAppsBySpaceRest_Handler,
		},
		{
			MethodName: "CreateConfigItem",
			Handler:    _Config_CreateConfigItem_Handler,
		},
		{
			MethodName: "BatchUpsertConfigItems",
			Handler:    _Config_BatchUpsertConfigItems_Handler,
		},
		{
			MethodName: "UpdateConfigItem",
			Handler:    _Config_UpdateConfigItem_Handler,
		},
		{
			MethodName: "DeleteConfigItem",
			Handler:    _Config_DeleteConfigItem_Handler,
		},
		{
			MethodName: "BatchDeleteConfigItems",
			Handler:    _Config_BatchDeleteConfigItems_Handler,
		},
		{
			MethodName: "UnDeleteConfigItem",
			Handler:    _Config_UnDeleteConfigItem_Handler,
		},
		{
			MethodName: "BatchUnDeleteConfigItem",
			Handler:    _Config_BatchUnDeleteConfigItem_Handler,
		},
		{
			MethodName: "UndoConfigItem",
			Handler:    _Config_UndoConfigItem_Handler,
		},
		{
			MethodName: "GetConfigItem",
			Handler:    _Config_GetConfigItem_Handler,
		},
		{
			MethodName: "GetReleasedConfigItem",
			Handler:    _Config_GetReleasedConfigItem_Handler,
		},
		{
			MethodName: "ListConfigItems",
			Handler:    _Config_ListConfigItems_Handler,
		},
		{
			MethodName: "ListReleasedConfigItems",
			Handler:    _Config_ListReleasedConfigItems_Handler,
		},
		{
			MethodName: "ListConfigItemCount",
			Handler:    _Config_ListConfigItemCount_Handler,
		},
		{
			MethodName: "ListConfigItemByTuple",
			Handler:    _Config_ListConfigItemByTuple_Handler,
		},
		{
			MethodName: "GetReleasedKv",
			Handler:    _Config_GetReleasedKv_Handler,
		},
		{
			MethodName: "ListReleasedKvs",
			Handler:    _Config_ListReleasedKvs_Handler,
		},
		{
			MethodName: "UpdateConfigHook",
			Handler:    _Config_UpdateConfigHook_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Config_CreateRelease_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _Config_ListReleases_Handler,
		},
		{
			MethodName: "GetReleaseByName",
			Handler:    _Config_GetReleaseByName_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _Config_GetRelease_Handler,
		},
		{
			MethodName: "DeprecateRelease",
			Handler:    _Config_DeprecateRelease_Handler,
		},
		{
			MethodName: "UnDeprecateRelease",
			Handler:    _Config_UnDeprecateRelease_Handler,
		},
		{
			MethodName: "DeleteRelease",
			Handler:    _Config_DeleteRelease_Handler,
		},
		{
			MethodName: "CheckReleaseName",
			Handler:    _Config_CheckReleaseName_Handler,
		},
		{
			MethodName: "CreateHook",
			Handler:    _Config_CreateHook_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _Config_DeleteHook_Handler,
		},
		{
			MethodName: "BatchDeleteHook",
			Handler:    _Config_BatchDeleteHook_Handler,
		},
		{
			MethodName: "UpdateHook",
			Handler:    _Config_UpdateHook_Handler,
		},
		{
			MethodName: "ListHooks",
			Handler:    _Config_ListHooks_Handler,
		},
		{
			MethodName: "ListHookTags",
			Handler:    _Config_ListHookTags_Handler,
		},
		{
			MethodName: "GetHook",
			Handler:    _Config_GetHook_Handler,
		},
		{
			MethodName: "CreateHookRevision",
			Handler:    _Config_CreateHookRevision_Handler,
		},
		{
			MethodName: "ListHookRevisions",
			Handler:    _Config_ListHookRevisions_Handler,
		},
		{
			MethodName: "DeleteHookRevision",
			Handler:    _Config_DeleteHookRevision_Handler,
		},
		{
			MethodName: "PublishHookRevision",
			Handler:    _Config_PublishHookRevision_Handler,
		},
		{
			MethodName: "GetHookRevision",
			Handler:    _Config_GetHookRevision_Handler,
		},
		{
			MethodName: "UpdateHookRevision",
			Handler:    _Config_UpdateHookRevision_Handler,
		},
		{
			MethodName: "ListHookReferences",
			Handler:    _Config_ListHookReferences_Handler,
		},
		{
			MethodName: "ListHookRevisionReferences",
			Handler:    _Config_ListHookRevisionReferences_Handler,
		},
		{
			MethodName: "GetReleaseHook",
			Handler:    _Config_GetReleaseHook_Handler,
		},
		{
			MethodName: "CreateTemplateSpace",
			Handler:    _Config_CreateTemplateSpace_Handler,
		},
		{
			MethodName: "DeleteTemplateSpace",
			Handler:    _Config_DeleteTemplateSpace_Handler,
		},
		{
			MethodName: "UpdateTemplateSpace",
			Handler:    _Config_UpdateTemplateSpace_Handler,
		},
		{
			MethodName: "ListTemplateSpaces",
			Handler:    _Config_ListTemplateSpaces_Handler,
		},
		{
			MethodName: "GetAllBizsOfTmplSpaces",
			Handler:    _Config_GetAllBizsOfTmplSpaces_Handler,
		},
		{
			MethodName: "CreateDefaultTmplSpace",
			Handler:    _Config_CreateDefaultTmplSpace_Handler,
		},
		{
			MethodName: "ListTmplSpacesByIDs",
			Handler:    _Config_ListTmplSpacesByIDs_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Config_CreateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Config_DeleteTemplate_Handler,
		},
		{
			MethodName: "BatchDeleteTemplate",
			Handler:    _Config_BatchDeleteTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _Config_UpdateTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _Config_ListTemplates_Handler,
		},
		{
			MethodName: "BatchUpsertTemplates",
			Handler:    _Config_BatchUpsertTemplates_Handler,
		},
		{
			MethodName: "BatchUpdateTemplatePermissions",
			Handler:    _Config_BatchUpdateTemplatePermissions_Handler,
		},
		{
			MethodName: "AddTmplsToTmplSets",
			Handler:    _Config_AddTmplsToTmplSets_Handler,
		},
		{
			MethodName: "DeleteTmplsFromTmplSets",
			Handler:    _Config_DeleteTmplsFromTmplSets_Handler,
		},
		{
			MethodName: "ListTemplatesByIDs",
			Handler:    _Config_ListTemplatesByIDs_Handler,
		},
		{
			MethodName: "ListTemplatesNotBound",
			Handler:    _Config_ListTemplatesNotBound_Handler,
		},
		{
			MethodName: "ListTemplateByTuple",
			Handler:    _Config_ListTemplateByTuple_Handler,
		},
		{
			MethodName: "ListTmplsOfTmplSet",
			Handler:    _Config_ListTmplsOfTmplSet_Handler,
		},
		{
			MethodName: "ListTemplateSetsAndRevisions",
			Handler:    _Config_ListTemplateSetsAndRevisions_Handler,
		},
		{
			MethodName: "CreateTemplateRevision",
			Handler:    _Config_CreateTemplateRevision_Handler,
		},
		{
			MethodName: "UpdateTemplateRevision",
			Handler:    _Config_UpdateTemplateRevision_Handler,
		},
		{
			MethodName: "ListTemplateRevisions",
			Handler:    _Config_ListTemplateRevisions_Handler,
		},
		{
			MethodName: "GetTemplateRevision",
			Handler:    _Config_GetTemplateRevision_Handler,
		},
		{
			MethodName: "ListTemplateRevisionsByIDs",
			Handler:    _Config_ListTemplateRevisionsByIDs_Handler,
		},
		{
			MethodName: "ListTmplRevisionNamesByTmplIDs",
			Handler:    _Config_ListTmplRevisionNamesByTmplIDs_Handler,
		},
		{
			MethodName: "CreateTemplateSet",
			Handler:    _Config_CreateTemplateSet_Handler,
		},
		{
			MethodName: "DeleteTemplateSet",
			Handler:    _Config_DeleteTemplateSet_Handler,
		},
		{
			MethodName: "UpdateTemplateSet",
			Handler:    _Config_UpdateTemplateSet_Handler,
		},
		{
			MethodName: "ListTemplateSets",
			Handler:    _Config_ListTemplateSets_Handler,
		},
		{
			MethodName: "ListAppTemplateSets",
			Handler:    _Config_ListAppTemplateSets_Handler,
		},
		{
			MethodName: "ListTemplateSetsByIDs",
			Handler:    _Config_ListTemplateSetsByIDs_Handler,
		},
		{
			MethodName: "ListTmplSetsOfBiz",
			Handler:    _Config_ListTmplSetsOfBiz_Handler,
		},
		{
			MethodName: "CreateAppTemplateBinding",
			Handler:    _Config_CreateAppTemplateBinding_Handler,
		},
		{
			MethodName: "DeleteAppTemplateBinding",
			Handler:    _Config_DeleteAppTemplateBinding_Handler,
		},
		{
			MethodName: "UpdateAppTemplateBinding",
			Handler:    _Config_UpdateAppTemplateBinding_Handler,
		},
		{
			MethodName: "ListAppTemplateBindings",
			Handler:    _Config_ListAppTemplateBindings_Handler,
		},
		{
			MethodName: "ListAppBoundTmplRevisions",
			Handler:    _Config_ListAppBoundTmplRevisions_Handler,
		},
		{
			MethodName: "ListReleasedAppBoundTmplRevisions",
			Handler:    _Config_ListReleasedAppBoundTmplRevisions_Handler,
		},
		{
			MethodName: "GetReleasedAppBoundTmplRevision",
			Handler:    _Config_GetReleasedAppBoundTmplRevision_Handler,
		},
		{
			MethodName: "UpdateAppBoundTmplRevisions",
			Handler:    _Config_UpdateAppBoundTmplRevisions_Handler,
		},
		{
			MethodName: "DeleteAppBoundTmplSets",
			Handler:    _Config_DeleteAppBoundTmplSets_Handler,
		},
		{
			MethodName: "RemoveAppBoundTmplSet",
			Handler:    _Config_RemoveAppBoundTmplSet_Handler,
		},
		{
			MethodName: "CheckAppTemplateBinding",
			Handler:    _Config_CheckAppTemplateBinding_Handler,
		},
		{
			MethodName: "ImportFromTemplateSetToApp",
			Handler:    _Config_ImportFromTemplateSetToApp_Handler,
		},
		{
			MethodName: "ListTmplBoundCounts",
			Handler:    _Config_ListTmplBoundCounts_Handler,
		},
		{
			MethodName: "ListTmplRevisionBoundCounts",
			Handler:    _Config_ListTmplRevisionBoundCounts_Handler,
		},
		{
			MethodName: "ListTmplSetBoundCounts",
			Handler:    _Config_ListTmplSetBoundCounts_Handler,
		},
		{
			MethodName: "ListTmplBoundUnnamedApps",
			Handler:    _Config_ListTmplBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListTmplBoundNamedApps",
			Handler:    _Config_ListTmplBoundNamedApps_Handler,
		},
		{
			MethodName: "ListTmplBoundTmplSets",
			Handler:    _Config_ListTmplBoundTmplSets_Handler,
		},
		{
			MethodName: "ListMultiTmplBoundTmplSets",
			Handler:    _Config_ListMultiTmplBoundTmplSets_Handler,
		},
		{
			MethodName: "ListTmplRevisionBoundUnnamedApps",
			Handler:    _Config_ListTmplRevisionBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListTmplRevisionBoundNamedApps",
			Handler:    _Config_ListTmplRevisionBoundNamedApps_Handler,
		},
		{
			MethodName: "ListTmplSetBoundUnnamedApps",
			Handler:    _Config_ListTmplSetBoundUnnamedApps_Handler,
		},
		{
			MethodName: "ListMultiTmplSetBoundUnnamedApps",
			Handler:    _Config_ListMultiTmplSetBoundUnnamedApps_Handler,
		},
		{
			MethodName: "CheckTemplateSetReferencesApps",
			Handler:    _Config_CheckTemplateSetReferencesApps_Handler,
		},
		{
			MethodName: "ListTmplSetBoundNamedApps",
			Handler:    _Config_ListTmplSetBoundNamedApps_Handler,
		},
		{
			MethodName: "ListLatestTmplBoundUnnamedApps",
			Handler:    _Config_ListLatestTmplBoundUnnamedApps_Handler,
		},
		{
			MethodName: "CreateTemplateVariable",
			Handler:    _Config_CreateTemplateVariable_Handler,
		},
		{
			MethodName: "DeleteTemplateVariable",
			Handler:    _Config_DeleteTemplateVariable_Handler,
		},
		{
			MethodName: "BatchDeleteTemplateVariable",
			Handler:    _Config_BatchDeleteTemplateVariable_Handler,
		},
		{
			MethodName: "UpdateTemplateVariable",
			Handler:    _Config_UpdateTemplateVariable_Handler,
		},
		{
			MethodName: "ListTemplateVariables",
			Handler:    _Config_ListTemplateVariables_Handler,
		},
		{
			MethodName: "ImportTemplateVariables",
			Handler:    _Config_ImportTemplateVariables_Handler,
		},
		{
			MethodName: "ImportOtherFormatTemplateVariables",
			Handler:    _Config_ImportOtherFormatTemplateVariables_Handler,
		},
		{
			MethodName: "ExtractAppTmplVariables",
			Handler:    _Config_ExtractAppTmplVariables_Handler,
		},
		{
			MethodName: "GetAppTmplVariableRefs",
			Handler:    _Config_GetAppTmplVariableRefs_Handler,
		},
		{
			MethodName: "GetReleasedAppTmplVariableRefs",
			Handler:    _Config_GetReleasedAppTmplVariableRefs_Handler,
		},
		{
			MethodName: "UpdateAppTmplVariables",
			Handler:    _Config_UpdateAppTmplVariables_Handler,
		},
		{
			MethodName: "ListAppTmplVariables",
			Handler:    _Config_ListAppTmplVariables_Handler,
		},
		{
			MethodName: "ListReleasedAppTmplVariables",
			Handler:    _Config_ListReleasedAppTmplVariables_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Config_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Config_DeleteGroup_Handler,
		},
		{
			MethodName: "BatchDeleteGroups",
			Handler:    _Config_BatchDeleteGroups_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Config_UpdateGroup_Handler,
		},
		{
			MethodName: "ListAllGroups",
			Handler:    _Config_ListAllGroups_Handler,
		},
		{
			MethodName: "ListAppGroups",
			Handler:    _Config_ListAppGroups_Handler,
		},
		{
			MethodName: "ListGroupReleasedApps",
			Handler:    _Config_ListGroupReleasedApps_Handler,
		},
		{
			MethodName: "GetGroupByName",
			Handler:    _Config_GetGroupByName_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Config_Publish_Handler,
		},
		{
			MethodName: "GenerateReleaseAndPublish",
			Handler:    _Config_GenerateReleaseAndPublish_Handler,
		},
		{
			MethodName: "SubmitPublishApprove",
			Handler:    _Config_SubmitPublishApprove_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Config_Approve_Handler,
		},
		{
			MethodName: "GetLastSelect",
			Handler:    _Config_GetLastSelect_Handler,
		},
		{
			MethodName: "GetLastPublish",
			Handler:    _Config_GetLastPublish_Handler,
		},
		{
			MethodName: "GetReleasesStatus",
			Handler:    _Config_GetReleasesStatus_Handler,
		},
		{
			MethodName: "ListAudits",
			Handler:    _Config_ListAudits_Handler,
		},
		{
			MethodName: "CreateCredentials",
			Handler:    _Config_CreateCredentials_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _Config_ListCredentials_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Config_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Config_UpdateCredential_Handler,
		},
		{
			MethodName: "CheckCredentialName",
			Handler:    _Config_CheckCredentialName_Handler,
		},
		{
			MethodName: "ListCredentialScopes",
			Handler:    _Config_ListCredentialScopes_Handler,
		},
		{
			MethodName: "UpdateCredentialScope",
			Handler:    _Config_UpdateCredentialScope_Handler,
		},
		{
			MethodName: "CredentialScopePreview",
			Handler:    _Config_CredentialScopePreview_Handler,
		},
		{
			MethodName: "CreateKv",
			Handler:    _Config_CreateKv_Handler,
		},
		{
			MethodName: "UpdateKv",
			Handler:    _Config_UpdateKv_Handler,
		},
		{
			MethodName: "ListKvs",
			Handler:    _Config_ListKvs_Handler,
		},
		{
			MethodName: "DeleteKv",
			Handler:    _Config_DeleteKv_Handler,
		},
		{
			MethodName: "BatchDeleteKv",
			Handler:    _Config_BatchDeleteKv_Handler,
		},
		{
			MethodName: "BatchUpsertKvs",
			Handler:    _Config_BatchUpsertKvs_Handler,
		},
		{
			MethodName: "UnDeleteKv",
			Handler:    _Config_UnDeleteKv_Handler,
		},
		{
			MethodName: "BatchUnDeleteKv",
			Handler:    _Config_BatchUnDeleteKv_Handler,
		},
		{
			MethodName: "UndoKv",
			Handler:    _Config_UndoKv_Handler,
		},
		{
			MethodName: "ImportKvs",
			Handler:    _Config_ImportKvs_Handler,
		},
		{
			MethodName: "FindNearExpiryCertKvs",
			Handler:    _Config_FindNearExpiryCertKvs_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _Config_ListClients_Handler,
		},
		{
			MethodName: "ListClientEvents",
			Handler:    _Config_ListClientEvents_Handler,
		},
		{
			MethodName: "RetryClients",
			Handler:    _Config_RetryClients_Handler,
		},
		{
			MethodName: "ListClientQuerys",
			Handler:    _Config_ListClientQuerys_Handler,
		},
		{
			MethodName: "CreateClientQuery",
			Handler:    _Config_CreateClientQuery_Handler,
		},
		{
			MethodName: "UpdateClientQuery",
			Handler:    _Config_UpdateClientQuery_Handler,
		},
		{
			MethodName: "DeleteClientQuery",
			Handler:    _Config_DeleteClientQuery_Handler,
		},
		{
			MethodName: "CheckClientQueryName",
			Handler:    _Config_CheckClientQueryName_Handler,
		},
		{
			MethodName: "ClientConfigVersionStatistics",
			Handler:    _Config_ClientConfigVersionStatistics_Handler,
		},
		{
			MethodName: "ClientPullTrendStatistics",
			Handler:    _Config_ClientPullTrendStatistics_Handler,
		},
		{
			MethodName: "ClientPullStatistics",
			Handler:    _Config_ClientPullStatistics_Handler,
		},
		{
			MethodName: "ClientLabelStatistics",
			Handler:    _Config_ClientLabelStatistics_Handler,
		},
		{
			MethodName: "ClientAnnotationStatistics",
			Handler:    _Config_ClientAnnotationStatistics_Handler,
		},
		{
			MethodName: "ClientVersionStatistics",
			Handler:    _Config_ClientVersionStatistics_Handler,
		},
		{
			MethodName: "ListClientLabelAndAnnotation",
			Handler:    _Config_ListClientLabelAndAnnotation_Handler,
		},
		{
			MethodName: "ClientSpecificFailedReason",
			Handler:    _Config_ClientSpecificFailedReason_Handler,
		},
		{
			MethodName: "CompareConfigItemConflicts",
			Handler:    _Config_CompareConfigItemConflicts_Handler,
		},
		{
			MethodName: "CompareKvConflicts",
			Handler:    _Config_CompareKvConflicts_Handler,
		},
		{
			MethodName: "GetTemplateAndNonTemplateCICount",
			Handler:    _Config_GetTemplateAndNonTemplateCICount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_service.proto",
}
