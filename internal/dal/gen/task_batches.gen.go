// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bscp/pkg/dal/table"
)

func newTaskBatch(db *gorm.DB, opts ...gen.DOOption) taskBatch {
	_taskBatch := taskBatch{}

	_taskBatch.taskBatchDo.UseDB(db, opts...)
	_taskBatch.taskBatchDo.UseModel(&table.TaskBatch{})

	tableName := _taskBatch.taskBatchDo.TableName()
	_taskBatch.ALL = field.NewAsterisk(tableName)
	_taskBatch.ID = field.NewUint32(tableName, "id")
	_taskBatch.TenantID = field.NewString(tableName, "tenant_id")
	_taskBatch.BizID = field.NewUint32(tableName, "biz_id")
	_taskBatch.TaskObject = field.NewString(tableName, "task_object")
	_taskBatch.TaskAction = field.NewString(tableName, "task_action")
	_taskBatch.TaskData = field.NewString(tableName, "task_data")
	_taskBatch.Status = field.NewString(tableName, "status")
	_taskBatch.StartAt = field.NewTime(tableName, "start_at")
	_taskBatch.EndAt = field.NewTime(tableName, "end_at")
	_taskBatch.Creator = field.NewString(tableName, "creator")
	_taskBatch.Reviser = field.NewString(tableName, "reviser")
	_taskBatch.CreatedAt = field.NewTime(tableName, "created_at")
	_taskBatch.UpdatedAt = field.NewTime(tableName, "updated_at")

	_taskBatch.fillFieldMap()

	return _taskBatch
}

type taskBatch struct {
	taskBatchDo taskBatchDo

	ALL        field.Asterisk
	ID         field.Uint32
	TenantID   field.String
	BizID      field.Uint32
	TaskObject field.String
	TaskAction field.String
	TaskData   field.String
	Status     field.String
	StartAt    field.Time
	EndAt      field.Time
	Creator    field.String
	Reviser    field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (t taskBatch) Table(newTableName string) *taskBatch {
	t.taskBatchDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskBatch) As(alias string) *taskBatch {
	t.taskBatchDo.DO = *(t.taskBatchDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskBatch) updateTableName(table string) *taskBatch {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.TenantID = field.NewString(table, "tenant_id")
	t.BizID = field.NewUint32(table, "biz_id")
	t.TaskObject = field.NewString(table, "task_object")
	t.TaskAction = field.NewString(table, "task_action")
	t.TaskData = field.NewString(table, "task_data")
	t.Status = field.NewString(table, "status")
	t.StartAt = field.NewTime(table, "start_at")
	t.EndAt = field.NewTime(table, "end_at")
	t.Creator = field.NewString(table, "creator")
	t.Reviser = field.NewString(table, "reviser")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *taskBatch) WithContext(ctx context.Context) ITaskBatchDo {
	return t.taskBatchDo.WithContext(ctx)
}

func (t taskBatch) TableName() string { return t.taskBatchDo.TableName() }

func (t taskBatch) Alias() string { return t.taskBatchDo.Alias() }

func (t taskBatch) Columns(cols ...field.Expr) gen.Columns { return t.taskBatchDo.Columns(cols...) }

func (t *taskBatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskBatch) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["tenant_id"] = t.TenantID
	t.fieldMap["biz_id"] = t.BizID
	t.fieldMap["task_object"] = t.TaskObject
	t.fieldMap["task_action"] = t.TaskAction
	t.fieldMap["task_data"] = t.TaskData
	t.fieldMap["status"] = t.Status
	t.fieldMap["start_at"] = t.StartAt
	t.fieldMap["end_at"] = t.EndAt
	t.fieldMap["creator"] = t.Creator
	t.fieldMap["reviser"] = t.Reviser
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t taskBatch) clone(db *gorm.DB) taskBatch {
	t.taskBatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskBatch) replaceDB(db *gorm.DB) taskBatch {
	t.taskBatchDo.ReplaceDB(db)
	return t
}

type taskBatchDo struct{ gen.DO }

type ITaskBatchDo interface {
	gen.SubQuery
	Debug() ITaskBatchDo
	WithContext(ctx context.Context) ITaskBatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskBatchDo
	WriteDB() ITaskBatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskBatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskBatchDo
	Not(conds ...gen.Condition) ITaskBatchDo
	Or(conds ...gen.Condition) ITaskBatchDo
	Select(conds ...field.Expr) ITaskBatchDo
	Where(conds ...gen.Condition) ITaskBatchDo
	Order(conds ...field.Expr) ITaskBatchDo
	Distinct(cols ...field.Expr) ITaskBatchDo
	Omit(cols ...field.Expr) ITaskBatchDo
	Join(table schema.Tabler, on ...field.Expr) ITaskBatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskBatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskBatchDo
	Group(cols ...field.Expr) ITaskBatchDo
	Having(conds ...gen.Condition) ITaskBatchDo
	Limit(limit int) ITaskBatchDo
	Offset(offset int) ITaskBatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskBatchDo
	Unscoped() ITaskBatchDo
	Create(values ...*table.TaskBatch) error
	CreateInBatches(values []*table.TaskBatch, batchSize int) error
	Save(values ...*table.TaskBatch) error
	First() (*table.TaskBatch, error)
	Take() (*table.TaskBatch, error)
	Last() (*table.TaskBatch, error)
	Find() ([]*table.TaskBatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TaskBatch, err error)
	FindInBatches(result *[]*table.TaskBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.TaskBatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskBatchDo
	Assign(attrs ...field.AssignExpr) ITaskBatchDo
	Joins(fields ...field.RelationField) ITaskBatchDo
	Preload(fields ...field.RelationField) ITaskBatchDo
	FirstOrInit() (*table.TaskBatch, error)
	FirstOrCreate() (*table.TaskBatch, error)
	FindByPage(offset int, limit int) (result []*table.TaskBatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskBatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskBatchDo) Debug() ITaskBatchDo {
	return t.withDO(t.DO.Debug())
}

func (t taskBatchDo) WithContext(ctx context.Context) ITaskBatchDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskBatchDo) ReadDB() ITaskBatchDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskBatchDo) WriteDB() ITaskBatchDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskBatchDo) Session(config *gorm.Session) ITaskBatchDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskBatchDo) Clauses(conds ...clause.Expression) ITaskBatchDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskBatchDo) Returning(value interface{}, columns ...string) ITaskBatchDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskBatchDo) Not(conds ...gen.Condition) ITaskBatchDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskBatchDo) Or(conds ...gen.Condition) ITaskBatchDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskBatchDo) Select(conds ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskBatchDo) Where(conds ...gen.Condition) ITaskBatchDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskBatchDo) Order(conds ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskBatchDo) Distinct(cols ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskBatchDo) Omit(cols ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskBatchDo) Join(table schema.Tabler, on ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskBatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskBatchDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskBatchDo) Group(cols ...field.Expr) ITaskBatchDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskBatchDo) Having(conds ...gen.Condition) ITaskBatchDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskBatchDo) Limit(limit int) ITaskBatchDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskBatchDo) Offset(offset int) ITaskBatchDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskBatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskBatchDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskBatchDo) Unscoped() ITaskBatchDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskBatchDo) Create(values ...*table.TaskBatch) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskBatchDo) CreateInBatches(values []*table.TaskBatch, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskBatchDo) Save(values ...*table.TaskBatch) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskBatchDo) First() (*table.TaskBatch, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.TaskBatch), nil
	}
}

func (t taskBatchDo) Take() (*table.TaskBatch, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.TaskBatch), nil
	}
}

func (t taskBatchDo) Last() (*table.TaskBatch, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.TaskBatch), nil
	}
}

func (t taskBatchDo) Find() ([]*table.TaskBatch, error) {
	result, err := t.DO.Find()
	return result.([]*table.TaskBatch), err
}

func (t taskBatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.TaskBatch, err error) {
	buf := make([]*table.TaskBatch, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskBatchDo) FindInBatches(result *[]*table.TaskBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskBatchDo) Attrs(attrs ...field.AssignExpr) ITaskBatchDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskBatchDo) Assign(attrs ...field.AssignExpr) ITaskBatchDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskBatchDo) Joins(fields ...field.RelationField) ITaskBatchDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskBatchDo) Preload(fields ...field.RelationField) ITaskBatchDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskBatchDo) FirstOrInit() (*table.TaskBatch, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.TaskBatch), nil
	}
}

func (t taskBatchDo) FirstOrCreate() (*table.TaskBatch, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.TaskBatch), nil
	}
}

func (t taskBatchDo) FindByPage(offset int, limit int) (result []*table.TaskBatch, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskBatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskBatchDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskBatchDo) Delete(models ...*table.TaskBatch) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskBatchDo) withDO(do gen.Dao) *taskBatchDo {
	t.DO = *do.(*gen.DO)
	return t
}
