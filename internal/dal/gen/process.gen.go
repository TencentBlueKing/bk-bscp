// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bscp/pkg/dal/table"
)

func newProcess(db *gorm.DB, opts ...gen.DOOption) process {
	_process := process{}

	_process.processDo.UseDB(db, opts...)
	_process.processDo.UseModel(&table.Process{})

	tableName := _process.processDo.TableName()
	_process.ALL = field.NewAsterisk(tableName)
	_process.ID = field.NewUint32(tableName, "id")
	_process.TenantID = field.NewString(tableName, "tenant_id")
	_process.BizID = field.NewUint32(tableName, "biz_id")
	_process.CcProcessID = field.NewUint32(tableName, "cc_process_id")
	_process.SetName = field.NewString(tableName, "set_name")
	_process.ModuleName = field.NewString(tableName, "module_name")
	_process.ServiceName = field.NewString(tableName, "service_name")
	_process.Environment = field.NewString(tableName, "environment")
	_process.Alias_ = field.NewString(tableName, "alias")
	_process.InnerIP = field.NewString(tableName, "inner_ip")
	_process.CcSyncStatus = field.NewString(tableName, "cc_sync_status")
	_process.CcSyncUpdatedAt = field.NewTime(tableName, "cc_sync_updated_at")
	_process.PrevSourceData = field.NewString(tableName, "prev_data")
	_process.SourceData = field.NewString(tableName, "source_data")
	_process.Creator = field.NewString(tableName, "creator")
	_process.Reviser = field.NewString(tableName, "reviser")
	_process.CreatedAt = field.NewTime(tableName, "created_at")
	_process.UpdatedAt = field.NewTime(tableName, "updated_at")

	_process.fillFieldMap()

	return _process
}

type process struct {
	processDo processDo

	ALL             field.Asterisk
	ID              field.Uint32
	TenantID        field.String
	BizID           field.Uint32
	CcProcessID     field.Uint32
	SetName         field.String
	ModuleName      field.String
	ServiceName     field.String
	Environment     field.String
	Alias_          field.String
	InnerIP         field.String
	CcSyncStatus    field.String
	CcSyncUpdatedAt field.Time
	PrevSourceData  field.String
	SourceData      field.String
	Creator         field.String
	Reviser         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (p process) Table(newTableName string) *process {
	p.processDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p process) As(alias string) *process {
	p.processDo.DO = *(p.processDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *process) updateTableName(table string) *process {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint32(table, "id")
	p.TenantID = field.NewString(table, "tenant_id")
	p.BizID = field.NewUint32(table, "biz_id")
	p.CcProcessID = field.NewUint32(table, "cc_process_id")
	p.SetName = field.NewString(table, "set_name")
	p.ModuleName = field.NewString(table, "module_name")
	p.ServiceName = field.NewString(table, "service_name")
	p.Environment = field.NewString(table, "environment")
	p.Alias_ = field.NewString(table, "alias")
	p.InnerIP = field.NewString(table, "inner_ip")
	p.CcSyncStatus = field.NewString(table, "cc_sync_status")
	p.CcSyncUpdatedAt = field.NewTime(table, "cc_sync_updated_at")
	p.PrevSourceData = field.NewString(table, "prev_data")
	p.SourceData = field.NewString(table, "source_data")
	p.Creator = field.NewString(table, "creator")
	p.Reviser = field.NewString(table, "reviser")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *process) WithContext(ctx context.Context) IProcessDo { return p.processDo.WithContext(ctx) }

func (p process) TableName() string { return p.processDo.TableName() }

func (p process) Alias() string { return p.processDo.Alias() }

func (p process) Columns(cols ...field.Expr) gen.Columns { return p.processDo.Columns(cols...) }

func (p *process) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *process) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 18)
	p.fieldMap["id"] = p.ID
	p.fieldMap["tenant_id"] = p.TenantID
	p.fieldMap["biz_id"] = p.BizID
	p.fieldMap["cc_process_id"] = p.CcProcessID
	p.fieldMap["set_name"] = p.SetName
	p.fieldMap["module_name"] = p.ModuleName
	p.fieldMap["service_name"] = p.ServiceName
	p.fieldMap["environment"] = p.Environment
	p.fieldMap["alias"] = p.Alias_
	p.fieldMap["inner_ip"] = p.InnerIP
	p.fieldMap["cc_sync_status"] = p.CcSyncStatus
	p.fieldMap["cc_sync_updated_at"] = p.CcSyncUpdatedAt
	p.fieldMap["prev_data"] = p.PrevSourceData
	p.fieldMap["source_data"] = p.SourceData
	p.fieldMap["creator"] = p.Creator
	p.fieldMap["reviser"] = p.Reviser
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p process) clone(db *gorm.DB) process {
	p.processDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p process) replaceDB(db *gorm.DB) process {
	p.processDo.ReplaceDB(db)
	return p
}

type processDo struct{ gen.DO }

type IProcessDo interface {
	gen.SubQuery
	Debug() IProcessDo
	WithContext(ctx context.Context) IProcessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProcessDo
	WriteDB() IProcessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProcessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProcessDo
	Not(conds ...gen.Condition) IProcessDo
	Or(conds ...gen.Condition) IProcessDo
	Select(conds ...field.Expr) IProcessDo
	Where(conds ...gen.Condition) IProcessDo
	Order(conds ...field.Expr) IProcessDo
	Distinct(cols ...field.Expr) IProcessDo
	Omit(cols ...field.Expr) IProcessDo
	Join(table schema.Tabler, on ...field.Expr) IProcessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProcessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProcessDo
	Group(cols ...field.Expr) IProcessDo
	Having(conds ...gen.Condition) IProcessDo
	Limit(limit int) IProcessDo
	Offset(offset int) IProcessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProcessDo
	Unscoped() IProcessDo
	Create(values ...*table.Process) error
	CreateInBatches(values []*table.Process, batchSize int) error
	Save(values ...*table.Process) error
	First() (*table.Process, error)
	Take() (*table.Process, error)
	Last() (*table.Process, error)
	Find() ([]*table.Process, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Process, err error)
	FindInBatches(result *[]*table.Process, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.Process) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProcessDo
	Assign(attrs ...field.AssignExpr) IProcessDo
	Joins(fields ...field.RelationField) IProcessDo
	Preload(fields ...field.RelationField) IProcessDo
	FirstOrInit() (*table.Process, error)
	FirstOrCreate() (*table.Process, error)
	FindByPage(offset int, limit int) (result []*table.Process, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProcessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p processDo) Debug() IProcessDo {
	return p.withDO(p.DO.Debug())
}

func (p processDo) WithContext(ctx context.Context) IProcessDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p processDo) ReadDB() IProcessDo {
	return p.Clauses(dbresolver.Read)
}

func (p processDo) WriteDB() IProcessDo {
	return p.Clauses(dbresolver.Write)
}

func (p processDo) Session(config *gorm.Session) IProcessDo {
	return p.withDO(p.DO.Session(config))
}

func (p processDo) Clauses(conds ...clause.Expression) IProcessDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p processDo) Returning(value interface{}, columns ...string) IProcessDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p processDo) Not(conds ...gen.Condition) IProcessDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p processDo) Or(conds ...gen.Condition) IProcessDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p processDo) Select(conds ...field.Expr) IProcessDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p processDo) Where(conds ...gen.Condition) IProcessDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p processDo) Order(conds ...field.Expr) IProcessDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p processDo) Distinct(cols ...field.Expr) IProcessDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p processDo) Omit(cols ...field.Expr) IProcessDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p processDo) Join(table schema.Tabler, on ...field.Expr) IProcessDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p processDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProcessDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p processDo) RightJoin(table schema.Tabler, on ...field.Expr) IProcessDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p processDo) Group(cols ...field.Expr) IProcessDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p processDo) Having(conds ...gen.Condition) IProcessDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p processDo) Limit(limit int) IProcessDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p processDo) Offset(offset int) IProcessDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p processDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProcessDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p processDo) Unscoped() IProcessDo {
	return p.withDO(p.DO.Unscoped())
}

func (p processDo) Create(values ...*table.Process) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p processDo) CreateInBatches(values []*table.Process, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p processDo) Save(values ...*table.Process) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p processDo) First() (*table.Process, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.Process), nil
	}
}

func (p processDo) Take() (*table.Process, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.Process), nil
	}
}

func (p processDo) Last() (*table.Process, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.Process), nil
	}
}

func (p processDo) Find() ([]*table.Process, error) {
	result, err := p.DO.Find()
	return result.([]*table.Process), err
}

func (p processDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Process, err error) {
	buf := make([]*table.Process, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p processDo) FindInBatches(result *[]*table.Process, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p processDo) Attrs(attrs ...field.AssignExpr) IProcessDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p processDo) Assign(attrs ...field.AssignExpr) IProcessDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p processDo) Joins(fields ...field.RelationField) IProcessDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p processDo) Preload(fields ...field.RelationField) IProcessDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p processDo) FirstOrInit() (*table.Process, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.Process), nil
	}
}

func (p processDo) FirstOrCreate() (*table.Process, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.Process), nil
	}
}

func (p processDo) FindByPage(offset int, limit int) (result []*table.Process, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p processDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p processDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p processDo) Delete(models ...*table.Process) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *processDo) withDO(do gen.Dao) *processDo {
	p.DO = *do.(*gen.DO)
	return p
}
