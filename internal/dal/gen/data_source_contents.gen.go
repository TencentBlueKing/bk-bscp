// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bscp/pkg/dal/table"
)

func newDataSourceContent(db *gorm.DB, opts ...gen.DOOption) dataSourceContent {
	_dataSourceContent := dataSourceContent{}

	_dataSourceContent.dataSourceContentDo.UseDB(db, opts...)
	_dataSourceContent.dataSourceContentDo.UseModel(&table.DataSourceContent{})

	tableName := _dataSourceContent.dataSourceContentDo.TableName()
	_dataSourceContent.ALL = field.NewAsterisk(tableName)
	_dataSourceContent.ID = field.NewUint32(tableName, "id")
	_dataSourceContent.DataSourceMappingID = field.NewUint32(tableName, "data_source_mapping_id")
	_dataSourceContent.Content = field.NewField(tableName, "content")
	_dataSourceContent.Status = field.NewString(tableName, "status")
	_dataSourceContent.Creator = field.NewString(tableName, "creator")
	_dataSourceContent.Reviser = field.NewString(tableName, "reviser")
	_dataSourceContent.CreatedAt = field.NewTime(tableName, "created_at")
	_dataSourceContent.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dataSourceContent.fillFieldMap()

	return _dataSourceContent
}

type dataSourceContent struct {
	dataSourceContentDo dataSourceContentDo

	ALL                 field.Asterisk
	ID                  field.Uint32
	DataSourceMappingID field.Uint32
	Content             field.Field
	Status              field.String
	Creator             field.String
	Reviser             field.String
	CreatedAt           field.Time
	UpdatedAt           field.Time

	fieldMap map[string]field.Expr
}

func (d dataSourceContent) Table(newTableName string) *dataSourceContent {
	d.dataSourceContentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataSourceContent) As(alias string) *dataSourceContent {
	d.dataSourceContentDo.DO = *(d.dataSourceContentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataSourceContent) updateTableName(table string) *dataSourceContent {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint32(table, "id")
	d.DataSourceMappingID = field.NewUint32(table, "data_source_mapping_id")
	d.Content = field.NewField(table, "content")
	d.Status = field.NewString(table, "status")
	d.Creator = field.NewString(table, "creator")
	d.Reviser = field.NewString(table, "reviser")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dataSourceContent) WithContext(ctx context.Context) IDataSourceContentDo {
	return d.dataSourceContentDo.WithContext(ctx)
}

func (d dataSourceContent) TableName() string { return d.dataSourceContentDo.TableName() }

func (d dataSourceContent) Alias() string { return d.dataSourceContentDo.Alias() }

func (d dataSourceContent) Columns(cols ...field.Expr) gen.Columns {
	return d.dataSourceContentDo.Columns(cols...)
}

func (d *dataSourceContent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataSourceContent) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["data_source_mapping_id"] = d.DataSourceMappingID
	d.fieldMap["content"] = d.Content
	d.fieldMap["status"] = d.Status
	d.fieldMap["creator"] = d.Creator
	d.fieldMap["reviser"] = d.Reviser
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dataSourceContent) clone(db *gorm.DB) dataSourceContent {
	d.dataSourceContentDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataSourceContent) replaceDB(db *gorm.DB) dataSourceContent {
	d.dataSourceContentDo.ReplaceDB(db)
	return d
}

type dataSourceContentDo struct{ gen.DO }

type IDataSourceContentDo interface {
	gen.SubQuery
	Debug() IDataSourceContentDo
	WithContext(ctx context.Context) IDataSourceContentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataSourceContentDo
	WriteDB() IDataSourceContentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataSourceContentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataSourceContentDo
	Not(conds ...gen.Condition) IDataSourceContentDo
	Or(conds ...gen.Condition) IDataSourceContentDo
	Select(conds ...field.Expr) IDataSourceContentDo
	Where(conds ...gen.Condition) IDataSourceContentDo
	Order(conds ...field.Expr) IDataSourceContentDo
	Distinct(cols ...field.Expr) IDataSourceContentDo
	Omit(cols ...field.Expr) IDataSourceContentDo
	Join(table schema.Tabler, on ...field.Expr) IDataSourceContentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataSourceContentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataSourceContentDo
	Group(cols ...field.Expr) IDataSourceContentDo
	Having(conds ...gen.Condition) IDataSourceContentDo
	Limit(limit int) IDataSourceContentDo
	Offset(offset int) IDataSourceContentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSourceContentDo
	Unscoped() IDataSourceContentDo
	Create(values ...*table.DataSourceContent) error
	CreateInBatches(values []*table.DataSourceContent, batchSize int) error
	Save(values ...*table.DataSourceContent) error
	First() (*table.DataSourceContent, error)
	Take() (*table.DataSourceContent, error)
	Last() (*table.DataSourceContent, error)
	Find() ([]*table.DataSourceContent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.DataSourceContent, err error)
	FindInBatches(result *[]*table.DataSourceContent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.DataSourceContent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataSourceContentDo
	Assign(attrs ...field.AssignExpr) IDataSourceContentDo
	Joins(fields ...field.RelationField) IDataSourceContentDo
	Preload(fields ...field.RelationField) IDataSourceContentDo
	FirstOrInit() (*table.DataSourceContent, error)
	FirstOrCreate() (*table.DataSourceContent, error)
	FindByPage(offset int, limit int) (result []*table.DataSourceContent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataSourceContentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataSourceContentDo) Debug() IDataSourceContentDo {
	return d.withDO(d.DO.Debug())
}

func (d dataSourceContentDo) WithContext(ctx context.Context) IDataSourceContentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataSourceContentDo) ReadDB() IDataSourceContentDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataSourceContentDo) WriteDB() IDataSourceContentDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataSourceContentDo) Session(config *gorm.Session) IDataSourceContentDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataSourceContentDo) Clauses(conds ...clause.Expression) IDataSourceContentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataSourceContentDo) Returning(value interface{}, columns ...string) IDataSourceContentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataSourceContentDo) Not(conds ...gen.Condition) IDataSourceContentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataSourceContentDo) Or(conds ...gen.Condition) IDataSourceContentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataSourceContentDo) Select(conds ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataSourceContentDo) Where(conds ...gen.Condition) IDataSourceContentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataSourceContentDo) Order(conds ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataSourceContentDo) Distinct(cols ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataSourceContentDo) Omit(cols ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataSourceContentDo) Join(table schema.Tabler, on ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataSourceContentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataSourceContentDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataSourceContentDo) Group(cols ...field.Expr) IDataSourceContentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataSourceContentDo) Having(conds ...gen.Condition) IDataSourceContentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataSourceContentDo) Limit(limit int) IDataSourceContentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataSourceContentDo) Offset(offset int) IDataSourceContentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataSourceContentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSourceContentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataSourceContentDo) Unscoped() IDataSourceContentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataSourceContentDo) Create(values ...*table.DataSourceContent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataSourceContentDo) CreateInBatches(values []*table.DataSourceContent, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataSourceContentDo) Save(values ...*table.DataSourceContent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataSourceContentDo) First() (*table.DataSourceContent, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.DataSourceContent), nil
	}
}

func (d dataSourceContentDo) Take() (*table.DataSourceContent, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.DataSourceContent), nil
	}
}

func (d dataSourceContentDo) Last() (*table.DataSourceContent, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.DataSourceContent), nil
	}
}

func (d dataSourceContentDo) Find() ([]*table.DataSourceContent, error) {
	result, err := d.DO.Find()
	return result.([]*table.DataSourceContent), err
}

func (d dataSourceContentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.DataSourceContent, err error) {
	buf := make([]*table.DataSourceContent, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataSourceContentDo) FindInBatches(result *[]*table.DataSourceContent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataSourceContentDo) Attrs(attrs ...field.AssignExpr) IDataSourceContentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataSourceContentDo) Assign(attrs ...field.AssignExpr) IDataSourceContentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataSourceContentDo) Joins(fields ...field.RelationField) IDataSourceContentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataSourceContentDo) Preload(fields ...field.RelationField) IDataSourceContentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataSourceContentDo) FirstOrInit() (*table.DataSourceContent, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.DataSourceContent), nil
	}
}

func (d dataSourceContentDo) FirstOrCreate() (*table.DataSourceContent, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.DataSourceContent), nil
	}
}

func (d dataSourceContentDo) FindByPage(offset int, limit int) (result []*table.DataSourceContent, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataSourceContentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataSourceContentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataSourceContentDo) Delete(models ...*table.DataSourceContent) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataSourceContentDo) withDO(do gen.Dao) *dataSourceContentDo {
	d.DO = *do.(*gen.DO)
	return d
}
