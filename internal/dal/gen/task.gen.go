// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bscp/pkg/dal/table"
)

func newTask(db *gorm.DB, opts ...gen.DOOption) task {
	_task := task{}

	_task.taskDo.UseDB(db, opts...)
	_task.taskDo.UseModel(&table.Task{})

	tableName := _task.taskDo.TableName()
	_task.ALL = field.NewAsterisk(tableName)
	_task.ID = field.NewUint32(tableName, "id")
	_task.TenantID = field.NewString(tableName, "tenant_id")
	_task.BizID = field.NewUint32(tableName, "biz_id")
	_task.ParentTaskID = field.NewUint32(tableName, "parent_task_id")
	_task.TaskName = field.NewString(tableName, "task_name")
	_task.TaskType = field.NewString(tableName, "task_type")
	_task.Action = field.NewString(tableName, "action")
	_task.TargetType = field.NewString(tableName, "target_type")
	_task.TargetID = field.NewString(tableName, "target_id")
	_task.EnvType = field.NewString(tableName, "env_type")
	_task.Operator = field.NewString(tableName, "operator")
	_task.Status = field.NewString(tableName, "status")
	_task.Retries = field.NewInt(tableName, "retries")
	_task.MaxRetries = field.NewInt(tableName, "max_retries")
	_task.Payload = field.NewString(tableName, "payload")
	_task.TaskResult = field.NewString(tableName, "task_result")
	_task.StartedAt = field.NewTime(tableName, "started_at")
	_task.FinishedAt = field.NewTime(tableName, "finished_at")
	_task.Creator = field.NewString(tableName, "creator")
	_task.Reviser = field.NewString(tableName, "reviser")
	_task.CreatedAt = field.NewTime(tableName, "created_at")
	_task.UpdatedAt = field.NewTime(tableName, "updated_at")

	_task.fillFieldMap()

	return _task
}

type task struct {
	taskDo taskDo

	ALL          field.Asterisk
	ID           field.Uint32
	TenantID     field.String
	BizID        field.Uint32
	ParentTaskID field.Uint32
	TaskName     field.String
	TaskType     field.String
	Action       field.String
	TargetType   field.String
	TargetID     field.String
	EnvType      field.String
	Operator     field.String
	Status       field.String
	Retries      field.Int
	MaxRetries   field.Int
	Payload      field.String
	TaskResult   field.String
	StartedAt    field.Time
	FinishedAt   field.Time
	Creator      field.String
	Reviser      field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (t task) Table(newTableName string) *task {
	t.taskDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t task) As(alias string) *task {
	t.taskDo.DO = *(t.taskDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *task) updateTableName(table string) *task {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.TenantID = field.NewString(table, "tenant_id")
	t.BizID = field.NewUint32(table, "biz_id")
	t.ParentTaskID = field.NewUint32(table, "parent_task_id")
	t.TaskName = field.NewString(table, "task_name")
	t.TaskType = field.NewString(table, "task_type")
	t.Action = field.NewString(table, "action")
	t.TargetType = field.NewString(table, "target_type")
	t.TargetID = field.NewString(table, "target_id")
	t.EnvType = field.NewString(table, "env_type")
	t.Operator = field.NewString(table, "operator")
	t.Status = field.NewString(table, "status")
	t.Retries = field.NewInt(table, "retries")
	t.MaxRetries = field.NewInt(table, "max_retries")
	t.Payload = field.NewString(table, "payload")
	t.TaskResult = field.NewString(table, "task_result")
	t.StartedAt = field.NewTime(table, "started_at")
	t.FinishedAt = field.NewTime(table, "finished_at")
	t.Creator = field.NewString(table, "creator")
	t.Reviser = field.NewString(table, "reviser")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *task) WithContext(ctx context.Context) ITaskDo { return t.taskDo.WithContext(ctx) }

func (t task) TableName() string { return t.taskDo.TableName() }

func (t task) Alias() string { return t.taskDo.Alias() }

func (t task) Columns(cols ...field.Expr) gen.Columns { return t.taskDo.Columns(cols...) }

func (t *task) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *task) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 22)
	t.fieldMap["id"] = t.ID
	t.fieldMap["tenant_id"] = t.TenantID
	t.fieldMap["biz_id"] = t.BizID
	t.fieldMap["parent_task_id"] = t.ParentTaskID
	t.fieldMap["task_name"] = t.TaskName
	t.fieldMap["task_type"] = t.TaskType
	t.fieldMap["action"] = t.Action
	t.fieldMap["target_type"] = t.TargetType
	t.fieldMap["target_id"] = t.TargetID
	t.fieldMap["env_type"] = t.EnvType
	t.fieldMap["operator"] = t.Operator
	t.fieldMap["status"] = t.Status
	t.fieldMap["retries"] = t.Retries
	t.fieldMap["max_retries"] = t.MaxRetries
	t.fieldMap["payload"] = t.Payload
	t.fieldMap["task_result"] = t.TaskResult
	t.fieldMap["started_at"] = t.StartedAt
	t.fieldMap["finished_at"] = t.FinishedAt
	t.fieldMap["creator"] = t.Creator
	t.fieldMap["reviser"] = t.Reviser
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t task) clone(db *gorm.DB) task {
	t.taskDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t task) replaceDB(db *gorm.DB) task {
	t.taskDo.ReplaceDB(db)
	return t
}

type taskDo struct{ gen.DO }

type ITaskDo interface {
	gen.SubQuery
	Debug() ITaskDo
	WithContext(ctx context.Context) ITaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskDo
	WriteDB() ITaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskDo
	Not(conds ...gen.Condition) ITaskDo
	Or(conds ...gen.Condition) ITaskDo
	Select(conds ...field.Expr) ITaskDo
	Where(conds ...gen.Condition) ITaskDo
	Order(conds ...field.Expr) ITaskDo
	Distinct(cols ...field.Expr) ITaskDo
	Omit(cols ...field.Expr) ITaskDo
	Join(table schema.Tabler, on ...field.Expr) ITaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskDo
	Group(cols ...field.Expr) ITaskDo
	Having(conds ...gen.Condition) ITaskDo
	Limit(limit int) ITaskDo
	Offset(offset int) ITaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskDo
	Unscoped() ITaskDo
	Create(values ...*table.Task) error
	CreateInBatches(values []*table.Task, batchSize int) error
	Save(values ...*table.Task) error
	First() (*table.Task, error)
	Take() (*table.Task, error)
	Last() (*table.Task, error)
	Find() ([]*table.Task, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Task, err error)
	FindInBatches(result *[]*table.Task, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.Task) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskDo
	Assign(attrs ...field.AssignExpr) ITaskDo
	Joins(fields ...field.RelationField) ITaskDo
	Preload(fields ...field.RelationField) ITaskDo
	FirstOrInit() (*table.Task, error)
	FirstOrCreate() (*table.Task, error)
	FindByPage(offset int, limit int) (result []*table.Task, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskDo) Debug() ITaskDo {
	return t.withDO(t.DO.Debug())
}

func (t taskDo) WithContext(ctx context.Context) ITaskDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskDo) ReadDB() ITaskDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskDo) WriteDB() ITaskDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskDo) Session(config *gorm.Session) ITaskDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskDo) Clauses(conds ...clause.Expression) ITaskDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskDo) Returning(value interface{}, columns ...string) ITaskDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskDo) Not(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskDo) Or(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskDo) Select(conds ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskDo) Where(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskDo) Order(conds ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskDo) Distinct(cols ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskDo) Omit(cols ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskDo) Join(table schema.Tabler, on ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskDo) Group(cols ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskDo) Having(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskDo) Limit(limit int) ITaskDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskDo) Offset(offset int) ITaskDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskDo) Unscoped() ITaskDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskDo) Create(values ...*table.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskDo) CreateInBatches(values []*table.Task, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskDo) Save(values ...*table.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskDo) First() (*table.Task, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.Task), nil
	}
}

func (t taskDo) Take() (*table.Task, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.Task), nil
	}
}

func (t taskDo) Last() (*table.Task, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.Task), nil
	}
}

func (t taskDo) Find() ([]*table.Task, error) {
	result, err := t.DO.Find()
	return result.([]*table.Task), err
}

func (t taskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.Task, err error) {
	buf := make([]*table.Task, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskDo) FindInBatches(result *[]*table.Task, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskDo) Attrs(attrs ...field.AssignExpr) ITaskDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskDo) Assign(attrs ...field.AssignExpr) ITaskDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskDo) Joins(fields ...field.RelationField) ITaskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskDo) Preload(fields ...field.RelationField) ITaskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskDo) FirstOrInit() (*table.Task, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.Task), nil
	}
}

func (t taskDo) FirstOrCreate() (*table.Task, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.Task), nil
	}
}

func (t taskDo) FindByPage(offset int, limit int) (result []*table.Task, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskDo) Delete(models ...*table.Task) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskDo) withDO(do gen.Dao) *taskDo {
	t.DO = *do.(*gen.DO)
	return t
}
